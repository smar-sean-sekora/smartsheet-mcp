{
  "openapi": "3.0.3",
  "servers": [
    {
      "url": "https://api.smartsheet.com/2.0"
    },
    {
      "url": "https://api.smartsheet.eu/2.0"
    },
    {
      "url": "https://api.smartsheet.au/2.0"
    }
  ],
  "info": {
    "title": "Smartsheet OpenAPI Reference",
    "version": "2.0.0",
    "description": "Welcome to the OpenAPI reference documentation for the Smartsheet API!\n\n> **IMPORTANT:**\n> * The Smartsheet API is restricted to users on Business and Enterprise plans\n> * The <a href=\"https://www.smartsheet.com/legal/developer-program-agreement\" target=\"_blank\" rel=\"noopener noreferrer\">Developer Agreement</a> governs the use of the Smartsheet API and Smartsheet software development kits (SDKs)\n\n**QUICKLINKS**\n\n- **Base URL:**\n\n    ```\n    https://api.smartsheet.com/2.0/\n    ```\n\n- **Getting started:** <a href=\"https://help.smartsheet.com/articles/2482389-generate-API-key\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API access token</a> and [make a request](/api/smartsheet/guides/getting-started).\n\n- **Changelog:** See the latest [API updates](/api/smartsheet/changelog).\n\n- **Schemas:** View the [object schemas](/api/smartsheet/openapi/schemas) not explicitly listed in the resource sections.\n\n- **Error codes:** Look up common API [error codes](/api/smartsheet/error-codes).\n\n- **Guides:** Learn various ways of using the API with the help of our [Guides](/api/smartsheet/introduction).\n\nBrowse the Smartsheet API operations by resource on the left and start building with the Smartsheet API!\n"
  },
  "tags": [
    {
      "name": "alternateEmailAddress",
      "x-displayName": "Alternate Email addresses",
      "description": "A User in Smartsheet must have a primary email address associated with their user account (User.email) and may optionally have one or more alternate email addresses associated with their account (User.alternateEmails). The following operations must be performed using an user's primary email address:\n\n* Add Group Members\n* Add User\n* Create Update Request\n* Share Report\n* Share Sheet\n* Share Workspace\n\nAttempting to specify a user's alternate email address for any of the above operations results in an error.\n"
    },
    {
      "name": "attachments",
      "x-displayName": "Attachments",
      "description": "Attachments can exist on a [comment](/api/smartsheet/openapi/comments) (that is,\nwithin a discussion), on a [row](/api/smartsheet/openapi/rows), or on a\n[sheet](/api/smartsheet/openapi/sheets).\n\n<h2>Post an Attachment</h2>\n\nLike the Smartsheet app, the Smartsheet API allows uploading files to\nsheets, rows, and comments.\n\nYou can upload a file by performing either a simple upload or a multipart\nupload.\n\n\nA simple upload allows you\nto add a single file attachment to the specified object.\n\nFor example, you can perform a simple upload to attach a file to a\nsheet, [attach a\nfile to a row](/api/smartsheet/openapi/attachments/row-attachments-attachfile), or\n[attach a file to a\ncomment](/api/smartsheet/openapi/attachments/attachments-attachtocomment).\n\n\nA multipart upload\nallows you to add a single file attachment to the specified object (that\nis, attach a file to a sheet, row, or comment), or to create an object and\nattach a file using a single request.\n\nFor example, you can perform a multipart upload to [add a new\ncomment](/api/smartsheet/openapi/comments/comments-create) that contains a single\nfile attachment or to [add a new discussion to a\nsheet](/api/smartsheet/openapi/discussions/discussions-create) that contains a\nsingle file attachment.\n\n\nThe max file size for uploads through the API is limited to 30mb.\n\n\nNOTE: This is a resource-intensive operation. If you encounter an error,\nsee [Rate Limiting](/api/smartsheet/guides/advanced-topics/scalability-options).\n\n\n<h3>Multipart Uploads</h3>\n\n\nA multipart upload request must include the following HTTP headers:\n\n\n| Header | Description |\n| -----|-----|\n| **Content-Length** | The length of the request payload. |\n| **Content-Type** | Must be set to **multipart/form-data**, and include the\nboundary string that separates the parts in the request payload. |\n\n\nThe request body of a multipart upload request contains one or more parts,\neach part containing either JSON or a file to upload.\n\nThe request body must contain at least one part.\n\nEach part must start with the boundary string specified in the\n**Content-Type** request header, and must contain the following part\nheaders:\n\n\n| Header | Description |\n| -----|-----|\n| **Content-Disposition** | Contains the following semicolon-delimited items:<ul><li>**form-data**</li><li>**name=\"*partname*\"**</li><li>**filename=\"*filename*\"** (only required for file parts)</li></ul>NOTE: Values specified in the Content-Disposition header must be URL-encoded. |\n| **Content-Type** | The content type of the part: **application/json** for JSON objects, or the applicable MIME type for file parts |\n\n\nThe last part in the request must be followed by the boundary string,\nfollowed by two hyphens.\n\n\nThe documentation for each operation that supports multipart uploads\nspecifies the number and names of parts that are expected for the\noperation.\n\nFile parts must have the part name \"file\", and documentation for\noperations which allow for JSON object parts specify the required part\nname for the JSON part.\n\n\nThe following example shows a multipart upload request that creates a\ncomment containing the specified text and file attachment:\n\n\n`POST\nhttps://api.smartsheet.com/2.0/sheets/4509093797881732/discussions/2889925487028100/comments`\n\n`Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789`\n\n`Content-Length: 29008`\n\n`Content-Type: multipart/form-data; boundary=----gU8h01zAAp3LagBr`\n\n\n`------gU8h01zAAp3LagBr`\n\n`Content-Disposition: form-data; name=\"comment\"`\n\n`Content-Type: application/json`\n\n\n`{ \"text\": \"Please review the attached image.\" }`\n\n`------gU8h01zAAp3LagBr`\n\n`Content-Disposition: form-data; name=\"file\"; filename=\"picture.jpg\"`\n\n`Content-Type: image/jpeg`\n\n\n*< Binary content for file >*\n\n`------gU8h01zAAp3LagBr--`\n\n\nNOTE: Most programming languages have libraries that can be used to\nassemble multipart requests.\n\n\n<h3>Simple Uploads</h3>\n\n\nTo perform this kind of upload, you must set specific headers to tell\nSmartsheet about the file. The following three headers are required:\n\n\nHeader | Description |\n-----|-----|\n**Content-Disposition** | **attachment** to tell the API that a file is in the body of the `POST` request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes\n**Content-Length** | Must be set to the size of the file, in bytes. For example to determine file size using in UNIX: <p>`$ ls -l ProgressReport.docx`<br/>`5463 ProgressReport.docx`</p>\n**Content-Type** | Can be left blank if it is not known (but must be present); Smartsheet makes its best guess based on the extension of the file.\n\n\nThe following example request shows a simple upload that adds a file\nattachment to a sheet:\n\n\n`POST https://api.smartsheet.com/2.0/sheets/4509093797881732/attachments`\n\n`Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789`\n\n`Content-Disposition: attachment; filename=\"ProgressReport.docx\"`\n\n`Content-Type: application/msword`\n\n`Content-Length: 5463`\n\n\n*< Binary content for file >*\n\n\nAs shown in this example, the contents of the file is included in the body\nof the `POST` request. In most programming languages, this is done by\nreading the file from an input stream and writing it out to the output\nstream of the HTTP request.\n"
    },
    {
      "name": "automationRules",
      "x-displayName": "Automation Rules",
      "description": "Automation is a catch-all term for approvals, notifications, and update\nrequests. You can delete, update, or retrieve various automation settings\nthrough the API. You cannot create new automation rules programmatically.\n\n<h2>Disabled Reasons for Automation Rules</h2>\n\nReason | Description |\n-----|-----|\n**APPROVAL_COLUMN_MISSING** | This rule's approval status column has been deleted.\n**APPROVAL_COLUMN_WRONG_TYPE** | The approval column must be a dropdown column.\n**AUTOMATION_NOT_ENABLED_FOR_ORG** | To create or edit automated actions, you need to upgrade your organization account to a Business or Enterprise plan.\n**COLUMN_MISSING** | A column referenced by this rule has been deleted.\n**COLUMN_TYPE_INCOMPATIBLE** | A column referenced by this rule has been changed to an incompatible column type.\n**NO_POTENTIAL_RECIPIENTS** | This rule has no recipients that will be able to receive notifications based on this sheet's permission settings or this account's approved domain sharing list.\n**NO_VALID_SELECTED_COLUMNS** | All selected columns for this rule have been deleted.\n"
    },
    {
      "name": "cellImages",
      "x-displayName": "Cell Images",
      "description": "A cell image is an image that has been uploaded to a cell within a sheet.\n"
    },
    {
      "name": "cells",
      "x-displayName": "Cells",
      "description": "A collection of cells comprises each row in a sheet.\n\n<h2>Cell Links</h2>\n\nCreating or updating cell links via the **cell.linkInFromCell** attribute is a special operation.\nA given row or cell update operation may contain only link updates, or no link updates.\nAttempting to mix row/cell updates with cell link updates results in error code 1115.\nAdditionally, a [CellLink object](/api/smartsheet/openapi/schemas/celllink) can only be added to an existing cell, so the **cell.linkInFromCell** attribute is not allowed when POSTing a new row to a sheet.\n\nWhen creating a cell link, **cell.value** must be null (the data is pulled from the linked cell).\n\nA cell may not contain both a hyperlink and a cell link, so **hyperlink** and **linkInFromCell** may never both be non-null at the same time.\n\n<h2>Cell Reference</h2>\n\n<h3>Cell Value Representation</h3>\n\n[Cell objects](/api/smartsheet/openapi/cells/cell) retrieved through the Smartsheet APIs have two main attributes representing cell values: **Cell.value**, and\n**Cell.displayValue**. A third attribute, **Cell.objectValue** is currently used only for adding and updating predecessors, or for multi-contact or multi-picklist details, such as email addresses or values in a multi-picklist. An empty cell returns no value.\n\n**Cell.displayValue** is always a string and is only returned for certain column types (see below).  It represents the formatted value as it should\nbe displayed to an end-user.  For example, if a TEXT_NUMBER column is formatted as a US Dollar currency, its **value** may be a number\nlike 1234.5678, but its **displayValue** is \"$1,234.57\".\n\n**Cell.value** represents a cell's raw value and can be one of the following primitive JSON types: string, number, or Boolean,\ndepending on the column type.  An empty cell returns no value. Complex types are represented as strings, formatted as described below:\n\n<a href=\"https://help.smartsheet.com/articles/765737-project-sheet-columns-start-date-end-date-duration-complete-and-predecessors\" target=\"_blank\" rel=\"noopener noreferrer\">Help with Project Columns</a>\n\nColumn Type | Possible Types for Cell.value | Returns Cell.displayValue?\n------------|-------------------------------|---------------------------\nABSTRACT_DATETIME | string: a project date and time in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO-8601</a> format, or a free-form text value.<br/>number: see [Dates and Times](/api/smartsheet/guides/basics/dates-and-times) for how to request dates to be returned as numbers. | No.\nCHECKBOX | Boolean: **true** if the checkbox is checked, **false** if unchecked, no value if the cell hasn't been touched yet.<br/>string: a free-form text value. | No.\nCONTACT_LIST | string: an email address representing a contact, or a free-form text value. | Yes: same as **value** for free-form strings; for contacts, the contact's name if any, else their email address.\nDATE | string: a date in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO-8601</a> format, or a free-form text value.<br/>number: see [Dates and Times](/api/smartsheet/guides/basics/dates-and-times) for how to request dates to be returned as numbers. | No.\nDURATION | string: a duration value such as \"4d 6h 30m\" in the user's locale, or a free-form text value.<br/>See the <a href=\"https://help.smartsheet.com/articles/765727-enabling-dependencies-using-predecessors#toc-duration-and-predecessors\" target=\"_blank\" rel=\"noopener noreferrer\">Help Center</a> for more information on durations. | Yes: same as **value**\nMULTI_CONTACT_LIST | string: only visible when using a query parameter of **level** and the value appropriate to the dashboard, report, or sheet that you are querying, otherwise the column type is TEXT_NUMBER. | Yes: same as **value**; to see actual email addresses, see below.\nMULTI_PICKLIST | string: only visible when using a query parameter of **level** and the value appropriate to the dashboard, report, or sheet that you are querying, otherwise the column type is TEXT_NUMBER. | Yes: same as **value**; to see objectValue, see below.\nPICKLIST | string: one of the picklist's column options, or a free-form text value.<br/>number: numeric values | Yes: same as **value** for strings; for number values, the number with formatting applied.\nPREDECESSOR\t| string: a comma-delimited predecessor list such as \"12FS +3d 4h, 14SS\", or a free-form text value.<br/>See the <a href=\"https://help.smartsheet.com/articles/765727-enabling-dependencies-using-predecessors#toc-duration-and-predecessors\" target=\"_blank\" rel=\"noopener noreferrer\">Help Center</a> for more information on predecessors. | Yes: same as **value**\nTEXT_NUMBER\t| string: free-form text values<br/>number: numeric values | Yes: same as **value** for strings; for number values, the number with formatting applied.\n\n**Cell.objectValue** is an object representation of a cell's value and is currently used for adding or updating predecessor cell values, or for multi-contact details, such as email addresses.\n\n* For predecessors, it provides a more \"programmer friendly\" format for assembling predecessors. To update a cell's predecessors, set **objectValue** to a\n[PredecessorList object](/api/smartsheet/openapi/schemas/predecessorlist) containing [Predecessor objects](/api/smartsheet/openapi/schemas/predecessor).\n* For multi-contact or multi-picklist details, use both a level query parameter *and* an **include=objectValue** query to see email addresses rather than display names or to see multi-picklist values.\n\n<h3>Cell Value Parsing</h3>\n\nThe flexibility in cell value data types is a powerful feature in the Smartsheet application; however, it poses a challenge\nfor an API in terms of parsing. Being too flexible might result in unexpected behavior. For instance, if you write code\nto post a Date value to a Smartsheet and the API operation succeeds, you might assume that the date value you sent was interpreted\nas date. What happens if you posted your date in the wrong format? Do you really want Smartsheet to keep the malformed date\nas a string value? Probably not.\n\nTo address this problem, the Smartsheet API employs a simple scheme to indicate whether you want a more predictable and strict\ninterface or a more flexible one. By default, a cell value is expected to conform to \"strict\" rules for the type of the cell's column.\nIf an input value doesn't conform, the API returns [error code 1042](/api/smartsheet/error-codes).\n\nIf, however, you want the same flexibility as the Smartsheet Web app, you can disable the strict rules, and we'll do our best to make\nsense of it. To enable lenient parsing simply include **\"strict\": false** in the [Cell object](/api/smartsheet/openapi/cells/cell) in your request body.\n\nNOTE: How does strict cell value parsing compare to cell validation settings? Strict cell value parsing determines how string values are parsed. It is set on a per-call basis. In contrast, cell validation is part of the column definition. The <b>overrideValidation</b> property is restricted to sheet admins and does <i>not</i> override strict parsing.\n\nThe parsing rules for the various column types are as follows:\n\n**ABSTRACT_DATETIME**\n\nValue | Description |\n-----|-----|\n**lenient** | Smartsheet attempts to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, Smartsheet recognizes the date and stores it as such. All other values are simply text values.\n**strict** | The value must be a string value and a valid ISO 8601 date (YYYY-MM-DD). Alternatively, if Unix time (also known as epoch time) is used, you can use the query parameter of **numericDates** set to **true** to have Smartsheet convert epoch time to human readable dates. See [Dates and Times](/api/smartsheet/guides/basics/dates-and-times) for more information.\n\n**CHECKBOX**\n\nValue | Description |\n-----|-----|\n**lenient** | Boolean values and string values of **true** and **false** are handled the same as **strict**. All other values are saved as text values.\n**strict** | Only Boolean values (true or false) are valid.\n\n**CONTACT_LIST**\n\nValue | Description |\n-----|-----|\n**lenient** | If the value is a valid email address, Smartsheet handles it the same as **strict**. If not, Smartsheet saves the value as a text value.\n**strict** | The value must be a valid email address. If **displayValue** is set, Smartsheet uses that as the name; otherwise, if Smartsheet finds a match among the the access token owner's contacts, Smartsheet associates this cell with that existing contact.\n\nNOTE: See the [Contact List Columns](/api/smartsheet/openapi/cells) section for more information.\n\n**DATE**\n\nValue | Description |\n-----|-----|\n**lenient** | Smartsheet attempts to convert the string value to date using ISO 8601 date format, as well as several locale-specific date formats. If the value is a parsable date format, Smartsheet recognizes the date and stores it as such. All other values are simply text values.\n**strict** | The value must be a string value and a valid ISO 8601 date (YYYY-MM-DD). Alternatively, if Unix time (also known as epoch time) is used, you can use the query parameter of **numericDates** set to **true** to have Smartsheet convert epoch time to human readable dates. See [Dates and Times](/api/smartsheet/guides/basics/dates-and-times) for more information.\n\n**DURATION**\n\nValue | Description |\n-----|-----|\n**lenient** | Numeric values are treated as duration values in days. String values which are valid duration strings in the user's locale are treated as durations, and any other values are treated as free-form text values.\n**strict** | Only valid duration strings in the user's locale are valid. Information on duration strings can be found in the <a href=\"https://help.smartsheet.com/articles/765727-enabling-dependencies-using-predecessors#toc-duration-and-predecessors\" target=\"_blank\" rel=\"noopener noreferrer\">Help Center</a>.\n\nNOTE: You may use the query string parameter <b>projectParseLocale</b> with a [supported locale string](/api/smartsheet/openapi/serverinfo) to force parsing in the specified locale (for example, using <b>en_US</b> lets you send in English values regardless of the user's locale).\n\n**MULTI_CONTACT_LIST**\n\nValue | Description |\n-----|-----|\nN/A | Set using the **objectValue** attribute for the Cell object, which is inherently strict. See [Cell Reference](/api/smartsheet/openapi/cells).\n\n**MULTI_PICKLIST**\n\nValue | Description |\n-----|-----|\nN/A | Set using the **objectValue** attribute for the Cell object, which is inherently strict. See [Cell Reference](/api/smartsheet/openapi/cells).\n\n**PICKLIST**\n\nValue | Description |\n-----|-----|\n**lenient** | All numeric and text values are valid. Formatted numbers are parsed like TEXT_NUMBER formatted numbers.\n**strict** | The value must be a string and must be one of the options for the picklist.\n\n**PREDECESSOR**\n\nValue | Description |\n-----|-----|\nN/A | Set using the **objectValue** attribute for the Cell object, which is inherently strict. See [Cell Reference](/api/smartsheet/openapi/cells).\n\n**TEXT_NUMBER**\n\nValue | Description |\n-----|-----|\n**lenient** | All numeric and text values are valid. Formatted numbers passed as text values, such as currencies (\"$5,000\"), percentages (\"50%\"), or decimals (\"100.5\") are parsed to their numeric equivalents, based on the locale of the access token owner,  with the proper formatting enabled for the cell.\n**strict** | All numeric and text values are valid and are interpreted literally.\n\nNOTE: The Smartsheet application only supports numeric values in the range -9007199254740992 to 9007199254740992. If using strict parsing, any numeric value outside that range results in [error code 1148](/api/smartsheet/error-codes). If using lenient parsing, the value is silently converted to text.\n\n<h3>Contact List Columns</h3>\n\nWith columns of type **CONTACT_LIST**, the cell attributes **value** and **displayValue** are treated independently.\nThe contact's email address is represented by **value**, while the contact's name (and the value displayed in the cell in the Smartsheet app) is represented by **displayValue**.\n\nWhen creating or updating cells for a contact list column, the **displayValue** attribute works as follows:\n\n* If **displayValue** is non-null and non-empty, the Smartsheet cell displays the value provided.\n* If **displayValue** is an empty string, the Smartsheet cell displays the email address.\n* If **displayValue** is null or absent, Smartsheet makes a best guess effort at filling it in with a contact's name based on the email address.\n\n<h2>Hyperlinks</h2>\n\nYou can create and modify [hyperlinks](/api/smartsheet/openapi/schemas/hyperlink) by using any API operation that creates or updates cell data.\nWhen creating or updating a hyperlink, **cell.value** may be set to a string value or null.\nIf null, the cell's value is derived from the hyperlink:\n\n* If the hyperlink is a URL link, the cell's value is set to the URL itself.\n* If the hyperlink is a dashboard, report, or sheet link, the cell's value is set to the dashboard, report, or sheet name.\n\n<h3>Images in Cells</h3>\n\nFor details about working with images in cells, see [Cell Images](/api/smartsheet/openapi/cellimages).\n"
    },
    {
      "name": "columns",
      "x-displayName": "Columns",
      "description": "A column is a component of a sheet or report.\n\n<h2>Column Types</h2>\n\nSmartsheet supports the following standard column types, which are represented in a [Column object](/api/smartsheet/openapi/columns/column) with a **type** attribute set to one of the following:\n\nColumn Type | Column.type Value | Notes |\n---|---|---|\nCheckbox \t\t| **CHECKBOX**\t\t| Checkbox, star, and flag types |\nContact List\t| **CONTACT_LIST**\t| List containing contacts or roles for a project. **NOTE:** You can use the [contactOptions](/api/smartsheet/openapi/schemas/contactoption) property to specify a pre-defined list of values for the column, which can also become lanes in card view. |\nContact List | **MULTI_CONTACT_LIST** | List where single cells can contain more than one contact. Only visible when using a query parameter of **level** and the value appropriate to the dashboard, report, or sheet that you are querying. To see email addresses behind the display names, combine an **include=objectValue** query parameter with a **level** query parameter. |\nDate\t\t\t| **DATE** |   |\nDate/Time \t\t| **ABSTRACT_DATETIME** | Represents a project sheet's start and end dates.<br/>**Only for dependency-enabled project sheets**<br/>The API does not support setting a column to this type. (This can only be done through the Smartsheet Web app when configuring a project sheet.) Additionally, the API does not support updating data in the \"End Date\" column under any circumstance, and does not support updating data in the \"Start Date\" column if \"Predecessor\" is set for that row. |\nDate/Time\t\t| **DATETIME**\t| Used only by the following system-generated columns: <ul><li>Created (Date) (**Column.systemColumnType** = **CREATED_DATE**)</li><li>Modified (Date) (**Column.systemColumnType** = **MODIFIED_DATE**)</li></ul> |\nDropdown List\t| **PICKLIST**\t| Custom, RYG, Harvey ball, priority types, etc. |\nDropdown List\t| **MULTI_PICKLIST**\t| List where single cells can contain more than one dropdown item. Only visible when using a query parameter of **level** and the value appropriate to the dashboard, report, or sheet that you are querying. To see multi-picklist values behind the display names, combine an **include=objectValue** query parameter with a **level** query parameter. |\nDuration\t\t| **DURATION**\t\t| **Only for dependency-enabled project sheets**<br/>The API does not support setting a column to this type. (This can only be done through the Smartsheet Web app when configuring a project sheet.) |\nPredecessor\t\t| **PREDECESSOR**\t| Defines what must happen first in a project flow. For more information, see the [Predecessor object](/api/smartsheet/openapi/schemas/predecessorlist). **Only for dependency-enabled project sheets** |\nText/Number\t\t| **TEXT_NUMBER**\t|   |\n\nNOTE: See the [Cell Reference](/api/smartsheet/openapi/cells) section for information on getting and setting cell values for the different column types.\n\n<h3>Symbol Columns</h3>\n\nIn addition to the basic column types above, the Smartsheet app also supports columns that display symbols. These are specialized columns of type **CHECKBOX** or **PICKLIST**,\nwhose **symbol** attribute is set to one of the values below:\n\n**Symbols for CHECKBOX columns:**\n\n![A flag symbol](./images/img_pl_flagc.png)\n\nValue | Example |\n-----|-----|\n**FLAG** | <img src=\"./images/img_pl_flagc.png\" alt=\"A flag symbol\" /> |\n**STAR** | <img src=\"./images/img_pl_starc.png\" alt=\"A star symbol\" /> |\n\n**Symbols for PICKLIST columns:**\n\nValue | Example |\n-----|-----|\n**ARROWS_3_WAY** | <img src=\"./images/img_pl_arrows3.png\" alt=\"An arrows_3_way symbol\" /> |\n**ARROWS_4_WAY** | <img src=\"./images/img_pl_arrows4.png\" alt=\"An arrows_4_way symbol\" /> |\n**ARROWS_5_WAY** | <img src=\"./images/img_pl_arrows5.png\" alt=\"An arrows_5_way symbol\" /> |\n**DECISION_SHAPES** | <img src=\"./images/img_pl_decisionshapes.png\" alt=\"A decision_shapes symbol\" /> |\n**DECISION_SYMBOLS** | <img src=\"./images/img_pl_decisionsymbols.png\" alt=\"A decision_symbols symbol\" /> |\n**DIRECTIONS_3_WAY** | <img src=\"./images/img_pl_directions3.png\" alt=\"A directions_3_way symbol\" /> |\n**DIRECTIONS_4_WAY** | <img src=\"./images/img_pl_directions4.png\" alt=\"A directions_4_way symbol\" /> |\n**EFFORT** | <img src=\"./images/img_pl_effort6Three.png\" alt=\"An effort symbol\" /> |\n**HARVEY_BALLS** | <img src=\"./images/img_pl_harvey5.png\" alt=\"A harvey_balls symbol\" /> |\n**HEARTS** | <img src=\"./images/img_pl_heart6Three.png\" alt=\"A hearts symbol\" /> |\n**MONEY** | <img src=\"./images/img_pl_money6Three.png\" alt=\"A money symbol\" /> |\n**PAIN** | <img src=\"./images/img_pl_pain6.png\" alt=\"A pain symbol\" /> |\n**PRIORITY** | <img src=\"./images/img_pl_priority.png\" alt=\"A priority symbol\" /> |\n**PRIORITY_HML** | <img src=\"./images/img_pl_priorityhml.png\" alt=\"A priority_hml symbol\" /> |\n**PROGRESS** | <img src=\"./images/img_pl_progress5Half.png\" alt=\"A progress symbol\" /> |\n**RYG** | <img src=\"./images/img_pl_ryg.png\" alt=\"An RYG symbol\" /> |\n**RYGB** | <img src=\"./images/img_pl_rygb.png\" alt=\"An RYGB symbol\" /> |\n**RYGG** | <img src=\"./images/img_pl_rygg.png\" alt=\"An RYGG symbol\" /> |\n**SIGNAL** | <img src=\"./images/img_pl_signal5.png\" alt=\"A signal symbol\" /> |\n**SKI** | <img src=\"./images/img_pl_difficulty4.png\" alt=\"A ski symbol\" /> |\n**STAR_RATING** | <img src=\"./images/img_pl_star6Three.png\" alt=\"A star_rating symbol\" />\n**VCR** | <img src=\"./images/img_pl_decisionvcr.png\" alt=\"A VCR symbol\" /> |\n**WEATHER** | <img src=\"./images/img_pl_weather5.png\" alt=\"A weather symbol\" /> |\n\nNOTE: The Smartsheet grid user interface presents several row attributes and features visually as columns, for example, attachments, discussions, row action indicator, or row number.  The API does not consider these to be columns, and does not return or otherwise expose them as columns.  The only columns returned by the API are user data columns.\n\n<h3>System Columns</h3>\n\nIn addition to the standard column types and symbols, Smartsheet has a number of system columns, which represent data that is\nfilled in by Smartsheet and whose values cannot be changed by the user. These columns are represented with standard\n[column types](/api/smartsheet/openapi/columns), with the [**Column.systemColumnType**](/api/smartsheet/openapi/columns/column) attribute set to one of the following:\n\nColumn.systemColumnType Value | Column Type | Notes\n-----|-----|-----|\n**AUTO_NUMBER** | TEXT_NUMBER | Columns of this system column type include an [AutoNumberFormat object](/api/smartsheet/openapi/schemas/autonumberformat) that describes the mask used to generate the value.\n**CREATED_BY**  | CONTACT_LIST\n**CREATED_DATE** | DATETIME\n**MODIFIED_BY** | CONTACT_LIST\n**MODIFIED_DATE** | DATETIME\n"
    },
    {
      "name": "comments",
      "x-displayName": "Comments",
      "description": "A discussion is a container for a number of individual comments in a\nthreaded conversation. For more details, see the\n[Discussion](/api/smartsheet/openapi/discussions) section.\n\n\nThis section describes operations on an *individual* comment within a\ndiscussion thread.\n\n\n* To retrieve all discussions and comments for an entire sheet, use [List\nDiscussions](/api/smartsheet/openapi/discussions/discussions-list) with the query\nparameter **include=comments**.\n\n* To retrieve all discussions and comments associated with a row, use\n[List Row Discussions](/api/smartsheet/openapi/discussions/row-discussions-list)\nwith the query parameter **include=comments**.\n\nA comment can contain one or more attachments.\n\n\n<h2>Comment Attachments</h2>\n\n\nFor details about working with a comment's attachments, see\n[Attachments](/api/smartsheet/openapi/attachments).\n"
    },
    {
      "name": "contacts",
      "x-displayName": "Contacts",
      "description": "A contact is a user's personal contact in Smartsheet (as described in the Help Center article, <a href=\"https://help.smartsheet.com/articles/796143-managing-contacts\" target=\"_blank\" rel=\"noopener noreferrer\">Managing Contacts</a>.\n"
    },
    {
      "name": "crossSheetReferences",
      "x-displayName": "Cross-sheet References",
      "description": "To create a formula that references data in another sheet, you must first create a cross-sheet\nreference between the detail sheet and the source sheet. That reference must also define the cell range.\nOnce you have created the cross-sheet reference, you can use the reference name in any formula on the detail sheet.\nTo create the formula, use Add Rows or Update Rows. Cross-sheet references that are not used by any formula are\nautomatically deleted after two hours.\n"
    },
    {
      "name": "dashboards",
      "x-displayName": "Dashboards",
      "description": "Smartsheet dashboards are a collection of widgets that can contain data from a variety of different data sources (for example, sheets, reports, or custom data). Dashboards were once called Sights(TM) and this name is still present in object names, endpoint paths, and other places.\n"
    },
    {
      "name": "discussions",
      "x-displayName": "Discussions",
      "description": "A discussion is a container for a collection of individual [comments](/api/smartsheet/openapi/comments) within a single thread. A discussion can exist on a [row](/api/smartsheet/openapi/rows) or a [sheet](/api/smartsheet/openapi/sheets).\n\nIn the UI, Smartsheet creates a discussion to contain each top-level comment and subsequent replies into a single thread.\n\nUsing the API, you can only add a comment to a discussion. If the discussion doesn't already exist, you must create it first.\nA discussion is a collection of one or more comments, each of which may contain attachments.\n\n<h2>Discussion Attachments</h2>\n\nFor details about working with the attachments within a discussion, see [Attachments](/api/smartsheet/openapi/attachments).\n<h2>Discussion Comments</h2>\n\nFor details about working with a discussion's comments, see [Comments](/api/smartsheet/openapi/comments).\n"
    },
    {
      "name": "events",
      "x-displayName": "Events",
      "description": "The following section describes the specific event types and payloads\nreturned from the Smartsheet Events API.\n\nWith Event Reporting, you can programmatically retrieve events that are\noccurring in your Smartsheet organization account. Examples of events are\ncreate, update, load, and delete of sheets, reports, dashboards,\nattachments, and users. Note: while the current list of events covers most\nof Smartsheet functionality, new events will be added to the list as\nSmartsheet introduces new functionality.\n\nAll events have an `additionalDetails` object that contains information specific to the event, including an `email address' property representing the user responsible for the activity.\n\nSome actions in Smartsheet are performed by system components. Therefore,\nthe userId property in some response payloads refers to a system user and\nnot to a regular user. For example, the Smartsheet Events API shows\n5629504736520068 as the userId when an anonymous user accesses a sheet\nthat is published for anyone.\n\nThe list of system users is displayed below. New system userIds may be\nincorporated to this list as new features and subsystems are incorporated\nto Smartsheet:\n\nSystem user | Description |\n-----|-----|\n1688855062570884 | Data accessed/modified by Skype action (only possible if Smartsheet account is connected to Skype) |\n2814754969413508 | Data accessed/modified by Trello import action (only possible if Smartsheet account is connected to Trello) |\n3377704922834820 | Data accessed/modified due to Smartsheet cell-link |\n3940654876256132 | Data accessed/modified by the Smartsheet Automation system |\n5066554783098756 | Access to object published to any user in the Smartsheet organization account |\n5629504736520068 | Access to Smartsheet object published to anyone |\n6192454689941380 | Data accessed/modified by the Smartsheet Notification system |\n7881304550205316 | Data accessed/modified by Smartsheet Form submission |\n\nSee <a href=\"https://smartsheet-platform.github.io/event-reporting-docs/\" target=\"_blank\" rel=\"noopener noreferrer\">Event Reporting reference documentation</a> for details on each event type.\n\nSee [Authentication](/api/smartsheet/guides/basics/authentication) for more\ninformation.\n\nNOTE: Event Reporting is a premium add-on which can be purchased for Enterprise and Advanced Work Management plans only. For details on the Event Reporting add-on, please contact our <a href=\"https://www.smartsheet.com/contact/sales\" target=\"_blank\" rel=\"noopener noreferrer\">Sales Team</a>.\n"
    },
    {
      "name": "favorites",
      "x-displayName": "Favorites",
      "description": "Smartsheet allows users to \"star\" dashboards, folders, reports, sheets, workspaces, and other objects on their Home tab to mark them as favorites.\nThese API operations allow you to access the user's favorite API-supported objects, as well as create and delete favorites.\nNOTE: For documentation purposes, \"favoriteType\" is a placeholder ENUM for the various types of UI elements you can flag as a favorite. In sample code, when you see \"{favoriteType}\", just replace it with one of the following values:\n* dashboard or dashboards (aka Sight or Sights)\n* folder or folders\n* report or reports\n* sheet or sheets\n* template or templates\n* workspace or workspaces\n"
    },
    {
      "name": "folders",
      "x-displayName": "Folders",
      "description": "A folder can exist in a user's **Sheets** folder [Home](/api/smartsheet/openapi/home), in a [folder](/api/smartsheet/openapi/folders), or in a [workspace](/api/smartsheet/openapi/workspaces).\n"
    },
    {
      "name": "groupMembers",
      "x-displayName": "Group Members",
      "description": "A group member is a user that belongs to a [group](/api/smartsheet/openapi/groups).\n"
    },
    {
      "name": "groups",
      "x-displayName": "Groups",
      "description": "A group is a collection of [group members](/api/smartsheet/openapi/groupmembers).\n"
    },
    {
      "name": "home",
      "x-displayName": "Home",
      "description": "In the Smartsheet UI, the \"Home\" tab shows all objects a user has access to, including dashboards (also called Sights in the API), folders, reports, sheets, templates, and workspaces.\n> **NOTE:** The GET /home endpoint is deprecated. Use GET /folders/personal to get shared items and GET /workspaces/ to get workspaces.\n<h2>Home Folders</h2>\n\nFor details about working with folders in the user's **Sheets** folder (that is, at the Home level), see [Folders](/api/smartsheet/openapi/folders).\n\n<h2>Home Sheets</h2>\n\nFor details about working with sheets in the user's **Sheets** folder (that is, at the Home level), see [Sheets](/api/smartsheet/openapi/sheets).\n"
    },
    {
      "name": "imports",
      "x-displayName": "Imports",
      "description": "Import CSV or XLSX data into a new sheet.\n"
    },
    {
      "name": "proofs",
      "x-displayName": "Proofs",
      "description": "A proof is a container that holds attachments and comments. Limited to one proof and its versions per row.\nA sheet can have multiple proofs.\n"
    },
    {
      "name": "reports",
      "x-displayName": "Reports",
      "description": "A report is a filtered view of the data from one or more sheets. Like a sheet, a report is comprised of columns, rows, and cells, and may optionally contain attachments and discussions.\nA report is comprised of columns, rows, and cells, and may optionally contain attachments and discussions.\n\n<h2>Report Attachments</h2>\n\nFor details about working with a report's attachments, see [Attachments](/api/smartsheet/openapi/attachments).\n\n<h2>Report Cells</h2>\n\nFor details about working with a report's cells, see [Cells](/api/smartsheet/openapi/cells).\n\n<h2>Report Columns</h2>\n\nFor details about working with a report's columns, see [Columns](/api/smartsheet/openapi/columns).\n\n<h2>Report Discussions</h2>\n\nFor details about working with a report's discussions, see [Discussions](/api/smartsheet/openapi/discussions).\n\n<h2>Report Rows</h2>\n\nFor details about working with a report's rows, see [Rows](/api/smartsheet/openapi/rows).\n"
    },
    {
      "name": "rows",
      "x-displayName": "Rows",
      "description": "A row is a component of a sheet or report. Each row is composed of a\ncollection of cells, and may optionally contain discussions or\nattachments.\n\nA row is comprised of a collection of cells, and may optionally contain attachments and discussions.\n\n<h2>Row Attachments</h2>\n\nFor details about working with a row's attachments, see [Attachments](/api/smartsheet/openapi/attachments).\n\n<h2>Row Cells</h2>\n\nFor details about working with a row's cells, see [Cells](/api/smartsheet/openapi/cells).\n\nFor details about working with images in cells, see [Cell Images](/api/smartsheet/openapi/cellimages).\n\n<h2>Row Discussions</h2>\n\nFor details about working with a row's discussions, see [Discussions](/api/smartsheet/openapi/discussions).\n\n<h2>Row Include Flags</h2>\n\nEndpoints which return rows (for example, [Get Sheet](/api/smartsheet/openapi/sheets/getsheet), [Get Row](/api/smartsheet/openapi/rows/row-get)) support the optional **include** query string parameter. If specified, the value of the **include** parameter is\na comma-delimited list of flags that indicate additional attributes to be included in each [Row object](/api/smartsheet/openapi/rows/row) within the response.\n\nInclude Flag | Description |\n-------------|-------|\n**attachments**\t| Includes row **attachments** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.\n**columnType**\t| Includes **columnType** attribute in the row's [cells](/api/smartsheet/openapi/cells/cell) indicating the type of the column the cell resides in.\n**discussions**\t| Includes row **discussions** array.<br/>To include discussion attachments, both **attachments** and **discussions** must be present in the include list.\n**filters**\t\t| Includes **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters.\n**format**\t\t| Includes **format** attribute on the row, its cells, or summary fields.  See [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting).\n**objectValue** | Includes **objectValue** attribute on cells containing values. For more information see [Cell Reference](/api/smartsheet/openapi/cells).\n**rowPermalink** | Includes **permalink** attribute that represents a direct link to the [row](/api/smartsheet/openapi/rows/row) in the Smartsheet application.\n**rowWriterInfo** | **DEPRECATED** Includes **createdBy** and **modifiedBy** attributes on the row, indicating the row's creator, and last modifier.\n**writerInfo** | Includes **createdBy** and **modifiedBy** attributes on the row or summary fields, indicating the row or summary field's creator, and last modifier.\n\n<h2>Specify Row Location</h2>\n\nWhen you [add a row](/api/smartsheet/openapi/rows/rows-addtosheet), the default behavior is for Smartsheet to put the new row at the bottom of the sheet. And when you [update a row](/api/smartsheet/openapi/rows/update-rows), the default behavior is to keep the row where it is. It is not necessary to use a location-specifier attribute if you want the default behavior.\n\nTo specify a location for new or updated rows other than the defaults, use the table below for reference. The table details possible row locations and provides JSON examples to help you construct one or more [Row objects](/api/smartsheet/openapi/rows/row) with location-specifier attributes.\n\nNote the following restrictions:\n\n* Use only one location-specifier attribute per request, unless you use **parentId** and **toBottom** or **siblingId** and **above**.\n* If you specify multiple rows in the request, all rows must have the same location-specifier attributes.\n* If you specify the **parentId** attribute, you cannot also specify the **siblingId** attribute.\n* If you specify the **siblingId** attribute, you cannot also specify the **parentId**, **toTop**, or **toBottom** attributes.\n* If you want to indent or outdent multiple rows, use the **parentId** attribute.\n\nDestination | Row Attributes | Examples |\n-------|--------|--------|\nTop of a sheet | **toTop** | ```(\"toTop\": true}```\nBottom of a sheet | **toBottom** | ```(\"toBottom\": true}```\nTop of an indented section a.k.a., first child row | **parentId** | ```(\"parentId\": 8896508249565060}```\nBottom of an indented section a.k.a., last child row | **parentId** +<br/>**toBottom** | ```{\"parentId\": 8896508249565060, \"toBottom\": true}```\nBelow a specific row, at the same indent level | **siblingId** | ```{\"siblingId\": 8896508249565060}```\nAbove a specific row, at the same indent level | **siblingId** +<br/>**above** | ```{\"siblingId\": 8896508249565060, \"above\": true}```\nIndent one existing row, must have a value of \"1\" | **indent** | ```{\"indent\": 1}```\nOutdent one existing row, must have a value of \"1\" | **outdent** | ```{\"outdent\": 1}```\n"
    },
    {
      "name": "search",
      "x-displayName": "Search",
      "description": "Search a specific sheet or search across all sheets that a user can access. If you have not used the public API in a while, we will need to provision your data. This could take up to 24 hours so please check back later!\n"
    },
    {
      "name": "sendViaEmail",
      "x-displayName": "Send via Email",
      "description": "The methods for sending via email rely on the type of object you want to send.\n\n<h2>Send Report</h2>\n\nFor details about sending a report via email, see [Send Report via Email](/api/smartsheet/openapi/reports/sendreportviaemail).\n\n<h2>Send Rows</h2>\n\nFor details about sending rows via email, see [Send Rows via Email](/api/smartsheet/openapi/rows/rows-send).\n\n<h2>Send Sheet</h2>\n\nFor details about sending a sheet via email, see [Send Sheet via Email](/api/smartsheet/openapi/sheets/sheet-send).\n\n<h2>Send Update Request</h2>\n\nFor details about sending an update request via email, see [Create an Update Request](/api/smartsheet/openapi/updaterequests/updaterequests-create).\n"
    },
    {
      "name": "serverInfo",
      "x-displayName": "Server Info",
      "description": "For developer convenience, the Smartsheet API provides access to application constants.\n"
    },
    {
      "name": "sharing",
      "x-displayName": "Sharing",
      "description": "Use the *Sharing* operations to control sharing of dashboards, reports, sheets, and workspaces.\n"
    },
    {
      "name": "sheetSummary",
      "x-displayName": "Sheet Summary",
      "description": "A sheet summary allows users to define, organize, and report on custom project and business metadata. Sheet summary is only available to customers with business or enterprise plans.\n"
    },
    {
      "name": "sheets",
      "x-displayName": "Sheets",
      "description": "A sheet can exist in a user's **Sheets** folder\n([Home](/api/smartsheet/openapi/home)), in a [folder](/api/smartsheet/openapi/folders), or\nin a [workspace](/api/smartsheet/openapi/workspaces). It is comprised of columns,\nrows, and cells, and may optionally contain attachments and discussions.\n\nA sheet is comprised of columns, rows, and cells, and may optionally\ncontain attachments and discussions.\n\n\n<h2>Sheet Attachments</h2>\n\n\nFor details about working with a sheet's attachments, see\n[Attachments](/api/smartsheet/openapi/attachments).\n\n\n<h2>Sheet Cells</h2>\n\n\nFor details about working with a sheet's cells, see\n[Cells](/api/smartsheet/openapi/cells).\n\n\nFor details about working with images in cells, see [Cell\nImages](/api/smartsheet/openapi/cellimages).\n\n\n<h2>Sheet Columns</h2>\n\n\nFor details about working with a sheet's columns, see\n[Columns](/api/smartsheet/openapi/columns).\n\n\n<h2>Sheet Discussions</h2>\n\n\nThere are two ways to get discussion-related information for a sheet:\n\n\nOperation | Returns\n----------|----------|\n[Get Sheet](/api/smartsheet/openapi/sheets/getsheet)<br/>(with **include** parameter value **discussions**) | Response does not contain the comments\nthat comprise each discussion.\n[List Discussions](/api/smartsheet/openapi/discussions/discussions-list)<br/>(with **include** parameter value **comments**) |  Response contains the comments that comprise each discussion.\n\n\nFor more information about working with a sheet's discussions, see\n[Discussions](/api/smartsheet/openapi/discussions).\n\n\n<h2>Sheet Rows</h2>\n\n\nFor details about working with a sheet's rows, see\n[Rows](/api/smartsheet/openapi/rows).\n"
    },
    {
      "name": "templates",
      "x-displayName": "Templates",
      "description": "A template can be used to create a sheet, as described in [Create Sheet from Template](/api/smartsheet/openapi/sheets/create-sheet-in-folder).\n"
    },
    {
      "name": "tokens",
      "x-displayName": "Tokens",
      "description": "The Smartsheet API utilizes OAuth 2.0 for authentication and authorization. An Authorization HTTP header containing an access token is required to authenticate all API requests except for the requests to GET Access Token or Refresh Access Token. For more information, see Authentication.\n"
    },
    {
      "name": "updateRequests",
      "x-displayName": "Update Requests",
      "description": "Send update requests to get updated by any collaborator on key rows, regardless of whether they have a Smartsheet account or are shared to the sheet.\n"
    },
    {
      "name": "users",
      "x-displayName": "Users",
      "description": "Users are typically defined by the organization account, and then role within the organization, for example admin.\n"
    },
    {
      "name": "webhooks",
      "x-displayName": "Webhooks",
      "description": "<h2>Intro to Webhooks</h2>\n\nAt a high-level, it works like this:\n\n1. Your application subscribes to callbacks.</span><br/>First, subscribe to event notifications (callbacks) by creating one or more webhooks.  You can create a webhook manually via the API or have your application create a webhook dynamically.  Each webhook must specify:\n    * Which Smartsheet object to monitor for events\n    * Which events in that object should trigger a callback\n    * The HTTPS URL (that is, \"callback URL\") where Smartsheet should send callbacks when any of the specified events occur within the scope of the specified Smartsheet object. (**NOTE:** Smartsheet webhooks do not support callbacks to servers using self-signed certificates)\n\n\t  <b>Webhook examples in plain English:</b>\n\t  * \"When any changes occur in Sheet_A, send a callback to https://www.example.com/abc\"\n\t  * \"When a new row is added to Sheet_B, send a callback to https://www.example.com/def\"\n\t  * \"When a cell value is changed in Sheet_C, send a callback to https://www.example.com/ghi\"\n\n2. When any of the specified events occur within an object that is being monitored by a webhook, Smartsheet sends an <b>HTTP POST</b> (that is, \"callback\") to the callback URL that is associated with the webhook.\n\t  * NOTE: The callback payload is a \"skinny\" payload -- it indicates which objects changed and the type of events that occurred, but does not contain any data from the objects themselves.\n3. Your application receives, acknowledges, and processes callbacks.</span><br/>Your application receives the <code>HTTP POST</code>, acknowledges the callback by responding with HTTP status 200, and processes the callback. Because the callbacks are \"skinny\", make one or more requests to the Smartsheet API to retrieve the actual data associated with the change.\n\n<h3>Webhook Management</h3>\n\nUse the Smartsheet API to create and manage webhooks. See [Webhooks API Reference](/api/smartsheet/openapi/webhooks) for details about the related API operations.\n\n<h3>Webhook Ownership & Access</h3>\n\n> **IMPORTANT:** Webhooks are automatically disabled on sheets that exceed 20,000 rows, 400 columns, or 500,000 cells (whichever comes first). Stay within the specified limits to keep webhooks enabled on your sheets.\n\nWebhooks can be created and managed via direct API access or by a third-party.\n\nA webhook that is created via Direct API Access:\n\n* is owned by the user who created it\n* can be managed only by the user who created it\n* is not affected if the access token that was used to create it is revoked, as long as the user remains active\n\nA webhook that is created by a third-party app:\n\n* is owned by the user who authorized the third-party app (and is associated with the third-party app)\n* can be managed by the third-party app (as long as it maintains authorization) or by the user who owns it\n* is permanently disabled if the third-party app's permissions are revoked\n\n<h3>Webhook Scope & Events</h3>\n\nA webhook monitors the specified **scope** for the specified **events**.\n\nA [Webhook object's](/api/smartsheet/openapi/webhooks/webhook) **scope** attribute indicates the scope of the subscription. It is specified when creating a webhook (see **Creating a Webhook**, below), and cannot subsequently be changed.\n\n* Currently, **sheet** is the only supported value for the **scope** attribute. However, you can set an array of columns as a **subscope** if you want to limit the webhook to specific columns.\n\nA [Webhook object's](/api/smartsheet/openapi/webhooks/webhook) **event** attribute indicates the set of events that a webhook is subscribed to (that is, which events trigger a callback).\n\n* Events are represented as a dot-separated string in the format \"*object*.*event*\", where an asterisk (&#42;) can be used to represent \"all objects\" or \"all events\".\n* Currently, <b>&#42;.&#42;</b> is the only supported value for the **events** attribute. This indicates a subscription to all objects in the scope, and all events for those objects.\n\nNOTE: When a row is deleted on a sheet, even if you are using a <b>subscope</b> to monitor columns only and the cell in that column for that row is empty, you will receive a \"row.deleted\" event.\n\n<h3>Example</h3>\n\nConsider a [Webhook object](/api/smartsheet/openapi/webhooks/webhook) with the following attribute values:\n\n* **scopeObjectId** = 12345678901234\n* **scope** = \"sheet\"\n* **events** = \"&#42;.&#42;\"\n\nThis webhook monitors the specified sheet (id: 12345678901234) for all types of events. For example, if a row is added to the sheet, cell values are updated in the sheet, a column is deleted from the sheet, etc., a callback is sent to the webhook's **callbackUrl**.\n\n<h2>Creating a Webhook</h2>\n\nAn API client can create a webhook by using the [Create Webhook](/api/smartsheet/openapi/webhooks/createwebhook) operation. A newly created webhook is disabled by default.\nAfter successfully creating a webhook, the API client must subsequently initiate and complete the verification process (see **Webhook Verification** below) before the webhook is enabled.\nThe following diagram illustrates the process of creating and enabling a webhook.\n\n<img src=\"./images/v4-CreateAndEnableWebhook.png\" alt=\"Workflow to create a webhook\" />\n\n<h3>Step-by-Step</h3>\n\nThe process occurs synchronously:\n\n1. API client submits a [Create Webhook](/api/smartsheet/openapi/webhooks/createwebhook) request.\n\n2. Smartsheet creates the webhook, but does not initially enable the webhook (**enabled: false** and **status: \"NEW_NOT_VERIFIED\"**).\n\n3. To initiate the verification process, the API client submits an [Update Webhook](/api/smartsheet/openapi/webhooks/updatewebhook) request to specify **enabled: true**. (**NOTE:** The API client does not receive a response to this request until the verification process (steps 4 and 5) has completed.)\n\n4. When Smartsheet receives the request to enable the webhook, it sends a verification request (see the **Webhook-Verification** section) to the subscriber (that is, to the **callbackUrl** that the API client specified in the Create Webhook request).\nThe request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains only **challenge** and **webhookId** in the request body. The **challenge** value is a repeat of the header value for API clients that don't interpret header values.\n\n5. The subscriber responds to the verification request by echoing back the same unique random value in the **Smartsheet-Hook-Response** header of the response. For API clients that don't interpret header values, you can also send a JSON body with a **smartsheetHookResponse** attribute and the same value that would have been in the header.\n\n6. Once the subscriber has successfully acknowledged the verification request, Smartsheet enables the webhook and responds to the API client's Update Webhook request to confirm that the webhook has been enabled (**enabled: true** and **status: \"ENABLED\"**).\n\n<h3>Webhook Verification</h3>\n\nWhen an API client attempts to enable a webhook, Smartsheet sends a verification request to the webhook's **callbackUrl** to verify that the subscriber expects and is able to successfully receive callbacks.\nThe request specifies a unique random value in the **Smartsheet-Hook-Challenge** header and contains a JSON object in the request body with only **challenge** and **webhookId** attributes in the request body. The **challenge** attribute is a repeat of the header value for API clients that don't interpret header values.\n\n* To verify the webhook, the subscriber's response to the verification request must return a 200 HTTP status code and must echo back the same unique random value in the **Smartsheet-Hook-Response** header of the response or with a JSON **smartsheetHookResponse** attribute. Once Smartsheet receives this verification response, the webhook is enabled (**enabled: true** and **status: \"ENABLED\"**).\n\n* If the subscriber does not successfully respond to the verification request, the webhook remains disabled (**enabled: false** and **status: \"DISABLED_VERIFICATION_FAILED\"**).\n\nWhen a webhook is initially [created through the API](/api/smartsheet/openapi/webhooks/createwebhook), the response contains the webhook's Id.  If you wish to guarantee that your server only receives callbacks for webhooks that you created,\nyou can check the verification request's **webhookId** attribute against your list of created webhook Ids.  If the Id is not in the list, return a response with a non-200 status code (for example, 403 Forbidden),\nand the webhook that initiated the verification request is disabled as described above.\n\nNOTE: <b>IMPORTANT:</b> ONGOING VERIFICATION. Once a webhook has been enabled, Smartsheet sends a verification request to the webhook's <b>callbackUrl</b> once every 100 callbacks. The subscriber should respond to the verification request as described above -- failure to do so results in the webhook being disabled (<b>enabled: false</b> and <b>status: \"DISABLED_VERIFICATION_FAILED\"</b>).\n\n<h3>Duplicate Webhooks</h3>\n\n*Duplicate webhooks* are defined as two or more webhooks that meet the following conditions:\n\n* on the same sheet\n* created by the same user\n* have identical: **callbackUrl** and **subscope** properties.\n\nBecause duplicate webhooks are functionally identical, this would ordinarily result in the callback URL being called simultaneously once for each duplicate webhook in the sheet when the sheet changes. Many duplicates can lead to too much traffic which can cause a *denial of service* (DOS) on the callback server.\n\nThere are no known valid use cases for duplicate webhooks; they are usually created unintentionally by API clients due to faulty or missing logic.\n\nFor this reason, **as of January 2023, Smartsheet will now deduplicate webhook callbacks**.  This means for every set of duplicate webhooks on a sheet, Smartsheet will no longer issue one callback per webhook, and will instead only issue **one total callback**, for only the oldest enabled webhook.\n\n**Recommendation:** When creating a webhook, first check to make sure that the sheet doesn't already contain an identical webhook.  If it does, and it's disabled, re-enable it.  If it's already enabled, do nothing.\n\n<h2>Webhook Status</h2>\n\nA [Webhook](/api/smartsheet/openapi/webhooks/webhook) object's **enabled** attribute indicates whether a webhook is enabled or disabled, while the **status** attribute describes the *reason* that the webhook is enabled or disabled.\n\nThe following table lists all possible combinations of **enabled** and **status** attribute values.\n\nWebhook.enabled | Webhook.status | Meaning | Notes\n----- | ----- | ------ | -----\nfalse  | **DISABLED_ADMINISTRATIVE** | Webhook has been disabled by Smartsheet support. | A webhook in this state can only be re-enabled by Smartsheet (contact Support).  Attempting to re-enable a webhook in this state results in error code 1154.\nfalse  | **DISABLED_APP_REVOKED** | Webhook has been disabled because the third-party app associated with the webhook has had its access revoked. | This is a terminal state (that is, webhook in this state cannot be re-enabled, and attempts to do so result in error code 1153). If the third-party app's access is subsequently restored, it must create new webhooks.\nfalse  | **DISABLED_BY_OWNER** | Webhook has been disabled by the owner. | Owner can re-enable the webhook by using the [Update Webhook](/api/smartsheet/openapi/webhooks/updatewebhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the verification request (See the **Webhook Verification** section), the webhook is enabled.\nfalse  | **DISABLED_CALLBACK_FAILED** | Webhook has been disabled because callback was not successfully delivered to the callback URL. |  Owner can re-enable the webhook by using the [Update Webhook](/api/smartsheet/openapi/webhooks/updatewebhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the verification request (see the **Webhook Verification** section), the webhook is enabled.\nfalse | **DISABLED_EXCEEDED_GRID_LIMITS** | Webhook has been disabled because the sheet has 20,000 rows, 400 columns, or 500,000 cells. | Owner can enable the webhook by first reducing the sheet size to within the specified limits and then executing the [Update Webhook](/api/smartsheet/openapi/webhooks/updatewebhook) operation with the `enabled` body attribute set to `true`.\nfalse  | **DISABLED_SCOPE_INACCESSIBLE** | Webhook has been disabled because its owner lost access to the corresponding data in Smartsheet (either because the object was deleted or sharing permissions were revoked). | Webhook is automatically re-enabled if access to data is restored (for example, if deleted object is restored or sharing permissions are restored).\nfalse  | **DISABLED_VERIFICATION_FAILED** | Webhook verification has failed. |  Owner can re-enable the webhook by using the [Update Webhook](/api/smartsheet/openapi/webhooks/updatewebhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the verification request (see the **Webhook Verification section), the webhook is enabled.\ntrue  | **ENABLED** | Webhook is active. |\nfalse | **NEW_NOT_VERIFIED** | Webhook has been created but is not enabled because it has not yet been verified. |  Owner can re-enable the webhook by using the [Update Webhook](/api/smartsheet/openapi/webhooks/updatewebhook) operation to set **enabled** to **true**. Once the subscriber successfully acknowledges the verification request (see the **Webhook Verification** section), the webhook is enabled.\n\n**NOTES:**\n\n* When a Webhook object's <b>enabled</b> attribute is set to <b>true</b>, Smartsheet is monitoring for the specified events and sends a callback (see the **Event Callbacks** section) to the <b>callbackUrl</b> when the events occur.\n* When a Webhook object's <b>enabled</b> attribute is set to <b>false</b>, Smartsheet is not monitoring for the specified events and does not send a callback to the <b>callbackUrl</b> when the events occur. Depending on the value of the <b>status</b> attribute, it may be possible to (re-)enable the webhook. (See below for details).\n\n<h2>Webhook Callbacks</h2>\n\nA callback is the notification that Smartsheet sends to a webhook's **callbackUrl**. There are two types of callbacks:\n\n* Event callback (see the **Event Callbacks** section): Alerts the subscriber when the specified events have occurred in Smartsheet. This is the most common type of callback.\n\n* Status Change callback (see the **Status Change Callbacks** section): Alerts the subscriber that a webhook has been automatically disabled due to loss of access or automatically re-enabled due to restoration of access.\n\nA Subscriber has the ability to verify the integrity of a callback payload (that is, ensure that the message was not tampered with en route) and authenticate the identity of its sender (that is, ensure that the callback did indeed originate from Smartsheet).\nFor more information, see Authenticating Callbacks (see the **Authenticating Callbacks(optional)** section).\n\n**NOTES:**\n\n* Smartsheet webhooks do not support callbacks to servers using self-signed certificates. The callback server must be using a signed certificate from a certificate authority.\n* The callbackURL cannot be a private IP address.\n* The callbackURL must use one of the following ports: 443 (default for HTTPS), 8000, 8008, 8080, or 8443.\n* Smartsheet webhooks alway let a running callback for a given sheet finish before making another, that is the second call will wait on the first one to finish.\n\n<h3>Event Callbacks</h3>\n\nSmartsheet sends an event callback to notify the subscriber when the specified events occur in Smartsheet.\n\n**WARNING:** Any events that occur while a webhook is disabled are not communicated via callback if/when webhook is enabled.\n\n**IMPORTANT:** For Smartsheet US and Smartsheet Regions Europe since October 14th 2024, a one-minute debounce was introduced to optimize event trigger handling in the Webhooks event callback API. It reduces traffic and prevents workflows from acting on incomplete or transitional data.\n\n<h3>Callback Acknowledgement</h3>\n\nThe subscriber must respond to an event callback with a 200 <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success\" target=\"_blank\" rel=\"noopener noreferrer\">HTTP status code</a> to acknowledge that the callback was received.\n\n<h3>Retry Logic</h3>\n\nIf the subscriber fails to respond with a 200 status, depending on the response, Smartsheet may retry delivery up to 14 times. (The first 7 retry attempts occur with a frequency that's determined using exponential backoff; thereafter, retry attempts occur once every three hours until all retries have been exhausted.)\n\nSubscriber response | Is retried?\n----- | -----\nHTTP 201 through 299 | No\nHTTP 309 through 399 | No\nHTTP 400 through 499 (except 410) | Yes\nHTTP 410 | No\nHTTP 500 through 599 | Yes\nAny other HTTP status | No\nRequest timeout | Yes\n\nIf the response is not retriable or retry attempts have been exhausted, the webhook is disabled (**enabled: false** and **status: \"DISABLED_CALLBACK_FAILED\"**).\nA webhook in this state can be re-enabled if the subscriber completes the verification process. (See the **Webhook Status** section for details.)\n\n<h3>Status Change Callbacks</h3>\n\nIf a webhook's owner loses access to the object that a webhook is monitoring (either because the object was deleted or the webhook owner's access to the object was revoked in Smartsheet),\nSmartsheet automatically disables the webhook and sends a status change callback to alert the subscriber of this change in status.\nThe **newWebhookStatus** attribute indicates that the webhook is now disabled (because the scope is inaccessible).\n\nIf the webhook owner's access to the object is subsequently restored,\nSmartsheet automatically re-enables the webhook and sends a status change callback to alert the subscriber of this change in status.\nThe **newWebhookStatus** attribute indicates that the webhook is now enabled.\n\n<h3>Authenticating Callbacks (optional)</h3>\n\nA subscriber has the ability to verify the integrity of a callback payload (that is, ensure that the message was not tampered with en route) and authenticate the identity of its sender (that is, ensure that the callback did indeed originate from Smartsheet).\n\nWhen you create a new [webhook](/api/smartsheet/openapi/webhooks/webhook), it is assigned a randomly generated **sharedSecret** value.  The shared secret is used by Smartsheet to sign callback payloads, and should not be shared with any third parties.\n\nTo authenticate a callback request:\n\n1. Calculate the <a href=\"https://en.wikipedia.org/wiki/Hash-based_message_authentication_code\" target=\"_blank\" rel=\"noopener noreferrer\">HMAC</a> of the webhook's **sharedSecret** and the request body.  This must be done using the <a href=\"https://en.wikipedia.org/wiki/SHA-2\" target=\"_blank\" rel=\"noopener noreferrer\">SHA-256</a> cryptographic hash algorithm.\n\n2. Format the calculated value as a string in base 16.\n\n3. Compare your result with the value of the **Smartsheet-Hmac-SHA256** header of the request.\n\nIf the values match, you can be sure the request originated from Smartsheet and that the data has not been tampered with.\n\nNOTE: For maximum security, you may also choose to [reset your webhook's shared secret](/api/smartsheet/openapi/webhooks/resetsharedsecret) at periodic intervals.\n\n<h2>Preventing Infinite Loops</h2>\n\nIt's possible that an application which subscribes to callbacks (using webhooks) might react to those callbacks by using the API to make additional changes in Smartsheet.\nBut, consider the following scenario:\n\n1. **App1** creates a webhook to monitor **Sheet-A** for changes, specifying an **App-1** URL as the **callbackUrl** for the webhook.\n\n2. **App-1** updates **Sheet-A** using the API.\n\n3. Smartsheet detects that **Sheet-A** has changed and sends a callback to **App-1** (as the webhook specified).\n\n4. **App-1** processes the callback, and in the course of doing so, updates **Sheet-A** again using the API.\n\n5. Return to Step 3.\n\nTo protect against infinite loops like the one outlined above, Smartsheet introduced support for a new header that an API client can include with any API request that adds, updates, or deletes data in Smartsheet.\nHere's how it works:\n\n* An API client includes the **Smartsheet-Change-Agent** header in any API request that adds, updates, or deletes data in Smartsheet.\n  * The header value should be set to a string that the API client recognizes as identifying itself.\n* If any [event callbacks](/api/smartsheet/openapi/webhooks/callbackevent) fire as a result of an API request that contains the **Smartsheet-Change-Agent** header, the value of the **Smartsheet-Change-Agent** header is included in the [callback](/api/smartsheet/openapi/webhooks/callback) in the value of the **changeAgent** attribute.\n* If a webhook subscriber receives a [callback](/api/smartsheet/openapi/webhooks/callback) that contains the **changeAgent** attribute, it should evaluate the attribute value:\n  * If the attribute value's comma-delimited list contains the subscriber API client's change agent value, this indicates that the change which triggered the callback *was* caused by the subscriber itself, and the subscriber can choose to ignore the callback, thus preventing an infinite loop.\n  * Else, the change which triggered the callback was *not* caused by the subscriber itself, and if the subscriber is going to subsequently react to the callback by making a change in Smartsheet (via API request), the API client should append a comma and its own identifier to the original attribute value, and pass that value through using the **Smartsheet-Change-Agent** header of the API request. Doing so protects against cross-system infinite loops.\n\nNOTE: The <b>Smartsheet-Change-Agent</b> header value has a maximum length of 512 characters. If its length exceeds 512 characters, the excess is trimmed from the front of the string, so that the most recent agent information remains.\n\n<h2>Webhook Errors</h2>\n\nThe following table specifies the recommended action for each Smartsheet-specific error code.\nUse this information to implement error handling logic according to the following guidelines:\n\n* If the error code indicates a permanent error condition, do not retry the request.\n* If the error code indicates a problem that can be fixed, do not retry the request until the problem has been fixed.\n* If the error code indicates a problem that could be overcome by retrying the request after a period of time, retry the request using exponential backoff.\n\nHTTP status code | Smartsheet errorCode | Smartsheet message | Recommended Action |\n-----|-----|-----|-----|\n400 | 1151 | Scope '{0}', object id {1} was not found. | Do not retry without fixing the problem.\n400 | 1152 | Only URLs with a protocol of 'https' are supported for attribute '{0}'. | Do not retry without fixing the problem.\n403 | 1153 | This webhook cannot be enabled because access was revoked for the application that created it. | <span class=\"doNotRetry\">Do not retry.</span>\n403 | 1154 | Please contact Support in order to enable this webhook. | <span class=\"doNotRetry\">Do not retry.</span>\n"
    },
    {
      "name": "workspaces",
      "x-displayName": "Workspaces",
      "description": "Similar to a folder, a workspace is a place where you can store dashboards, reports, sheets, and templates to keep them organized. A workspace offers more functionality than a folder because you can set up sharing permissions and branding (a logo and a color scheme) at the workspace-level and a workspace can contain folders so that you can keep things within it organized. As new items are added to the workspace, they'll automatically inherit the sharing permissions and branding applied to that workspace.\n<h2>Workspace Folders</h2>\n\nFor details about working with folders in a workspace, see [Folders](/api/smartsheet/openapi/folders).\n\n<h2>Workspace Sheets</h2>\n\nFor details about working with sheets in a workspace, see [Sheets](/api/smartsheet/openapi/sheets).\n"
    }
  ],
  "paths": {
    "/contacts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "operationId": "list-contacts",
        "summary": "List Contacts",
        "description": "Gets a list of the user's Smartsheet contacts.",
        "tags": [
          "contacts"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_CONTACTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/modifiedSince"
          },
          {
            "$ref": "#/components/parameters/numericDates"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Contact objects",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Contacts",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Contact"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Contact> contacts = smartsheet.ContactResources.ListContacts(\n  null                // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/contacts \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Contact> contacts = smartsheet.contactResources().listContacts(\n        null        // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.contacts.listContacts({})\n  .then(function(contactsList) {\n    console.log(contactsList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Contacts.list_contacts(include_all=True)\ncontacts = response.data\n\n# Sample 2: Paginate the list (100 contacts per page)\nresponse = smartsheet_client.Contacts.list_contacts(\n  page_size=100,\n  page=1)\npages = response.total_pages\ncontacts = response.data\n"
          }
        ]
      }
    },
    "/contacts/{contactId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/contactId"
        }
      ],
      "get": {
        "summary": "Get Contact",
        "description": "Gets the specified contact.",
        "operationId": "get-contact",
        "tags": [
          "contacts"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_CONTACTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contactInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Contact object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Contact contact = smartsheet.ContactResources.GetContact(\n  \"AAAAATYU54QAD7_fNhTnhA\"      // string contactId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/contacts/{contactId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Contact contact = smartsheet.contactResources().getContact(\n        \"AAAAATYU54QAD7_fNhTnhA\"      // string contactId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {id: \"AAAAATYU54QAD7_fNhTnhA\"};\n\n// Get contact\nsmartsheet.contacts.getContact(options)\n  .then(function(contact) {\n    console.log(contact);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "contact = smartsheet_client.Contacts.get_contact(\n  'AAAAATYU54QAD7_fNhTnhA')       # contact_id\n"
          }
        ]
      }
    },
    "/events": {
      "get": {
        "operationId": "list-events",
        "summary": "List Events",
        "description": "Gets events that are occurring in your Smartsheet organization account.\nExamples of events are creation, update, load, and delete of sheets,\nreports, dashboards, attachments, users, etc.\n\n> **Who can use this endpoint?**\n> \n> - **Plans:** Event Reporting is a premium add-on which can be purchased for Enterprise and Advanced Work Management plans only.\n> - **Permissions:** System Administrator\n>\n> This operation is available for Smartsheet, Smartsheet Gov, and Smartsheet Regions.\n\nEach event type has a distinct combination of `objectType` and `action` properties and an `additionalDetails` object that contains information specific to the event, including an `email address' property representing the user responsible for the activity. See the <a\nhref=\"https://smartsheet-platform.github.io/event-reporting-docs/\"\ntarget=\"_blank\">Event Reporting reference documentation</a> for a complete\nlist of all currently supported events, including their respective\n`objectType`, `action`, and `additionalDetails` properties.\n\n> **NOTE:** You must specify exactly one of the query parameters `since` or `streamPosition`. Both are optional individually, but one is required.\n",
        "tags": [
          "events"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_EVENTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "name": "since",
            "in": "query",
            "description": "The earliest time from which events are included in the response. Events before this time are excluded.\n\nThis parameter is required if `streamPosition` is not used.\n\nThe date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).\n\n> **IMPORTANT:** To keep event responses manageable and prevent timeouts, also specify the `to` query parameter.\n\n> **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "to",
            "in": "query",
            "description": "The latest time up to which events are included in the response. Events after this time are excluded.\n\nThis parameter requires using the `since` parameter. \n\nThe date-time value is resolved to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).\n\nLogic:\n\n- If `to` is a future time, the current time is used.\n- If `to` equals the `since` time, an empty data value is returned.\n- If `to` is before the `since` time, a validation error is returned.\n\n> **IMPORTANT:** This parameter is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained, date-based queries.\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "streamPosition",
            "in": "query",
            "description": "Indicates next set of events to return. Use value of\n`nextStreamPosition` returned from the previous call.\n\nThis parameter is required if `since` is not used.\n",
            "schema": {
              "type": "string",
              "example": "XyzAb1234cdefghijklmnofpq"
            },
            "required": false
          },
          {
            "name": "maxCount",
            "in": "query",
            "description": "Maximum number of events to return as response to this call.\nMust be between 1 through 10,000 (inclusive).\nDefaults to 1,000 if not specified.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 10000,
              "default": 1000
            },
            "required": false
          },
          {
            "name": "numericDates",
            "in": "query",
            "description": "If `true`, dates are accepted and returned in Unix epoch time\n(milliseconds since midnight on January 1, 1970 in UTC time).\n\nDefault is `false`, which means ISO-8601 format.\n",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "managedPlanId",
            "in": "query",
            "description": "The target managed plan for which to list events. Authorized if the\ncaller is a system administrator on either the target managed plan or\nthe main plan in EPM hierarchy.\n",
            "schema": {
              "type": "number"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StreamResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Events",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Event"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "A response with this status code can occur in any one of the following conditions:\n\n- The `to` parameter is earlier than the `since` parameter.\n- Invalid request format.\n- Missing required fields.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl -i -X GET \\  \n'https://api.smartsheet.com/2.0/events?since=2025-03-24T15%3A15%3A22Z&to=2025-03-24T16%3A15%3A22Z' \\\n--header 'Accept-Encoding: deflate' \\\n--header 'Authorization: Bearer <YOUR_TOKEN_HERE>'\n"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "const query = new URLSearchParams({\n  since: '2025-03-24T15:15:22Z',\n  to: '2025-03-24T16:15:22Z'\n}).toString();\n\nconst resp = await fetch(\n  `https://api.smartsheet.com/2.0/events?${query}`,\n  {\n    method: 'GET',\n    headers: {\n      'Accept-Encoding': 'deflate',\n      Authorization: 'Bearer <YOUR_TOKEN_HERE>'\n    }\n  }\n);\n\nconst data = await resp.text();\nconsole.log(data);\n"
          },
          {
            "lang": "nodejs",
            "label": "Node.js",
            "source": "import fetch from 'node-fetch';\n\nasync function run() {\n  const query = new URLSearchParams({\n    since: '2025-03-24T15:15:22Z',\n    to: '2025-03-24T16:15:22Z'\n  }).toString();\n\n  const resp = await fetch(\n    `https://api.smartsheet.com/2.0/events?${query}`,\n    {\n      method: 'GET',\n      headers: {\n        'Accept-Encoding': 'deflate',\n        Authorization: 'Bearer <YOUR_TOKEN_HERE>'\n      }\n    }\n  );\n\n  const data = await resp.text();\n  console.log(data);\n}\n\nrun();\n"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.smartsheet.com/2.0/events\"\n\nquery = {\n  \"since\": \"2025-03-24T15%3A15%3A22Z\",\n  \"to\": \"2025-03-24T16%3A15%3A22Z\"\n}\n\nheaders = {\n  \"Accept-Encoding\": \"deflate\",\n  \"Authorization\": \"Bearer <YOUR_TOKEN_HERE>\"\n}\n\nresponse = requests.get(url, headers=headers, params=query)\n\ndata = response.json()\nprint(data)\n"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n  reqUrl := \"https://api.smartsheet.com/2.0/events\"\n  req, err := http.NewRequest(\"GET\", reqUrl, nil)\n\n  query := req.URL.Query()\n  query.Add(\"since\", \"2025-03-24T15:15:22Z\")\n  query.Add(\"to\", \"2025-03-24T16:15:22Z\")\n  req.URL.RawQuery = query.Encode()\n\n  if err != nil {\n    panic(err)\n  }\n  req.Header.Add(\"Accept-Encoding\", \"deflate\")\n  req.Header.Add(\"Authorization\", \"Bearer <YOUR_TOKEN_HERE>\")\n  res, err := http.DefaultClient.Do(req)\n  if err != nil {\n    panic(err)\n  }\n  defer res.Body.Close()\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    panic(err)\n  }\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n}\n"
          },
          {
            "lang": "java",
            "label": "Java",
            "source": "import java.net.*;\nimport java.net.http.*;\nimport java.util.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\n\npublic class App {\n  public static void main(String[] args) throws Exception {\n    var httpClient = HttpClient.newBuilder().build();\n\n    HashMap<String, String> params = new HashMap<>();\n    params.put(\"since\", \"2025-03-24T15:15:22Z\");\n    params.put(\"to\", \"2025-03-24T16:15:22Z\");\n\n    var query = params.keySet().stream()\n      .map(key -> key + \"=\" + URLEncoder.encode(params.get(key), StandardCharsets.UTF_8))\n      .collect(Collectors.joining(\"&\"));\n\n    var host = \"https://api.smartsheet.com\";\n    var pathname = \"/2.0/events\";\n    var request = HttpRequest.newBuilder()\n      .GET()\n      .uri(URI.create(host + pathname + '?' + query))\n      .header(\"Accept-Encoding\", \"deflate\")\n      .header(\"Authorization\", \"Bearer <YOUR_TOKEN_HERE>\")\n      .build();\n\n    var response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n    System.out.println(response.body());\n  }\n}\n"
          },
          {
            "lang": "csharp",
            "label": "C#",
            "source": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\npublic class Program\n{\n  public static async Task Main()\n  {\n    System.Net.Http.HttpClient client = new()\n    {\n      DefaultRequestHeaders =\n      {\n        {\"Authorization\", \"Bearer <YOUR_TOKEN_HERE>\"},\n      }\n    };\n\n    using HttpResponseMessage request = await client.GetAsync(\"https://api.smartsheet.com/2.0/events?since=2025-03-24T15%3A15%3A22Z&to=2025-03-24T16%3A15%3A22Z\");\n    string response = await request.Content.ReadAsStringAsync();\n\n    Console.WriteLine(response);\n  }\n}\n"
          },
          {
            "lang": "php",
            "label": "PHP",
            "source": "/**\n* Requires libcurl\n*/\n\n$query = array(\n  \"since\" => \"2025-03-24T15%3A15%3A22Z\",\n  \"to\" => \"2025-03-24T16%3A15%3A22Z\",\n  \"streamPosition\" => \"XyzAb1234cdefghijklmnofpq\"\n);\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_HTTPHEADER => [\n    \"Accept-Encoding: deflate\",\n    \"Authorization: Bearer <YOUR_TOKEN_HERE>\"\n  ],\n  CURLOPT_URL => \"https://api.smartsheet.com/2.0/events?\" . http_build_query($query),\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$error = curl_error($curl);\n\ncurl_close($curl);\n\nif ($error) {\n  echo \"cURL Error #:\" . $error;\n} else {\n  echo $response;\n}\n"
          }
        ]
      }
    },
    "/favorites": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/ActorId"
        }
      ],
      "get": {
        "summary": "Get Favorites",
        "description": "Gets a list of all of the user's favorite items.",
        "operationId": "get-favorites",
        "tags": [
          "favorites"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/favoriteInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Favorite objects.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Favorite"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Favorite> results = smartsheet.FavoriteResources.ListFavorites(\n  null                // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/favorites \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Favorite> results = smartsheet.favoriteResources().listFavorites(\n        null        // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.favorites.listFavorites()\n  .then(function(favoritesList) {\n    console.log(favoritesList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresponse = smartsheet_client.Favorites.list_favorites(include_all=True)\nfaves = response.data\n\n# Sample 2: Paginate the list of favorites\nresponse = smartsheet_client.Favorites.list_favorites(\n  page_size=10,\n  page=1)\npages = response.total_pages\nfaves = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Add Favorites",
        "description": "Adds one or more favorite items for the current user. This operation supports both single-object and bulk semantics. For more information, see Optional Bulk Operations.\nIf called with a single Favorite object, and that favorite already exists, error code 1129 is returned. If called with an array of Favorite objects, any objects specified in the array that are already marked as favorites are ignored and omitted from the response.\n",
        "operationId": "add-favorite",
        "tags": [
          "favorites"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "A list of favorites to be added.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Favorite"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Favorite"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing either a single Favorite object or an array of Favorite objects.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/Favorite"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Favorite"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify favorites\nIList<Favorite> favoritesSpecification = new Favorite[]\n{\n  new Favorite\n  {\n    Type = ObjectType.SHEET,\n    ObjectId = 8400677765441412\n  }\n};\n\n// Add items to favorites\nIList<Favorite> newFavorite = smartsheet.FavoriteResources.AddFavorites(favoritesSpecification);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/favorites \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"type\": \"sheet\", \"objectId\": 8400677765441412}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify favorites\nFavorite favoritesSpecification = new Favorite()\n        .setObjectId(8400677765441412L)\n        .setType(FavoriteType.SHEET);\n\n// Add items to favorites\nList<Favorite> newFavorite = smartsheet.favoriteResources().addFavorites(Arrays.asList(favoritesSpecification));\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify favorites\nvar favorites = [\n  {\n    \"type\": \"sheet\",\n    \"objectId\": 8400677765441412\n  }\n];\n\n// Set options\nvar options = {\n  body: favorites\n};\n\n// Add items to favorites\nsmartsheet.favorites.addItemsToFavorites(options)\n  .then(function(newFavorite) {\n    console.log(newFavorite);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Favorites.add_favorites([\n  smartsheet.models.Favorite({\n    'type': 'sheet',\n    'object_id': 8400677765441412\n  })\n])\n"
          }
        ]
      }
    },
    "/favorites/{favoriteType}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/favoriteType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/ActorId"
        }
      ],
      "delete": {
        "summary": "Delete Multiple Favorites",
        "description": "Deletes all favorites with the same type for the user.",
        "operationId": "delete-favorites-by-type",
        "tags": [
          "favorites"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/favoriteIds"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.FavoriteResources.RemoveFavorites(\n  ObjectType.FOLDER,\n  new long[] { 2252168947361668, 2252168947361669 }     // folderIds\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/favorites/{favoriteType}?objectIds=favoriteId1,favoriteId2' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.favoriteResources().removeFavorites(\n        FavoriteType.FOLDER,\n        new HashSet(Arrays.asList(2252168947361668L, 2252168947361669L))      // long folderIds\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  queryParameters: {\n    objectIds: \"2252168947361668,2252168947361669\"\n  }\n};\n\n// Remove favoriteType from list of favorites\nsmartsheet.favorites.remove{favoriteType}FromFavorites(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Favorites.remove_favorites(\n  'folder',\n  [2252168947361668, 2252168947361669]        # folder_ids\n)\n"
          }
        ]
      }
    },
    "/favorites/{favoriteType}/{favoriteId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/favoriteType"
        },
        {
          "$ref": "#/components/parameters/favoriteId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/ActorId"
        }
      ],
      "delete": {
        "summary": "Delete Favorite",
        "description": "Deletes a single favorite from the user's list of favorite items by type and ID.",
        "operationId": "delete-favorites-by-type-and-id",
        "tags": [
          "favorites"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.FavoriteResources.RemoveFavorites(\n  ObjectType.FOLDER,\n  new long[] { 2252168947361668 }   // folderId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/favorites/{favoriteType}/{folderId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.favoriteResources().removeFavorites(\n        FavoriteType.FOLDER,\n        new HashSet(Arrays.asList(2252168947361668L))      // long folderId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  objectId: 2252168947361668\n};\n\n// Remove folder from list of favorites\nsmartsheet.favorites.removeFolderFromFavorites(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Favorites.remove_favorites(\n  'folder',\n  2252168947361668        # folder_id\n)\n"
          }
        ]
      },
      "get": {
        "summary": "Is Favorite",
        "description": "Checks whether an item has been tagged as a favorite for the current user by type and ID.",
        "operationId": "is-favorite",
        "tags": [
          "favorites"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/favoriteInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl -i -X GET \\\n  'https://api.smartsheet.com/2.0/favorites/{favoriteType}/{favoriteId}?include={directId}' \\\n  -H 'Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789' \\\n  -H 'x-smar-sc-actor-id: 100012'\n"
          }
        ]
      }
    },
    "/filteredEvents": {
      "post": {
        "operationId": "list-filtered-events",
        "summary": "List Filtered Events",
        "description": "Gets the events that are occurring in a Smartsheet organization account for resources to which the current user has access to. This endpoint will return events related to the creation, update, load, and delete of sheets, attachments, discussion, workspaces and groups.\n\n> **Who can use this endpoint?**\n> \n> - **Plans:** Event Reporting is a premium add-on which can be purchased for Enterprise and Advanced Work Management plans only.\n> - **Permissions:** System Administrator\n>\n> This operation is available for Smartsheet, Smartsheet Gov, and Smartsheet Regions.\n\nEach event type has a distinct combination of `objectType` and `action` properties and an `additionalDetails` object that contains information specific to the event, including an `email address' property representing the user responsible for the activity. See the <a href=\"https://smartsheet-platform.github.io/event-reporting-docs/\" target=\"_blank\">Event Reporting reference documentation</a> for a complete list of all currently supported events, including their respective `objectType`, `action`, and `additionalDetails` properties.",
        "tags": [
          "events"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_EVENTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept-Encoding"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilteredEventsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StreamResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Events",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Event"
                          }
                        },
                        "unavailableSheetIds": {
                          "description": "List of sheet Ids specified in the request that the user does not have access to.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "unavailableWorkspaceIds": {
                          "description": "List of workspace Ids specified in the request that the user does not have access to.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "410": {
            "$ref": "#/components/responses/410"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folderId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/folderId"
        }
      ],
      "get": {
        "summary": "Get Folder",
        "description": "Gets a Folder object.",
        "tags": [
          "folders"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "get-folder",
        "parameters": [
          {
            "$ref": "#/components/parameters/folderWorkspaceInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "A single Folder object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include' parameter\nFolder folder = smartsheet.FolderResources.GetFolder(\n  7116448184199044,           // long folderId\n  null                        // IEnumerable<FolderInclusion> include\n);\n\n// Sample 2: Specify 'include' parameter with value of \"SOURCE\"\nFolder folder = smartsheet.FolderResources.GetFolder(\n  7116448184199044,           // long folderId\n  new FolderInclusion[] {\n    FolderInclusion.SOURCE }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/folders/{folderId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include' parameter\nFolder folder = smartsheet.folderResources().getFolder(\n        7116448184199044L,       // long folderId\n        null)                    // EnumSet<SourceInclusion> includes\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"SOURCE\"\nFolder folder = smartsheet.folderResources().getFolder(\n        7116448184199044L,       // long folderId\n        EnumSet.of(SourceInclusion.SOURCE))\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  id: 7116448184199044 // Id of Folder\n};\n\n// Get folder\nsmartsheet.folders.getFolder(options)\n  .then(function(folder) {\n    console.log(folder);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get folder\nfolder = smartsheet_client.Folders.get_folder(\n  7116448184199044)       # folder_id\n\n# Sample 2: Include source\nresponse = smartsheet_client.Folders.get_folder(\n  7116448184199044,       # folder_id\n  include=source)\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Folder",
        "description": "Deletes a folder.",
        "tags": [
          "folders"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "operationId": "delete-folder",
        "responses": {
          "200": {
            "description": "Returns Result object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.FolderResources.DeleteFolder(\n  965780272637828                 // long folderId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/folders/{folderId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.folderResources().deleteFolder(\n        965780272637828L         // long folderId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  id: 965780272637828 // Id of Folder\n};\n\n// Delete folder\nsmartsheet.folders.deleteFolder(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Folders.delete_folder(\n  7960873114331012)       # folder_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Folder",
        "description": "Updates a folder.",
        "operationId": "update-folder",
        "tags": [
          "folders"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the modified Folder object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Folder"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set folder name\nFolder folderSpecification = new Folder\n{\n  Id = 7960873114331012,\n  Name = \"New name for folder\"\n};\n\n// Update folder\nFolder updatedFolder = smartsheet.FolderResources.UpdateFolder(folderSpecification);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/folders/{folderId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"name\": \"New name for folder\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set folder name and id of the folder to be updated\nFolder folderSpecification = new Folder(7960873114331012L);\nfolderSpecification.setName(\"New name for folder\");\n\n// Update folder\nFolder updatedFolder = smartsheet.folderResources().updateFolder(folderSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set folder name\nvar folder = {\n  \"name\": \"New name for folder\"\n};\n\n// Set options\nvar options = {\n  id: 7960873114331012, // Id of Folder\n  body: folder\n};\n\n// Update folder\nsmartsheet.folders.updateFolder(options)\n  .then(function(updatedFolder) {\n    console.log(updatedFolder);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_folder = smartsheet_client.Folders.update_folder(\n  7960873114331012,       # folder_id\n  'New name for folder')\n"
          }
        ]
      }
    },
    "/folders/{folderId}/copy": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/folderId"
        }
      ],
      "post": {
        "summary": "Copy Folder",
        "description": "Copies a folder.",
        "tags": [
          "folders"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "operationId": "copy-folder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/sheetCopyInclude"
          },
          {
            "$ref": "#/components/parameters/sheetCopyExclude"
          },
          {
            "$ref": "#/components/parameters/skipRemap"
          }
        ],
        "requestBody": {
          "description": "New folder name.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ContainerDestinationForCopy"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Folder object for the new folder destination.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerDestinationForCopy"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination {\n  DestinationId = 7960873114331012,\n  DestinationType = DestinationType.FOLDER,\n  NewName = \"newFolderName\"\n};\n\n// Sample 1: Omit 'include' and 'skipRemap' parameters\nFolder folder = smartsheet.FolderResources.CopyFolder(\n  2252168947361668,               // long folderId\n  destination,\n  null,                           // IEnumerable<FolderCopyInclusion> include\n  null                            // IEnumerable<FolderRemapExclusion> skipRemap\n);\n\n// Sample 2: Specify 'include' parameter with value of \"DATA\", and 'skipRemap' parameter with value of \"CELL_LINKS\"\nFolder folder = smartsheet.FolderResources.CopyFolder(\n  2252168947361668,               // long folderId\n  destination,\n  new FolderCopyInclusion[] {\n    FolderCopyInclusion.DATA },\n  new FolderRemapExclusion[] {\n    FolderRemapExclusion.CELL_LINKS }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/folders/{folderId}/copy?include=data' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"destinationType\": \"folder\",\n  \"destinationId\": 7960873114331012,\n  \"newName\": \"newFolderName\"\n}' \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination()\n        .setDestinationType(DestinationType.FOLDER)\n        .setDestinationId(7960873114331012L)\n        .setNewName(\"newFolderName\");\n\n// Sample 1: Omit 'include' and 'skipRemap' parameters\nFolder folder = smartsheet.folderResources().copyFolder(\n        2252168947361668L,                      // long folderId\n        destination,\n        null,                                   // EnumSet<FolderCopyInclusion> includes\n        null                                    // EnumSet<FolderRemapExclusion> skipRemap\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"DATA\", and 'skipRemap' parameter with value of \"CELLLINKS\"\nFolder folder = smartsheet.folderResources().copyFolder(\n        2252168947361668L,                      // long folderId\n        destination,\n        EnumSet.of(FolderCopyInclusion.DATA),\n        EnumSet.of(FolderRemapExclusion.CELLLINKS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify destination information\nvar body = {\n  destinationType: \"folder\",\n  destinationId: 7960873114331012,\n  newName: \"Folder Copy\"\n};\n\n// Specify elements to copy\nvar params = {\n  include: \"data,discussions\",\n  skipRemap: \"cellLinks\"\n};\n\n// Set options\nvar options = {\n  folderId: 2252168947361668,\n  body: body,\n  queryParameters: params\n};\n\n// Copy folder\nsmartsheet.folders.copyFolder(options)\n  .then(function(folder) {\n    console.log(folder);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Copy folder\nresponse = smartsheet_client.Folders.copy_folder(\n  2252168947361668,                           # folder_id\n  smartsheet.models.ContainerDestination({\n    'destination_id': 7960873114331012,\n    'destination_type': 'folder',\n    'new_name': 'newFolderName'\n  })\n)\n\n# Sample 2: Include filters\nresponse = smartsheet_client.Folders.copy_folder(\n  2252168947361668,                           # folder_id\n  include=filters,\n  smartsheet.models.ContainerDestination({\n    'destination_id': 7960873114331012,\n    'destination_type': 'folder',\n    'new_name': 'newFolderName'\n  })\n)\n"
          }
        ]
      }
    },
    "/folders/{folderId}/folders": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/folderId"
        }
      ],
      "get": {
        "summary": "List Folders",
        "description": "Gets a list of folders in a given folder. The list contains an abbreviated Folder object for each folder.\n",
        "tags": [
          "folders"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "list-folders",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Folder objects.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Folder> folders = smartsheet.FolderResources.ListFolders(\n  5107651446105988,           // long folderId\n  null                        // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/folders/{folderId}/folders \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Folder> folders = smartsheet.folderResources().listFolders(\n        510765144610598L,               // long parentFolderId\n        null                             // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  folderId: 5107651446105988\n};\n\n// List folders in another folder\nsmartsheet.folders.listChildFolders(options)\n  .then(function(folderList) {\n    console.log(folderList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Folders.list_folders(\n  5107651446105988,       # folder_id\n  include_all=True)\nfolders = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Folders.list_folders(\n  5107651446105988,       # folder_id\n  page_size=5,\n  page=1)\npages = response.total_pages\nfolders = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create Folder",
        "description": "Creates a new folder.\n",
        "operationId": "create-folder-folder",
        "tags": [
          "folders"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/sheetCopyInclude"
          },
          {
            "$ref": "#/components/parameters/sheetCopyExclude"
          },
          {
            "$ref": "#/components/parameters/skipRemap"
          }
        ],
        "requestBody": {
          "description": "Folder to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Folder"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Folder object for newly created folder.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/Folder"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set folder name\nFolder folderSpecification = new Folder { Name = \"New folder\" };\n\n// Create folder in another folder\nFolder newFolder = smartsheet.FolderResources.CreateFolder(\n  7960873114331012,               // long destinationFolderId\n  folderSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/folders/{folderid}/folders \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\": \"New folder\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set folder name\nFolder folderSpecification = new Folder();\nfolderSpecification.setName(\"New Folder\");\n\n// Create folder in another folder\nFolder newFolder = smartsheet.folderResources().createFolder(\n        7960873114331012L,       // long destinationFolderId\n        folderSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set folder name\nvar folder = {\n  \"name\": \"New folder\"\n};\n\n// Set options\nvar options = {\n  folderId: 7960873114331012,\n  body: folder\n  };\n\n// Create folder in another folder\nsmartsheet.folders.createChildFolder(options)\n  .then(function(newFolder) {\n    console.log(newFolder);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Create folder\nresponse = smartsheet_client.Folders.create_folder_in_folder(\n  7960873114331012,       # folder_id\n  'New folder')\n\n# Sample 2: Include filters\nresponse = smartsheet_client.Folders.create_folder_in_folder(\n  7960873114331012,       # folder_id\n  include=filters,\n  'New folder')\n"
          }
        ]
      }
    },
    "/folders/{folderId}/move": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/folderId"
        }
      ],
      "post": {
        "summary": "Move Folder",
        "description": "Moves a folder.",
        "tags": [
          "folders"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "operationId": "move-folder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "New folder destination.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ContainerDestinationForMove"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Folder object for the new folder destination.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerDestinationForMove"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination {\n  DestinationId = 7960873114331012,       // long destinationFolderId\n  DestinationType = DestinationType.FOLDER,\n};\n\n// Move folder\nFolder folder = smartsheet.FolderResources.MoveFolder(\n  4509918431602564,               // long folderId\n  destination\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/folders/{folderId}/move \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"destinationType\": \"folder\",\n  \"destinationId\": 7960873114331012\n}' \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination()\n        .setDestinationType(DestinationType.FOLDER)\n        .setDestinationId(7960873114331012L);\n\n// Move folder\nFolder folder = smartsheet.folderResources().moveFolder(\n        4509918431602564L,                         // long folderId\n        destination\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set destination information\nvar body = {\n  destinationType: \"folder\",\n  destinationId: 7960873114331012\n};\n\n// Set options\nvar options = {\n  folderId: 4509918431602564,\n  body: body\n};\n\n// Move folder\nsmartsheet.folders.moveFolder(options)\n  .then(function(folder) {\n    console.log(folder);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "folder = smartsheet_client.Folders.move_folder(\n  4509918431602564,                           # folder_id to be moved\n  smartsheet.models.ContainerDestination({\n    'destination_id': 7960873114331012,     # destination folder_id\n    'destination_type': 'folder'\n  })\n)\n"
          }
        ]
      }
    },
    "/folders/{folderId}/sheets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/folderId"
        }
      ],
      "post": {
        "summary": "Create Sheet in Folder",
        "description": "Creates a sheet from scratch or from the specified template in the specified folder.\n",
        "operationId": "create-sheet-in-folder",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "requestBody": {
          "description": "Sheet to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SheetToCreate"
                  },
                  {
                    "$ref": "#/components/schemas/SheetToCreateFromTemplate"
                  }
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Create sheet in folder\n// Specify properties of the first column\nColumn columnA = new Column\n{\n  Title = \"Favorite\",\n  Primary = false,\n  Type = ColumnType.CHECKBOX,\n  Symbol = Symbol.STAR\n};\n\n// Specify properties of the second column\nColumn columnB = new Column\n{\n  Title = \"Primary Column\",\n  Primary = true,\n  Type = ColumnType.TEXT_NUMBER\n};\n\n// Create sheet in folder (specifying the 2 columns to include in the sheet)\nSheet newSheet = smartsheet.FolderResources.SheetResources.CreateSheet(\n  3734419270854532,                   // long folderId\n  new Sheet\n    {\n      Name = \"new sheet title\",\n      Columns = new Column[] { columnA, columnB }\n    }\n);\n\n// Sample 2: Create sheet in folder from template\n// Specify name for the sheet and Id of the template\nSheet sheetSpecification = new Sheet\n{\n  Name = \"new sheet title\",\n  FromId = 7679398137620356     // template Id\n};\n\n// Option 1: Omit 'include' parameter\nSheet newSheet = smartsheet.FolderResources.SheetResources.CreateSheetFromTemplate(\n  3734419270854532,               // long folderId\n  sheetSpecification,\n  null                            // IEnumerable<TemplateInclusion> include\n);\n\n// Option 2: Include ATTACHMENTS, DATA, and DISCUSSIONS\nSheet newSheet = smartsheet.FolderResources.SheetResources.CreateSheetFromTemplate(\n  3734419270854532,               // long folderId\n  sheetSpecification,\n  new TemplateInclusion[] {\n    TemplateInclusion.ATTACHMENTS,\n    TemplateInclusion.DATA,\n    TemplateInclusion.DISCUSSIONS }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "// Sample 1: Create sheet in folder\ncurl https://api.smartsheet.com/2.0/folders/{folderId}/sheets \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\":\"newsheet\",\"columns\":[{\"title\":\"Favorite\",\"type\":\"CHECKBOX\",\"symbol\":\"STAR\"}, {\"title\":\"Primary Column\", \"primary\":true,\"type\":\"TEXT_NUMBER\"}]}'\n\n// Sample 2: Create sheet in folder from template\ncurl 'https://api.smartsheet.com/2.0/folders/{folderId}/sheets?include=data,attachments,discussions' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\":\"newsheet\", \"fromId\": 7679398137620356}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Create sheet in folder\n// Specify properties of the first column\nColumn columnA = new Column()\n        .setTitle(\"Favorite\")\n        .setType(ColumnType.CHECKBOX)\n        .setSymbol(Symbol.STAR);\n\n// Specify properties of the second column\nColumn columnB = new Column()\n        .setTitle(\"Primary Column\")\n        .setType(ColumnType.TEXT_NUMBER)\n        .setPrimary(true);\n\n// Create sheet in folder (specifying the 2 columns to include in the sheet)\nSheet newSheet = new Sheet();\n        newSheet.setName(\"new sheet title\");\n        newSheet.setColumns(Arrays.asList(columnA, columnB));\n\nsmartsheet.sheetResources().createSheetInFolder(\n        3734419270854532L,  // long folderId\n        newSheet\n        );\n\n// Sample 2: Create sheet in folder from template\n// Specify name for the sheet and Id of the template\nSheet sheet = new Sheet();\nsheet.setFromId(7679398137620356L);     // long templateId\nsheet.setName(\"newsheet\");\n\n// Omit 'include' parameter\nSheet results = smartsheet.sheetResources().createSheetInFolderFromTemplate(\n        3734419270854532L,                  // long folderId\n        sheet,\n        null                                // EnumSet<SheetTemplateInclusion> includes\n        );\n\n// Include ATTACHMENTS, DATA, and DISCUSSIONS\nSheet results = smartsheet.sheetResources().createSheetInFolderFromTemplate(\n        3734419270854532L,                 // long folderId\n        sheet,\n        EnumSet.of(\n            SheetTemplateInclusion.ATTACHMENTS,\n            SheetTemplateInclusion.DATA,\n            SheetTemplateInclusion.DISCUSSIONS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Create sheet in folder\n// Specify sheet properties\nvar sheet = {\n  \"name\": \"newsheet\",\n  \"columns\": [\n    {\n      \"title\": \"Favorite\",\n      \"type\": \"CHECKBOX\",\n      \"symbol\": \"STAR\"\n    },\n    {\n      \"title\": \"Primary Column\",\n      \"primary\": true,\n      \"type\": \"TEXT_NUMBER\"\n    }\n  ]\n};\n\n// Set options\nvar options = {\n  folderId: 3734419270854532,\n  body: sheet\n  };\n\n// Create sheet in folder\nsmartsheet.sheets.createSheetInFolder(options)\n  .then(function(newSheet) {\n    console.log(newSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 2: Create sheet in folder from template\n// Specify the directive\nvar sheet = {\n  \"name\": \"newsheet\",\n  \"fromId\": 7679398137620356\n};\n\n// Set options\nvar options = {\n  body: sheet,\n  folderId: 3734419270854532\n};\n\n// Create sheet from template in the specified folder\nsmartsheet.sheets.createSheetFromExisting(options)\n  .then(function(data) {\n    console.log(data);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Create sheet in folder\nsheet_spec = smartsheet.models.Sheet({\n  'name': 'newsheet',\n  'columns': [{\n        'title': 'Favorite',\n        'type': 'CHECKBOX',\n        'symbol': 'STAR'\n      }, {\n        'title': 'Primary Column',\n        'primary': True,\n        'type': 'TEXT_NUMBER'\n      }\n  ]\n})\nresponse = smartsheet_client.Folders.create_sheet_in_folder(\n  3734419270854532,       # folder_id\n  sheet_spec)\nnew_sheet = response.result\n\n# Sample 2: Create sheet in folder from template\nresponse = smartsheet_client.Folders.create_sheet_in_folder_from_template(\n  3734419270854532,                   # folder_id\n  smartsheet.models.Sheet({\n    'name': 'newsheet',\n    'from_id': 7679398137620356       # template_id\n  })\n)\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Result object containing a Sheet object for newly created sheet, corresponding to what was specified in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/SheetCreated"
                            },
                            {
                              "$ref": "#/components/schemas/SheetCreatedFromTemplate"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/folders/{folderId}/sheets/import": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/folderId"
        }
      ],
      "post": {
        "summary": "Import Sheet into Folder",
        "description": "Imports CSV or XLSX data into a new sheet in the specified folder.\n\nNote the following:\n* Both sheetName and the file name must use ASCII characters.\n* The source data must be basic text. To include rich formula data, import and create a sheet first, and then use Update Rows. To work with images, see Cell Images.\n* XLS is not supported. You must use XLSX.\n* Hierarchical relationships between rows in an external file won't import.\n",
        "operationId": "import-sheet-into-folder",
        "tags": [
          "imports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Disposition"
          },
          {
            "$ref": "#/components/parameters/parameters-Content-Type"
          },
          {
            "$ref": "#/components/parameters/sheetName"
          },
          {
            "$ref": "#/components/parameters/headerRowIndex"
          },
          {
            "$ref": "#/components/parameters/primaryColumnIndex"
          }
        ],
        "requestBody": {
          "description": "Binary content for the CSV / XLSX file.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Sheet object for imported sheet.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SheetImported"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Sheet sheet = smartsheet.FolderResources.SheetResources.ImportXlsSheet(\n  8999900887877508,       // folderId\n  \"D:/ProgressReport.xlsx\",\n  null,                   // sheetName defaults to file name unless specified\n  0,                      // headerRowIndex\n  null                    // primaryColumnIndex\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl  https://api.smartsheet.com/2.0/folders/{folderId}/sheets/import?sheetName=MarketingProgressReport&headerRowIndex=0&primaryColumnIndex=0 \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Disposition: attachment\" \\\n-H \"Content-Type: text/csv\" \\\n-X POST \\\n--data-binary @ProgressReport.csv\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Sheet sheet = smartsheet.sheetResources().importXlsxInFolder(\n        8999900887877508L,           // long folderId\n        \"D:/ProgressReport.xlsx\",\n        \"MarketingProgressReport\",\n        0,                          // headerRowIndex\n        0                           // primaryColumnIndex\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Import CSV into folder\n// Set options\nvar options = {\n  folderId: 8999900887877508,\n  queryParameters: {\n    sheetName: 'MarketingProgressReport'\n  },\n  path: \"D:/ProgressReport.csv\"\n};\n\n// Import CSV as sheet into folder\nsmartsheet.sheets.importCsvSheetIntoFolder(options)\n  .then(function(attachment) {\n    console.log(attachment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n//Sample 2: Import XLSX into folder\n// Set options\nvar options = {\n  folderId: 8999900887877508,\n  queryParameters: {\n    sheetName: 'MarketingProgressReport'\n  },\n  path: \"D:/ProgressReport.xlsx\"\n};\n\n// Import XLSX as sheet into Folder\nsmartsheet.sheets.importXlsxSheetIntoFolder(options)\n  .then(function(attachment) {\n    console.log(attachment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "imported_sheet = smartsheet_client.Folders.import_xlsx_sheet(\n  8999900887877508,           # folder_id\n  'D:/ProgressReport.xlsx',\n  'MarketingProgressReport',  # sheet_name\n  header_row_index=0\n)\n"
          }
        ]
      }
    },
    "/folders/personal": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Contents",
        "deprecated": true,
        "description": "> **Deprecated** since March 25, 2025, and will be removed. To adapt to this change, please see [Migrate from using the Sheets folder](/api/smartsheet/guides/updating-code/migrate-from-using-the-sheets-folder).\n\nGets a nested list of all Home objects shared to the user, including \ndashboards, folders, reports, sheets, and templates, as shown on the \"Home\"\ntab.\n",
        "tags": [
          "home"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "list-home-contents",
        "parameters": [
          {
            "$ref": "#/components/parameters/folderWorkspaceInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "A single Home object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Home"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/folders/personal' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\"\n"
          }
        ]
      }
    },
    "/groups": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "operationId": "list-groups",
        "summary": "List Org Groups",
        "description": "Gets a list of all groups in an organization account. To fetch the members of an individual group, use the [Get Group](/api/smartsheet/openapi/groups/get-group) operation.\n",
        "tags": [
          "groups"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_USERS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/modifiedSince"
          },
          {
            "$ref": "#/components/parameters/numericDates"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of [Group objects](/api/smartsheet/openapi/groups/group)\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Groups",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Group"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Group> groups = smartsheet.GroupResources.ListGroups(\n  null                    // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/groups \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Group> groups = smartsheet.groupResources().listGroups(\n        null        // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.groups.listGroups()\n  .then(function(groupList) {\n    console.log(groupList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Groups.list_groups(include_all=True)\ngroups = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Groups.list_groups(\n  page_size=10,\n  page=1)\npages = response.total_pages\ngroups = response.data\n"
          }
        ]
      },
      "post": {
        "operationId": "add-group",
        "summary": "Add Group",
        "description": "Creates a new group.\n\n**_This operation is only available to group administrators and system administrators._**\n",
        "tags": [
          "groups"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "requestBody": {
          "description": "[Group object](/api/smartsheet/openapi/groups/group), limited to the following attributes:\n* name (required) -- must be unique within the organization account\n* description (optional)\n* members (optional) -- array of [GroupMember objects](/api/smartsheet/openapi/groupmembers/groupmember), each limited to the following attribute:\n    * email\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object, containing a [Group object](/api/smartsheet/openapi/groups/group) for the newly created group\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Group"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Create group member\nGroupMember memberSpecification = new GroupMember { Email = \"john.doe@smartsheet.com\" };\n\n// Add member to group\nGroup groupSpecification = new Group\n{\n  Name = \"API-created Group\",\n  Description = \"Group created via API\",\n  Members = new GroupMember[] { memberSpecification }\n};\n\n// Create group\nGroup newGroup = smartsheet.GroupResources.CreateGroup(groupSpecification);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/groups \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{ \"name\": \"API-created Group\", \"description\": \"Group created via API\", \"members\": [{ \"email\": \"john.doe@smartsheet.com\" }]}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Create group member\nGroupMember memberSpecification = new GroupMember();\nmemberSpecification.setEmail(\"john.doe@smartsheet.com\");\n\n// Add member to group\nGroup groupSpecification = new Group();\ngroupSpecification.setDescription(\"Group created via API\")\n        .setMembers(Arrays.asList(memberSpecification))\n        .setName(\"API-created Group\");\n\n// Create group\nGroup newGroup = smartsheet.groupResources().createGroup(groupSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify group\nvar group = {\n  \"name\": \"API-created Group\",\n  \"description\": \"Group created via API\",\n  \"members\": [\n    {\n      \"email\": \"john.doe@smartsheet.com\"\n    }\n  ]\n};\n\n// Set options\nvar options = {\n  body: group\n};\n\n// Create group\nsmartsheet.groups.createGroup(options)\n  .then(function(newGroup) {\n    console.log(newGroup);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "new_group = smartsheet_client.Groups.create_group(\n  smartsheet.models.Group({\n    'name': 'API-created Group',\n    'description': 'Group created via API',\n    'members': smartsheet.models.GroupMember({\n      'email': 'john.doe@smartsheet.com'\n    })\n  })\n)\n"
          }
        ]
      }
    },
    "/groups/{groupId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/groupId"
        }
      ],
      "get": {
        "operationId": "get-group",
        "summary": "Get Group",
        "description": "Gets information about an array of [Group Members](/api/smartsheet/openapi/groupmembers/groupmember) for the group specified in the URL.",
        "tags": [
          "groups"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "[Group](/api/smartsheet/openapi/groups/group) object that includes the list of [GroupMember](/api/smartsheet/openapi/groupmembers/groupmember) objects\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Group"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "members": {
                          "description": "List of Group Members",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GroupMember"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Group group = smartsheet.GroupResources.GetGroup(\n  6932724448552836            // long groupId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/groups/{groupId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Group group = smartsheet.groupResources().getGroup(\n        6932724448552836L        // long groupId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  id: 6932724448552836 // Id of Group\n};\n\n// Get group\nsmartsheet.groups.getGroup(options)\n  .then(function(group) {\n    console.log(group);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "group = smartsheet_client.Groups.get_group(\n  6932724448552836)       # group_id\n# group is an instance of smartsheet.models.Group\n"
          }
        ]
      },
      "put": {
        "operationId": "update-group",
        "summary": "Update Group",
        "description": "Updates the Group specified in the URL.\n\n**_This operation is only available to group administrators and system administrators._**\n",
        "tags": [
          "groups"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "requestBody": {
          "description": "Group object, limited to the following attributes:\n* description (optional)\n* name (optional) -- must be unique within the organization account\n* ownerId (optional): Id of an admin user to whom the group ownership is transferred\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the [Group object](/api/smartsheet/openapi/groups/group) for the updated group",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Group"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify the name and description of the group\nGroup groupSpecification = new Group\n{\n  Id = 2331373580117892,\n  Name = \"Renamed Group\",\n  Description = \"Some new description\"\n};\n\n// Update group\nGroup updatedGroup = smartsheet.GroupResources.UpdateGroup(groupSpecification);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/groups/{groupId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{ \"name\": \"Renamed Group\", \"description\": \"Some new description\" }'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify the name and description of the group\nGroup groupSpecification = new Group(2331373580117892L);\n        groupSpecification.setDescription(\"Some new description\")\n        .setName(\"Renamed Group\");\n\n// Update group\nGroup updatedGroup = smartsheet.groupResources().updateGroup(groupSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify the name and description of the group\nvar group = {\n  \"name\": \"Renamed Group\",\n  \"description\": \"Some new description\"\n};\n\n// Set options\nvar options = {\n  id: 2331373580117892, // Id of Group\n  body: group\n  };\n\n// Update group\nsmartsheet.groups.updateGroup(options)\n  .then(function(updatedGroup) {\n    console.log(updatedGroup);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_group = smartsheet_client.Groups.update_group(\n  2331373580117892,       # group_id\n  smartsheet.models.Group({\n    'name': 'Renamed Group',\n    'description': 'Some new description'\n  })\n)\n"
          }
        ]
      },
      "delete": {
        "operationId": "delete-group",
        "summary": "Delete Group",
        "description": "Deletes the group specified in the URL.\n\n**_This operation is only available to group administrators and system administrators._**\n",
        "tags": [
          "groups"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "**_This operation is asynchronous,_** _meaning group members may retain their sharing access for a brief period of time after the call returns. For small groups with limited sharing, the operation should complete quickly (within a few seconds). For large groups with many shares, this operation could possibly take more than a minute to complete._\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.GroupResources.DeleteGroup(\n  6932724448552836            // long groupId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/groups/{groupId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.groupResources().deleteGroup(\n        6932724448552836L        // long groupId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  id: 6932724448552836 // Id of Group\n};\n\n// Delete group\nsmartsheet.groups.deleteGroup(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Groups.delete_group(\n    6932724448552836)       # group_id\n"
          }
        ]
      }
    },
    "/groups/{groupId}/members": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/groupId"
        }
      ],
      "post": {
        "operationId": "add-group-members",
        "summary": "Add Group Members",
        "description": "Adds one or more members to a group.\n\n**_This operation supports both single-object and bulk semantics. For more information, see Optional Bulk Operations._**\n\nIf called with a single [GroupMember object](/api/smartsheet/openapi/groupmembers/groupmember), and that group member already exists, error code **1129** is returned.\nIf called with an array of [GroupMember objects](/api/smartsheet/openapi/groupmembers/groupmember), any users specified in the array that are already group members are ignored and omitted from the response.\n\n**_This operation is only available to group administrators and system administrators._**\n",
        "tags": [
          "groupMembers"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/GroupMember"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GroupMember"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a Result object containing the members added to the group -- either a single [GroupMember](/api/smartsheet/openapi/groupmembers/groupmember) or array of [GroupMember](/api/smartsheet/openapi/groupmembers/groupmember) objects, corresponding to what was specified in the request.\n\n**_This operation is asynchronous,_** _meaning the users may not yet have sharing access to sheets for a period of time after this operation returns. For small groups with limited sharing, the operation should complete quickly (within a few seconds). For large groups with many shares, this operation could possibly take more than a minute to complete._\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/GroupMember"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/GroupMember"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "If an error occurs because the request specified one or more alternate email addresses, please retry using the primary email address.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Create group member\nGroupMember memberSpecification = new GroupMember { Email = \"jane.doe@smartsheet.com\" };\n\n// Add members to group\nIList<GroupMember> newMembers = smartsheet.GroupResources.AddGroupMembers(\n  7917992160847748,           // long groupId\n  new GroupMember[] { memberSpecification }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/groups/{groupId}/members \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d \"[{ \\\"email\\\": \\\"jane.doe@smartsheet.com\\\" }]\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Create group member\nGroupMember memberSpecification = new GroupMember();\n        memberSpecification.setEmail(\"jane.doe@smartsheet.com\");\n\n// Add members to group\nList<GroupMember> newMembers = smartsheet.groupResources().memberResources().addGroupMembers(\n        7917992160847748L,       // long groupId\n        Arrays.asList(memberSpecification)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify group members\nvar members = [{ \"email\": \"jane.doe@smartsheet.com\" }];\n\n// Set options\nvar options = {\n  groupId: 7917992160847748,\n  body: members\n  };\n\n// Add members to group\nsmartsheet.groups.addGroupMembers(options)\n  .then(function(newMembers) {\n    console.log(newMembers);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "new_members = smartsheet_client.Groups.add_members(\n  7917992160847748,       # group_id\n  [smartsheet.models.GroupMember({'email': 'jane.doe@smartsheet.com'})]\n)\n"
          }
        ]
      }
    },
    "/groups/{groupId}/members/{userId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/groupId"
        },
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "delete": {
        "operationId": "delete-group-members",
        "summary": "Delete Group Members",
        "description": "Removes a member from a group.\n\n**_This operation is only available to group administrators and system administrators._**\n",
        "tags": [
          "groupMembers"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "**_This operation is asynchronous,_** _meaning the users may not yet have sharing access to sheets for a period of time after this operation returns. For small groups with limited sharing, the operation should complete quickly (within a few seconds). For large groups with many shares, this operation could possibly take more than a minute to complete._\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.GroupResources.RemoveGroupMember(\n  7917992160847748,           // long groupId\n  1539725208119172            // long userId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/groups/{groupId}/members/{userId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.groupResources().memberResources().deleteGroupMember(\n        7917992160847748L,       // long groupId\n        1539725208119172L)       // long userId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  groupId: 7917992160847748,\n  userId: 1539725208119172\n};\n\n// Remove member from group\nsmartsheet.groups.removeGroupMember(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Groups.remove_member(\n  7917992160847748,       # group_id\n  1539725208119172)       # group_member_id\n"
          }
        ]
      }
    },
    "/home/folders": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Folders in Home",
        "description": "> **IMPORTANT:** The `GET /home/folders` method is deprecated and will be removed. To adapt to this change, please see [Migrate from using the Sheets folder](/api/smartsheet/guides/updating-code/migrate-from-using-the-sheets-folder).\n\nLists the folders in your **Sheets** folder. The list contains an abbreviated Folder object for each folder.\n",
        "tags": [
          "home"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "home-list-folders",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Folder objects.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Folder"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Folder> folders = smartsheet.HomeResources.FolderResources.ListFolders(\n  null                    // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/home/folders \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Folder> folders = smartsheet.homeResources().folderResources().listFolders(\n        null            // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.home.listFolders()\n  .then(function(folderList) {\n    console.log(folderList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  })\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Home.list_folders(include_all=True)\nhome_sheets_folders = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Home.list_folders(\n  page_size=5,\n  page=1)\npages = response.total_pages\nfolders = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create Folder",
        "deprecated": true,
        "description": "> **Deprecated** since March 25, 2025, and will be removed. To adapt to this change, please see [Migrate from using the Sheets folder](/api/smartsheet/guides/updating-code/migrate-from-using-the-sheets-folder).\n\nCreates a new folder.\n",
        "operationId": "create-home-folder",
        "tags": [
          "home"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "Folder to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Folder"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Folder object for newly created folder.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/Folder"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set folder name\nFolder folderSpecification = new Folder { Name = \"New folder\" };\n\n// Create folder in \"Sheets\" folder (Home)\nFolder newFolder = smartsheet.HomeResources.FolderResources.CreateFolder(folderSpecification);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/home/folders \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\": \"New folder\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set folder name\nFolder folderSpecification = new Folder();\nfolderSpecification.setName(\"New Folder\");\n\n// Create folder in \"Sheets\" folder (Home)\nFolder newFolder = smartsheet.homeResources().folderResources().createFolder(folderSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set folder name\nvar folder = {\n  \"name\": \"New folder\"\n};\n\n// Set options\nvar options = {\n  body: folder\n};\n\n// Create folder in \"Sheets\" folder (Home)\nsmartsheet.home.createFolder(options)\n  .then(function(newFolder) {\n    console.log(newFolder);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "new_folder = smartsheet_client.Home.create_folder('New Folder')\n"
          }
        ]
      }
    },
    "/imageurls": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        }
      ],
      "post": {
        "operationId": "listImageUrls",
        "summary": "List Image URLs",
        "description": "Posts an array of Image Url objects that can be used to retrieve the specified cell images.",
        "tags": [
          "cellImages"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ImageUrl"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ImageUrlMap"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Build list of image urls\nImageUrl[] imageUrls = new ImageUrl[] { new ImageUrl { ImageId = \"jpbGklqdfZuL4Jw-kZhdZA\" } };\n\nstring temporaryUrl = smartsheet.ImageUrlResources.GetImageUrls(imageUrls).ImageUrls[0].Url;\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/imageurls \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"imageId\": \"e1znCxhuZo_soEJtUmmX_A\",\"height\":40,\"width\": 20},{\"imageId\": \"g2jdKdfhQa_abKJmPnhC_B\",\"height\":100,\"width\": 50}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Build list of image urls\nImageUrl imageUrl = new ImageUrl()\n        .setImageId(\"jpbGklqdfZuL4Jw-kZhdZA\");\n        List<ImageUrl> imageUrls = Arrays.asList(imageUrl);\n\n        String temporaryUrl = smartsheet.imageUrlResources().getImageUrls(imageUrls).getImageUrls().get(0).getUrl();\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  body: [{\n    imageId: \"jpbGklqdfZuL4Jw-kZhdZA\",\n    width: 256,\n    height: 256\n  }]\n};\n\n// List image URLs\nsmartsheet.images.listImageUrls(options)\n  .then(function(temporaryUrls) {\n    console.log(temporaryUrls);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "imageUrl = smartsheet.models.ImageUrl(\n  {\n    \"imageId\": 'jpbGklqdfZuL4Jw-kZhdZA',\n    \"height\": 256,\n    \"width\": 256\n  }\n)\n\nresponse = smartsheet_client.Images.get_image_urls([imageUrl])\nurl = response.image_urls[0].url\n"
          }
        ]
      }
    },
    "/reports": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "operationId": "getReports",
        "summary": "List Reports",
        "description": "List all Reports accessible to the user.",
        "tags": [
          "reports"
        ],
        "security": [
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/modifiedSince"
          }
        ],
        "responses": {
          "200": {
            "description": "Object containing an array of all accessible reports, referenced by their ID, name, access level, and summary report flag values.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of all accessible reports, referenced by their ID, name, access level, and summary report flag values.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "description": "The report's unique identifier.",
                                "example": 987654321
                              },
                              "name": {
                                "type": "string",
                                "description": "The report's name.",
                                "example": "Q2 Earnings"
                              },
                              "accessLevel": {
                                "$ref": "#/components/schemas/AccessLevel"
                              },
                              "permalink": {
                                "type": "string",
                                "description": "URL to the report in Smartsheet.",
                                "example": "https://app.smartsheet.com/reports/c8gJxw87cXpRCvCC5PPw6jFhFRrf5r8PxCrxvW21"
                              },
                              "isSummaryReport": {
                                "type": "boolean",
                                "description": "It is `true` if the report is a sheet summary; otherwise it is a row report."
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "PaginatedResult<Report> reports = smartsheet.ReportResources.ListReports(\n  null,               // PaginationParameters\n  null                // Nullable<DateTime> modifiedSince = null\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "PagedResult<Report> reports = smartsheet.reportResources().listReports(\n        null,               // PaginationParameters\n        null                // Date modifiedSince\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.reports.listReports()\n  .then(function(reportList) {\n    console.log(reportList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Reports.list_reports(include_all=True)\nreports = response.data\n"
          }
        ]
      }
    },
    "/reports/{reportId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Accept"
        },
        {
          "$ref": "#/components/parameters/accessApiLevel"
        },
        {
          "$ref": "#/components/parameters/reportId"
        }
      ],
      "get": {
        "summary": "Get Report",
        "description": "Gets a report based on the specified ID",
        "operationId": "getReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/reportInclude"
          },
          {
            "$ref": "#/components/parameters/reportExclude"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/reportLevel"
          }
        ],
        "tags": [
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The Report that was loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "The Report in Excel format"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "The Report in CSV format"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include', 'pageSize', and 'page' parameters\nReport report = smartsheet.ReportResources.GetReport(\n  4583173393803140,           // long reportId\n  null,                       // IEnumerable<ReportInclusion> include\n  null,                       // int pageSize\n  null                        // int page\n);\n\n// Sample 2: Specify 'include' parameter with value of \"ATTACHMENTS\" and \"DISCUSSIONS\", 'pageSize' parameter with value of \"500\", and 'page' of value \"2\"\nReport report = smartsheet.ReportResources.GetReport(\n  4583173393803140,           // long reportId\n  new ReportInclusion[] {\n    ReportInclusion.ATTACHMENTS,\n    ReportInclusion.DISCUSSIONS\n  },\n  500,                        // int pageSize\n  2                           // int page\n);\n\n// Sample 3: Get report as Excel\nsmartsheet.ReportResources.GetReportAsExcel(\n  3882962191181700,               // long reportId\n  outputStream                    // BinaryWriter\n);\n\n// Sample 4: Get report as CSV\nsmartsheet.ReportResources.GetReportAsCSV(\n  3882962191181700,           // long reportId\n  outputStream                // BinaryWriter\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "// Sample 1: Get report\ncurl https://api.smartsheet.com/2.0/reports/{reportId}?level=3&include=objectValue \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n\n// Sample 2: Get report as Excel\ncurl https://api.smartsheet.com/2.0/reports/{reportId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Accept: application/vnd.ms-excel\" \\\n-o output.xlsx\n\n// Sample 3: Get report as CSV\ncurl https://api.smartsheet.com/2.0/reports/{reportId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Accept: text/csv\" \\\n-o output.csv\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include', 'pageSize', and 'page' parameters\nReport report = smartsheet.reportResources().getReport(\n        4583173393803140L,      // long reportId\n        null,                   // EnumSet<ReportInclusion> includes\n        null,                   // int pageSize\n        null                    // int page\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"ATTACHMENTS\" and \"DISCUSSIONS\", 'pageSize' parameter with value of \"500\", and 'page' of value \"2\"\nReport report = smartsheet.reportResources().getReport(\n        4583173393803140L,      // long reportId\n        EnumSet.of(\n            ReportInclusion.ATTACHMENTS,\n            ReportInclusion.DISCUSSIONS),\n        500,                    // int pageSize\n        2                       // int page\n        );\n\n// Sample 3: Get report as Excel\nsmartsheet.reportResources().getReportAsExcel(\n        3882962191181700L,       // long reportId\n        outputStream\n        );\n\n// Sample 4: Get report as CSV\nsmartsheet.reportResources().getReportAsCsv(\n        3882962191181700L,       // long reportId\n        outputStream\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Get report\n// Set options\nvar options = {\n  id: 4583173393803140 // Id of Report\n};\n\n// Get report\nsmartsheet.reports.getReport(options)\n  .then(function(report) {\n    console.log(report);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 2: Get report as Excel\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  id: 3882962191181700 // Id of Report\n};\n\n// Get sheet\nsmartsheet.reports.getReportAsExcel(options)\n  .then(function(fileContents) {\n    // Write report to file\n    fs.writeFile('output.xlsx', fileContents, 'binary', (err) => {\n      if (err) throw err;\n      console.log('The report has been saved!');\n    });\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 3: Get report as CSV\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  id: 3882962191181700 // Id of Report\n};\n\n// Get sheet\nsmartsheet.reports.getReportAsCSV(options)\n  .then(function(fileContents) {\n    // Write report to file\n    fs.writeFile('output.csv', fileContents, (err) => {\n      if (err) throw err;\n      console.log('The report has been saved!');\n    });\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get report\nreport = smartsheet_client.Reports.get_report(\n  4583173393803140)       # report_id\n\n# Sample 2: Get report as Excel\n# Download file with filename suggested by API\nsmartsheet_client.Reports.get_report_as_excel(\n  3882962191181700,       # report_id\n  download_folder_path\n)\n\n# Specify custom filename for the downloaded file\nsmartsheet_client.Reports.get_report_as_excel(\n  3882962191181700,       # report_id\n  download_folder_path,\n  'MyFileName.xslx'\n)\n\n# Sample 3: Get report as CSV\n# Download file with filename suggested by API\nsmartsheet_client.Reports.get_report_as_csv(\n  3882962191181700,       # report_id\n  download_folder_path\n)\n\n# Specify custom filename for the downloaded file\nsmartsheet_client.Reports.get_report_as_csv(\n  3882962191181700,       # report_id\n  download_folder_path,\n  'CallMeAl.csv'\n)\n"
          }
        ]
      }
    },
    "/reports/{reportId}/emails": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/reportId"
        }
      ],
      "post": {
        "summary": "Send report via email",
        "description": "Sends the report as a PDF attachment via email to the designated recipients",
        "operationId": "sendReportViaEmail",
        "tags": [
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SheetEmail"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify recipients\nRecipient[] recipientSpecification = new Recipient[] {\n  new Recipient { Email = \"john.doe@smartsheet.com\" },\n  new Recipient { GroupId = 2258118617917316 }\n};\n\n// Configure email\nSheetEmail sheetEmail = new SheetEmail {\n  SendTo = recipientSpecification,\n  Subject = \"Check this report out!\",\n  Message = \"Here is the report I mentioned in our meeting\",\n  CcMe = false,\n  Format = SheetEmailFormat.PDF,\n  FormatDetails = new FormatDetails { PaperSize = PaperSize.A4 }\n};\n\n// Send report via email\nsmartsheet.ReportResources.SendReport (8130994621441924, sheetEmail);       // long reportId\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports/{reportId}/emails \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"sendTo\" : [{\"email\": \"john.doe@smartsheet.com\"}, {\"groupId\": 2258118617917316}], \"subject\": \"Check these rows out!\", \"message\": \"Here are the rows I mentioned in our meeting\", \"ccMe\": false, \"format\": \"PDF\", \"formatDetails\": {\"paperSize\": \"A4\"}}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify an individual recipient\nRecipientEmail recipientEmail = new RecipientEmail()\n        .setEmail(\"john.doe@smartsheet.com\");\n\n// Specify a group recipient\nRecipientGroup recipientGroup = new RecipientGroup()\n        .setGroupId(2258118617917316L);\n\n// Set recipients\nList<Recipient> recipientList = Arrays.asList(\n        recipientEmail,\n        recipientGroup\n        );\n\n// Set format details\nFormatDetails formatDetails = new FormatDetails()\n        .setPaperSize(PaperSize.A0);\n\n// Configure email\nSheetEmail emailSpecification = new SheetEmail();\nemailSpecification.setFormat(SheetEmailFormat.PDF);\nemailSpecification.setFormatDetails(formatDetails)\n        .setSendTo(recipientList)\n        .setSubject(\"Check this report out!\")\n        .setMessage(\"Here is the report I mentioned in our meeting\")\n        .setCcMe(false);\n\n// Send report via email\nsmartsheet.reportResources().sendReport(\n        8130994621441924L,      // long reportId\n        emailSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Configure email\nvar email = {\n  \"sendTo\": [\n    {\n      \"email\": \"john.doe@smartsheet.com\"\n    },\n    {\n      \"groupId\": 2258118617917316\n    }\n  ],\n  \"subject\": \"Check these rows out!\",\n  \"message\": \"Here are the rows I mentioned in our meeting\",\n  \"ccMe\": false,\n  \"format\": \"PDF\",\n  \"formatDetails\": {\n    \"paperSize\": \"A4\"\n  }\n};\n\n// Set options\nvar options = {\n  body: email,\n  reportId: 8130994621441924\n};\n\n// Send report via email\nsmartsheet.reports.sendReportViaEmail(options)\n  .then(function(data) {\n    console.log(data);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Reports.send_report(\n  8130994621441924,       # report_id\n  smartsheet.models.SheetEmail({\n    'send_to': smartsheet.models.Recipient({\n      'email': 'john.doe@smartsheet.com'\n    }),\n    'subject': 'Check this report out!',\n    'message': 'Here is the report I mentioned in our meeting.',\n    'cc_me': False,\n    'format': 'PDF',\n    'format_details': smartsheet.models.FormatDetails({\n      'paper_size': 'A4'\n    })\n  })\n)\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Result Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}/publish": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/reportId"
        }
      ],
      "get": {
        "summary": "Gets a Report's publish settings",
        "description": "Get a Report's publish settings based on the specified ID",
        "operationId": "getReportPublish",
        "tags": [
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The Report's publish settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportPublish"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.ReportResources.GetPublishStatus(\n  3901932860401540    // reportId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports/{reportId}/publish \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.reportResources().getPublishStatus(\n        3901932860401540L    // reportId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  reportId: 3901932860401540\n};\n\n// Get report publish status\nsmartsheet.reports.getReportPublishStatus(options)\n  .then(function(status) {\n    console.log(status);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "status = smartsheet_client.Reports.get_publish_status(\n  1653067851556740)       # report_id\n"
          }
        ]
      },
      "put": {
        "summary": "Set a Report's publish status",
        "description": "Sets the publish status of the report and returns the new status, including the URL of any enabled publishing.",
        "operationId": "SetReportPublish",
        "tags": [
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPublish"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ReportPublish object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ItemResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/ReportPublish"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "ReportPublish reportPublish = new ReportPublish();\nreportPublish.ReadOnlyFullEnabled = true;\nreportPublish.ReadOnlyFullAccessibleBy = \"ALL\";\nsmartsheet.ReportResources.UpdatePublishStatus(\n  1653087851556740,    // reportId\n  reportPublish\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports/{reportId}/publish \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"readOnlyFullEnabled\": true, \"readOnlyFullAccessibleBy\": \"ORG\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "ReportPublish reportPublish = new ReportPublish();\nreportPublish.setReadOnlyFullEnabled(true);\nreportPublish.setReadOnlyFullAccessibleBy(\"ALL\");\nsmartsheet.reportResources().updatePublishStatus(\n        1653087851556740L,    // reportId\n        reportPublish\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  reportId: 1653087851556740,\n  body: {\n    readOnlyFullEnabled: true,\n    readOnlyFullAccessibleBy: \"ALL\"\n  }\n};\n\n// Set report publish status\nsmartsheet.reports.setReportPublishStatus(options)\n  .then(function(status) {\n    console.log(status);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Reports.set_publish_status(\n  1653067851556740,       # report_id\n  smartsheet.models.ReportPublish({\n    'read_only_full_enabled': True\n  })\n)\n"
          }
        ]
      }
    },
    "/reports/{reportId}/shares": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/reportId"
        }
      ],
      "post": {
        "summary": "Share Report",
        "description": "Shares a Report with the specified users and groups.",
        "operationId": "share-report",
        "tags": [
          "sharing",
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sendEmail"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Share"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Share"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing either a single Share object or an array of Share objects, corresponding\nto what was specified in the request. All shares have scope=ITEM.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/Share"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Share"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "If called with a single Share object, and that user or group share already exists, error code 1025 is returned.\nIf called with an array of Share objects, and one or more user or group shares in the array already exist,\nthey are ignored and omitted from the response.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify share (to one user as Editor)\nShare[] shareSpecification = new Share[] { new Share\n  {\n    Email = \"jane.doe@smartsheet.com\",\n    AccessLevel = AccessLevel.EDITOR\n  }\n};\n\n// Share report\nIList<Share> addressList = smartsheet.ReportResources.ShareResources.ShareTo(\n  665829219035012,            // long reportId\n  shareSpecification,\n  true                        // Nullable<bool> sendEmail\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/reports/{reportId}/shares?sendEmail=true' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"email\": \"jane.doe@smartsheet.com\", \"accessLevel\": \"EDITOR\"}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify share (to one user as Editor)\nShare shareSpecification = new Share()\n        .setEmail(\"jane.doe@smartsheet.com\")\n        .setAccessLevel(AccessLevel.EDITOR);\n\n// Share report\nList<Share> addressList = smartsheet.reportResources().shareResources().shareTo(\n        665829219035012L,        // long reportId\n        Arrays.asList(shareSpecification),\n        true                     // Boolean sendEmail\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify share (to one user as Editor)\nvar share = [\n  {\n    \"email\": \"jane.doe@smartsheet.com\",\n    \"accessLevel\": \"EDITOR\"\n  }\n];\n\n// Set options\nvar options = {\n  reportId: 665829219035012,\n  body: share\n  };\n\n// Share report\nsmartsheet.reports.share(options)\n  .then(function(addressList) {\n    console.log(addressList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Reports.share_report(\n  665829219035012,        # report_id\n  smartsheet.models.Share({\n    'access_level': 'EDITOR',\n    'email': 'jane.doe@smartsheet.com'\n  })\n)\n"
          }
        ]
      },
      "get": {
        "summary": "List Report Shares",
        "description": "Gets a list of all users and groups to whom the specified Report is shared, and their access level.\nThis operation supports query string parameters for pagination of results.\n",
        "operationId": "list-report-shares",
        "tags": [
          "sharing",
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharingInclude"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Share objects. By default, this operation returns only item-level shares (scope=ITEM). Use the sharingInclude parameter to request that workspace-level shares (include=workspaceShares) also be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Share> shares = smartsheet.ReportResources.ShareResources.ListShares(\n  665829219035012,        // long reportId\n  null,                   // PaginationParameters\n  null                    // ShareScope shareScope\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports/{reportId}/shares \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Share> shares = smartsheet.reportResources().shareResources().listShares(\n        665829219035012L,        // long reportId\n        null,                    // PaginationParameters\n        true                     // Boolean includeWorkspaceShares\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  reportId: 665829219035012\n};\n\n// List report shares\nsmartsheet.reports.listShares(options)\n  .then(function(shareList) {\n    console.log(shareList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Reports.list_shares(include_all=True)\nshares = response.result\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Reports.list_shares(\n  page_size=10,\n  page=1)\npages = response.total_pages\nshares = response.result\n"
          }
        ]
      }
    },
    "/reports/{reportId}/shares/{shareId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/reportId"
        },
        {
          "$ref": "#/components/parameters/shareId"
        },
        {
          "$ref": "#/components/parameters/accessApiLevel"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Report Share",
        "description": "Gets the share specified in the URL.",
        "operationId": "share-report-get",
        "tags": [
          "sharing",
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Share object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Share"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Share share = smartsheet.ReportResources.ShareResources.GetShare(\n  6932724448552836,               // long reportId\n  \"AQAISF82FOeE\"                  // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Share share = smartsheet.reportResources().shareResources().getShare(\n        665829219035012L,        // long reportId\n        \"AAAQSF82F1eE\"           // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  reportId: 6932724448552836,\n  shareId: \"AQAISF82FOeE\"\n};\n\n// Get report share\nsmartsheet.reports.getShare(options)\n  .then(function(share) {\n    console.log(share);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "share = smartsheet_client.Reports.get_share(\n  6932724448552836,       # report_id\n  'AAAQSF82F1eE')         # share_id\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Report Share",
        "description": "Deletes the share specified in the URL.",
        "operationId": "delete-report-share",
        "tags": [
          "sharing",
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.ReportResources.ShareResources.DeleteShare(\n  665829219035012,            // long reportId\n  \"AAAQSF82F1eE\"              // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.reportResources().shareResources().deleteShare(\n        665829219035012L,        // long reportId\n        \"AAAQSF82F1eE\"           // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  reportId: 665829219035012,\n  shareId: \"AAAQSF82F1eE\"\n};\n\n// Delete report share\nsmartsheet.reports.deleteShare(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Reports.delete_share(\n  665829219035012,        # report_id\n  'AAAQSF82F1eE')         # share_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Report Share",
        "description": "Updates the access level of a user or group for the specified report.",
        "operationId": "update-report-share",
        "tags": [
          "sharing",
          "reports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessLevel": {
                    "$ref": "#/components/schemas/AccessLevel"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the modified Share object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "object",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set the access level to Viewer\nShare shareSpecification = new Share\n{\n  Id = \"AAAFeF82FOeE\",\n  AccessLevel = AccessLevel.VIEWER\n};\n\n// Update report share\nShare updatedShare = smartsheet.ReportResources.ShareResources.UpdateShare(\n  665829219035012,            // long reportId\n  shareSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/reports/{reportId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"accessLevel\": \"VIEWER\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set the access level to Viewer\nShare shareSpecification = new Share();\n        shareSpecification.setAccessLevel(AccessLevel.VIEWER)\n        .setId(\"AAAFeF82FOeE\");   // string shareId\n\n// Update report share\nShare updatedShare = smartsheet.reportResources().shareResources().updateShare(\n        665829219035012L,                   // long reportId\n        shareSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set the access level to Viewer\nvar share = {\"accessLevel\": \"VIEWER\"};\n\n// Set options\nvar options = {\n  reportId: 665829219035012,\n  shareId: \"AAAFeF82FOeE\",\n  body: share\n  };\n\n// Update report share\nsmartsheet.reports.updateShare(options)\n  .then(function(updatedShare) {\n    console.log(updatedShare);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_share = smartsheet_client.Reports.update_share(\n  665829219035012,        # report_id\n  'AAAFeF82FOeE',         # share_id\n  smartsheet.models.Share({\n    'access_level': 'VIEWER'\n  })\n)\n"
          }
        ]
      }
    },
    "/search": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Search Everything",
        "description": "Searches all sheets that the user can access, for the specified text. If you have not used the public API in a while, we will need to provision your data. This could take up to 24 hours so please check back later!",
        "tags": [
          "search"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "list-search",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/location"
          },
          {
            "$ref": "#/components/parameters/modifiedSince"
          },
          {
            "$ref": "#/components/parameters/parameters-include"
          },
          {
            "$ref": "#/components/parameters/scopes"
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResult object that contains an array of Search objects (maximum 100).",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SearchResult"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set search criteria\nstring query = \"stuff\";\n\n// Search everything\nSearchResult results = smartsheet.SearchResources.Search(query);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/search?query=stuff' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set search criteria\nString query = \"stuff\";\n\n// Search everything\nSearchResult results = smartsheet.searchResources().search(query);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  query: \"stuff\"\n};\n\n// Search everything\nsmartsheet.search.searchAll(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Set search criteria\nquery = 'stuff'\n\n# Search everything\nresult = smartsheet_client.Search.search(query)\n# result is a smartsheet.models.SearchResult object\n"
          }
        ]
      }
    },
    "/search/sheets/{sheetId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Search Sheet",
        "description": "Gets a list of the user's search results in a sheet based on query. The list contains an abbreviated row object for each search result in a sheet. If you have not used the public API in a while, we will need to provision your data. This could take up to 24 hours so please check back later! *Note* Newly created or recently updated data may not be immediately discoverable via search.",
        "tags": [
          "search"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "list-search-sheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResult object containing an array of SearchResultItem objects in a sheet (maximum 100)",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SearchResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SearchResultItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/serverinfo": {
      "get": {
        "summary": "Gets application constants.",
        "description": "Gets application constants.",
        "operationId": "serverinfo-get",
        "tags": [
          "serverInfo"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerInfo"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "ServerInfo serverInfo = smartsheet.ServerInfoResources.GetServerInfo();\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/serverinfo\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "ServerInfo serverInfo = smartsheet.serverInfoResources().getServerInfo();\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.server.getInfo()\n  .then(function(serverInfo) {\n    console.log(serverInfo);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "info = smartsheet_client.Server.server_info()\n"
          }
        ]
      }
    },
    "/sheets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/accessApiLevel"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Sheets",
        "description": "Gets a list of all sheets that the user has access to. The list contains an abbreviated Sheet object for each sheet.\n",
        "operationId": "list-sheets",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sheetInclude"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/modifiedSince"
          },
          {
            "$ref": "#/components/parameters/numericDates"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/schemas-Sheet"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nPaginatedResult<Sheet> sheets = smartsheet.SheetResources.ListSheets(\n  null,               // IEnumerable<SheetInclusion> includes\n  null,               // PaginationParameters\n  null                // Nullable<DateTime> modifiedSince\n);\n\n// Sample 2: Specify 'include' parameter with value of \"SOURCE\", and 'includeAll' parameter with value of 'true'\nPaginatedResult<Sheet> sheets = smartsheet.SheetResources.ListSheets(\n  new SheetInclusion[] { SheetInclusion.SOURCE },\n  new PaginationParameters(\n    true,           // includeAll\n    null,           // int pageSize\n    null)           // int page\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nPagedResult<Sheet> sheets = smartsheet.sheetResources().listSheets(\n        null,           // EnumSet<SourceInclusion> includes\n        null,           // PaginationParameters\n        null            // Date modifiedSince\n        );\n\n// Sample 2: Specify pagination parameter 'includeAll'\nPaginationParameters parameters = new PaginationParameters()\n        .setIncludeAll(true);\n\n// Specify 'include' parameter with value of \"SOURCE\", and 'includeAll' parameter with value of 'true'\nPagedResult<Sheet> sheets = smartsheet.sheetResources().listSheets(EnumSet.of(SourceInclusion.SOURCE), parameters, modifiedSince);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.sheets.listSheets()\n  .then(function(sheetList) {\n    console.log(sheetList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresponse = smartsheet_client.Sheets.list_sheets(include_all=True)\nsheets = response.data\n\n# Sample 2: Paginate the list of sheets\nresponse = smartsheet_client.Sheets.list_sheets(\n  page_size=10,\n  page=1)\npages = response.total_pages\nsheets = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create Sheet in \"Sheets\" Folder",
        "deprecated": true,
        "description": "> **Deprecated** since March 25, 2025, and will be removed. To adapt to this change, please see [Migrate from using the Sheets folder](/api/smartsheet/guides/updating-code/migrate-from-using-the-sheets-folder).\n\nCreates a sheet from scratch or from the specified template in the user's\nSheets folder (Home).\n\nFor subfolders, use Create Sheet in Folder.\n",
        "operationId": "create-sheet-in-sheets-folder",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "requestBody": {
          "description": "Sheet to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SheetToCreate"
                  },
                  {
                    "$ref": "#/components/schemas/SheetToCreateFromTemplate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Sheet object for newly created sheet, corresponding to what was specified in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/SheetCreated"
                            },
                            {
                              "$ref": "#/components/schemas/SheetCreatedFromTemplate"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Create sheet\n// Specify properties of the first column\nColumn columnA = new Column\n{\n  Title = \"Favorite\",\n  Primary = false,\n  Type = ColumnType.CHECKBOX,\n  Symbol = Symbol.STAR\n};\n\n// Specify properties of the second column\nColumn columnB = new Column\n{\n  Title = \"Primary Column\",\n  Primary = true,\n  Type = ColumnType.TEXT_NUMBER\n};\n\n// Create sheet in \"Sheets\" folder (specifying the 2 columns to include in the sheet)\nSheet newSheet = smartsheet.SheetResources.CreateSheet(new Sheet\n{\n  Name = \"newsheet\",\n  Columns = new Column[] { columnA, columnB }\n}\n);\n\n// Sample 2: Create sheet from template\n// Specify name for the sheet and Id of the template\nSheet sheetSpecification = new Sheet\n{\n  Name = \"new sheet title\",\n  FromId = 7679398137620356     // template Id\n};\n\n// Option 1: Omit 'include' parameter\nSheet newSheet = smartsheet.SheetResources.CreateSheetFromTemplate(\n  sheetSpecification,\n  null                            // IEnumerable<TemplateInclusion> include\n);\n\n// Option 2: Include ATTACHMENTS, DATA, and DISCUSSIONS\nSheet newSheet = smartsheet.SheetResources.CreateSheetFromTemplate(\n  sheetSpecification,\n  new TemplateInclusion[] {\n    TemplateInclusion.ATTACHMENTS,\n    TemplateInclusion.DATA,\n    TemplateInclusion.DISCUSSIONS }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "// Sample 1: Create sheet\ncurl https://api.smartsheet.com/2.0/sheets \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\":\"newsheet\",\"columns\":[{\"title\":\"Favorite\",\"type\":\"CHECKBOX\",\"symbol\":\"STAR\"}, {\"title\":\"Primary Column\", \"primary\":true,\"type\":\"TEXT_NUMBER\"}]}'\n\n\n// Sample 2: Create sheet from template\ncurl 'https://api.smartsheet.com/2.0/sheets?include=data,attachments,discussions' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\":\"newsheet\", \"fromId\": templateId}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Create sheet\n// Specify properties of the first column\nColumn columnA = new Column()\n        .setTitle(\"Favorite\")\n        .setType(ColumnType.CHECKBOX)\n        .setSymbol(Symbol.STAR);\n\n// Specify properties of the second column\nColumn columnB = new Column()\n        .setTitle(\"Primary Column\")\n        .setType(ColumnType.TEXT_NUMBER)\n        .setPrimary(true);\n\n// Create sheet in \"Sheets\" folder (specifying the 2 columns to include in the sheet)\nSheet newSheet = new Sheet();\n        newSheet.setName(\"newsheet\");\n        newSheet.setColumns(Arrays.asList(columnA, columnB));\n\nsmartsheet.sheetResources().createSheet(newSheet);\n\n// Sample 2: Create sheet from template\n// Specify name for the sheet and Id of the template\n        Sheet sheet = new Sheet();\n        sheet.setFromId(7679398137620356L);     // long templateId\n        sheet.setName(\"newsheet\");\n\n// Option 1: Omit 'include' parameter\n        Sheet results = smartsheet.sheetResources().createSheetFromTemplate(sheet,\n        null                                    // EnumSet<SheetTemplateInclusion> includes\n        );\n\n// Option 2: Include ATTACHMENTS, DATA, and DISCUSSIONS\n        Sheet results = smartsheet.sheetResources().createSheetFromTemplate(\n        sheet,\n        EnumSet.of(\n        SheetTemplateInclusion.ATTACHMENTS,\n        SheetTemplateInclusion.DATA,\n        SheetTemplateInclusion.DISCUSSIONS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Create sheet\n// Specify sheet properties\nvar sheet = {\n  \"name\": \"newsheet\",\n  \"columns\": [\n    {\n      \"title\": \"Favorite\",\n      \"type\": \"CHECKBOX\",\n      \"symbol\": \"STAR\"\n    },\n    {\n      \"title\": \"Primary Column\",\n      \"primary\": true,\n      \"type\": \"TEXT_NUMBER\"\n    }\n  ]\n};\n\n// Set options\nvar options = {\n  body: sheet\n};\n\n// Create sheet in \"Sheets\" folder\nsmartsheet.sheets.createSheet(options)\n  .then(function(newSheet) {\n    console.log(newSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 2: Create sheet from template\n// Specify the directive\nvar sheet = {\n  \"fromId\": 7679398137620356,\n  \"name\": \"newsheet\"\n  };\n\n// Set options\nvar options = {\n  body: sheet\n};\n\n// Create sheet from template\nsmartsheet.sheets.createSheetFromExisting(options)\n  .then(function(newSheet) {\n    console.log(newSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Create sheet\nsheet_spec = smartsheet.models.Sheet({\n  'name': 'newsheet',\n  'columns': [{\n      'title': 'Favorite',\n      'type': 'CHECKBOX',\n      'symbol': 'STAR'\n    }, {\n      'title': 'Primary Column',\n      'primary': True,\n      'type': 'TEXT_NUMBER'\n    }\n  ]\n})\nresponse = smartsheet_client.Home.create_sheet(sheet_spec)\nnew_sheet = response.result\n\n# Sample 2: Create sheet from template\nresponse = smartsheet_client.Home.create_sheet_from_template(\n  smartsheet.models.Sheet({\n    'name': 'newsheet',\n    'from_id': 7679398137620356     # template_id\n  })\n)\nnew_sheet = response.result\n"
          }
        ]
      }
    },
    "/sheets/import": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Import Sheet from CSV / XLSX",
        "deprecated": true,
        "description": "> **Deprecated** since March 25, 2025, and will be removed. To adapt to this change, please see [Migrate from using the Sheets folder](/api/smartsheet/guides/updating-code/migrate-from-using-the-sheets-folder).\n\nImports CSV or XLSX data into a new sheet in the top-level \"Sheets\" folder.\n\nNote the following:\n\n* Both sheetName and the file name must use ASCII characters.\n\n* The source data must be basic text. To include rich formula data, import\nand create a sheet first, and then use Update Rows. To work with images, see\nCell Images.\n\n* XLS is not supported. You must use XLSX.\n\n* Hierarchical relationships between rows in an external file won't import.\n",
        "operationId": "import-sheet-into-sheets-folder",
        "tags": [
          "imports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Disposition"
          },
          {
            "$ref": "#/components/parameters/parameters-Content-Type"
          },
          {
            "$ref": "#/components/parameters/sheetName"
          },
          {
            "$ref": "#/components/parameters/headerRowIndex"
          },
          {
            "$ref": "#/components/parameters/primaryColumnIndex"
          }
        ],
        "requestBody": {
          "description": "Binary content for the CSV / XLSX file.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Sheet object for imported sheet.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SheetImported"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Sheet sheet = smartsheet.SheetResources.ImportXlsSheet(\n  \"D:/ProgressReport.xlsx\",\n  null,         // sheetName defaults to file name unless specified\n  0,            // headerRowIndex\n  null          // primaryColumnIndex\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl  https://api.smartsheet.com/2.0/sheets/import?sheetName=MarketingProgressReport&headerRowIndex=0&primaryColumnIndex=0 \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Disposition: attachment\" \\\n-H \"Content-Type: text/csv\" \\\n-X POST \\\n--data-binary @ProgressReport.csv\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Sheet sheet = smartsheet.sheetResources().importXlsx(\n        \"D:/ProgressReport.xlsx\",\n        \"MarketingProgressReport\",\n        0,      // headerRowIndex\n        0       // primaryColumnIndex\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Import sheet from CSV\n// Set options\nvar options = {\n  queryParameters: {\n      sheetName: 'MarketingProgressReport'\n  },\n  path: \"D:/ProgressReport.csv\"\n};\n\n// Import CSV as sheet\nsmartsheet.sheets.importCsvSheet(options)\n  .then(function(attachment) {\n      console.log(attachment);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n\n// Sample 2: Import sheet from XLSX\n// Set options\nvar options = {\n  queryParameters: {\n    sheetName: 'MarketingProgressReport'\n  },\n  path: \"D:/ProgressReport.xlsx\"\n};\n\n// Import XLSX as sheet\nsmartsheet.sheets.importXlsxSheet(options)\n  .then(function(attachment) {\n    console.log(attachment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "imported_sheet = smartsheet_client.Sheets.import_xlsx_sheet(\n  'D:/ProgressReport.xlsx',\n  'MarketingProgressReport',  # sheet_name\n  header_row_index=0\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/sheetId"
        }
      ],
      "get": {
        "summary": "Get Sheet",
        "description": "Gets a sheet in the format specified, based on the sheet Id.",
        "operationId": "getSheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/parameters-sheetInclude"
          },
          {
            "$ref": "#/components/parameters/sheetExclude"
          },
          {
            "$ref": "#/components/parameters/sheetColumnIds"
          },
          {
            "$ref": "#/components/parameters/sheetFilterId"
          },
          {
            "$ref": "#/components/parameters/sheetIfVersionAfter"
          },
          {
            "$ref": "#/components/parameters/sheetLevel"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/paperSize"
          },
          {
            "$ref": "#/components/parameters/sheetRowIds"
          },
          {
            "$ref": "#/components/parameters/sheetRowNumbers"
          },
          {
            "$ref": "#/components/parameters/sheetRowsModifiedSince"
          }
        ],
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The Sheet that was loaded.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Sheet"
                    },
                    {
                      "$ref": "#/components/schemas/SheetVersion"
                    }
                  ]
                }
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "The Sheet in PDF format."
                }
              },
              "application/vnd.ms-excel": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "The Sheet in Excel format."
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "The Sheet in CSV format."
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Get sheet\n// Omit all parameters\nSheet sheet = smartsheet.SheetResources.GetSheet(\n  4583173393803140,           // sheetId\n  null,                       // IEnumerable<SheetLevelInclusion> includes\n  null,                       // IEnumerable<SheetLevelExclusion> excludes\n  null,                       // IEnumerable<long> rowIds\n  null,                       // IEnumerable<int> rowNumbers\n  null,                       // IEnumerable<long> columnIds\n  null,                       // Nullable<long> pageSize\n  null                        // Nullable<long> page\n);\n\n// Sample 2: Get sheet as Excel\nsmartsheet.SheetResources.GetSheetAsExcel(\n  4583173393803140,           // sheetId\n  outputStream\n);\n\n// Sample 3: Get sheet as PDF\nsmartsheet.SheetResources.GetSheetAsPDF(\n  4583173393803140,               // sheetId\n  outputStream,\n  PaperSize.A1\n);\n\n// Sample 4: Get sheet as CSV\nsmartsheet.SheetResources.GetSheetAsCSV(\n  4583173393803140,               // sheetId\n  outputStream\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "// Sample 1: Get sheet\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}?level=2&include=objectValue \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n\n// Sample 2: Get sheet as Excel\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Accept: application/vnd.ms-excel\" \\\n-o output.xlsx\n\n// Sample 3: Get sheet as PDF\ncurl 'https://api.smartsheet.com/2.0/sheets/{sheetId}?paperSize=A1' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Accept: application/pdf\"\n-o  output.pdf\n\n// Sample 4: Get sheet as CSV\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Accept: text/csv\" \\\n-o output.csv\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Get sheet\n// Omit all parameters\nSheet sheet = smartsheet.sheetResources().getSheet(\n        4583173393803140L,      // long sheetId\n        null,                   // EnumSet<SheetInclusion> includes\n        null,                   // EnumSet<ObjectExclusion> excludes\n        null,                   // Set<Long> rowIds\n        null,                   // Set<Integer> rowNumbers\n        null,                   // Set<Long> columnIds\n        null,                   // Integer pageSize\n        null                    // Integer page\n        );\n\n// Sample 2: Get sheet as Excel\nsmartsheet.sheetResources().getSheetAsExcel(\n        4583173393803140L,       // long sheetId\n        outputStream\n        );\n\n// Sample 3: Get sheet as PDF\nsmartsheet.sheetResources().getSheetAsPDF(\n        4583173393803140L,       // long sheetId\n        outputStream,\n        PaperSize.A1\n        );\n\n// Sample 4: Get sheet as CSV\nsmartsheet.sheetResources().getSheetAsCSV(\n        4583173393803140L,       // long sheetId\n        outputStream\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Get sheet\n// Set options\nvar options = {\n  id: 4583173393803140 // Id of Sheet\n};\n\n// Get sheet\nsmartsheet.sheets.getSheet(options)\n  .then(function(sheetInfo) {\n    console.log(sheetInfo);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 2: Get sheet as Excel\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  id: 169681224483716 // Id of Sheet\n};\n\n// Get sheet\nsmartsheet.sheets.getSheetAsExcel(options)\n  .then(function(fileContents) {\n    // Write sheet to file\n    fs.writeFile('output.xlsx', fileContents, 'binary', (err) => {\n      if (err) throw err;\n      console.log('The sheet has been saved!');\n    });\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 3: Get sheet as PDF\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  id: 169681224483716 // Id of Sheet\n};\n\n// Get sheet\nsmartsheet.sheets.getSheetAsPDF(options)\n  .then(function(fileContents) {\n    // Write sheet to file\n    fs.writeFile('output.pdf', fileContents, 'binary', (err) => {\n      if (err) throw err;\n      console.log('The sheet has been saved!');\n    });\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 4: Get sheet as CSV\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  id: 4583173393803140 // Id of Sheet\n};\n\n// Get sheet\nsmartsheet.sheets.getSheetAsCSV(options)\n  .then(function(fileContents) {\n    // Write sheet to file\n    fs.writeFile('output.csv', fileContents, (err) => {\n      if (err) throw err;\n      console.log('The sheet has been saved!');\n    });\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get sheet\nsheet = smartsheet_client.Sheets.get_sheet(\n  4583173393803140)           # sheet_id\n\n# Sample 2: Get sheet as Excel\nsmartsheet_client.Sheets.get_sheet_as_excel(\n  1531988831168388,           # sheet_id\n  download_directory_path)\n\n# Sample 3: Get sheet as PDF\nsmartsheet_client.Sheets.get_sheet_as_pdf(\n  1531988831168388,           # sheet_id\n  download_directory_path,\n  'A1')                       # paperSize\n\n# Sample 4: Get sheet as CSV\nsmartsheet_client.Sheets.get_sheet_as_csv(\n  1531988831168388,           # sheet_id\n  download_directory_path)\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Sheet",
        "description": "Deletes the sheet specified in the URL.",
        "operationId": "deleteSheet",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "DELETE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResult"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.DeleteSheet(\n  1531988831168388            // sheetId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().deleteSheet(\n        1531988831168388L        // long sheetId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  id: 1531988831168388 // Id of Sheet\n};\n\n// Delete sheet\nsmartsheet.sheets.deleteSheet(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.delete_sheet(\n  1531988831168388)       # sheet_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Sheet",
        "description": "Updates the sheet specified in the URL.\nTo modify sheet contents, see [Add Rows](/api/smartsheet/openapi/rows/rows-addtosheet), [Update Rows](/api/smartsheet/openapi/rows/update-rows), [Add Columns](/api/smartsheet/openapi/columns/columns-addtosheet), and [Update Column](/api/smartsheet/openapi/columns/column-updatecolumn).\nThis operation can be used to update an individual user's sheet settings. If the request body contains only the **userSettings** attribute, this operation may be performed even if the user only has read-only access to the sheet (for example, the user has viewer permissions or the sheet is read-only).",
        "operationId": "updateSheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          }
        ],
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "description": "[Sheet object](/api/smartsheet/openapi/sheets/sheet) limited to the following attributes:\n* **name** (optional).\n* **projectSettings** (optional): [ProjectSettings object](/api/smartsheet/openapi/schemas/projectsettings), containing at least one of the **projectSettings** attributes, for updating this sheet's project settings and dependencies.\n* **userSettings** (optional): [SheetUserSettings object](/api/smartsheet/openapi/schemas/sheetusersettings) for updating these user's settings for the sheet.\nNOTE:\n* Attributes not specified in **projectSettings** are not updated.\n* If **projectSettings.nonWorkingDays** is specified as an empty array, all non-working days are removed from the project sheet.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSheet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns [Result object](/api/smartsheet/openapi/schemas/result) containing a [Sheet object](/api/smartsheet/openapi/sheets/sheet) for the updated sheet.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Sheet"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify updated sheet properties\nSheet sheetSpecification = new Sheet\n{\n  Id = 4583173393803140,\n  Name = \"New Sheet Name\",\n  UserSettings = new SheetUserSettings{CriticalPathEnabled = true}\n};\n\n// Update sheet\nSheet updatedSheet = smartsheet.SheetResources.UpdateSheet(sheetSpecification);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"name\":\"New Sheet Name\",\n  \"userSettings\": {\"criticalPathEnabled\": true},\n  \"projectSettings\":{\n    \"workingDays\": [\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\"],\n    \"nonWorkingDays\": [\"2018-01-01\"],\n    \"lengthOfDay\": 6\n  } \\\n}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify updated sheet properties\nSheet sheetSpecification = new Sheet();\nsheetSpecification.setUserSettings(new SheetUserSettings().setCriticalPathEnabled(true))\n        .setName(\"New Sheet Name\")\n        .setId(7960873114331012L);\n\n// Update sheet\nSheet updatedSheet = smartsheet.sheetResources().updateSheet(sheetSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify updated sheet properties\nvar sheet = {\n  \"name\": \"New Sheet Name\",\n  \"userSettings\": {\n    \"criticalPathEnabled\": true,\n  }\n};\n\n// Set options\nvar options = {\n  id: 7960873114331012, // Id of Sheet\n  body: sheet\n  };\n\n// Update sheet\nsmartsheet.sheets.updateSheet(options)\n  .then(function(updatedSheet) {\n    console.log(updatedSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_sheet = smartsheet_client.Sheets.update_sheet(\n  4583173393803140,       # sheet_id\n  smartsheet.models.Sheet({\n    'name': 'New Sheet Name',\n    'user_settings': smartsheet.models.SheetUserSettings({\n      'critical_path_enabled': True\n    })\n  })\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Attachments",
        "description": "Gets a list of all attachments that are on the sheet, including sheet, row, and discussion-level attachments.\n",
        "operationId": "attachments-listOnSheet",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of attachments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Attachment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Attachment> attachments = smartsheet.SheetResources.AttachmentResources.ListAttachments(\n  9283173393803140,           // sheetId\n  null                        // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination\nPagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().listAttachments(\n        9283173393803140L,               // long sheetId\n        null                             // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140\n};\n\n// List attachments\nsmartsheet.sheets.listAttachments(options)\n  .then(function(attachmentsList) {\n    console.log(attachmentsList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresponse = smartsheet_client.Attachments.list_all_attachments(\n  9283173393803140,       # sheet_id\n  include_all=True)\nattachments = response.data\n\n# Sample 2: Paginate the list of attachments\nresponse = smartsheet_client.Attachments.list_all_attachments(\n  9283173393803140,       # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nattachments = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Attach File or URL to Sheet",
        "description": "Attaches a file to the sheet. The URL can be any of the following:\n\n* Normal URL (attachmentType \"LINK\")\n* Box.com URL (attachmentType \"BOX_COM\")\n* Dropbox URL (attachmentType \"DROPBOX\")\n* Egnyte URL (attachmentType \"EGNYTE\")\n* Evernote URL (attachmentType \"EVERNOTE\")\n* Google Drive URL (attachmentType \"GOOGLE_DRIVE\")\n* OneDrive URL (attachmentType \"ONEDRIVE\")\n\n>**Important:** Smartsheet Gov allows only the following attachment types:\n> - BOX_COM\n> - FILE\n> - GOOGLE_DRIVE\n> - LINK\n> - ONEDRIVEß\n\nFor multipart uploads please use \"multipart/form-data\" content type.\n",
        "operationId": "attachments-attachToSheet",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/URLAttachmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Attachment"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Attachment attachment = smartsheet.SheetResources.AttachmentResources.AttachFile(\n  9283173393803140,           // sheetId\n  filePath,\n  \"application/msword\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/msword\" \\\n-H 'Content-Disposition: attachment; filename=\"ProgressReport.docx\"' \\\n-H \"Content-Length: FILE_SIZE\" \\\n-X POST \\\n--data-binary @ProgressReport.docx\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify file to be attached\nFile file = new File(\"/Users/jdoe/Documents/ProgressReport.docx\");\n\n// Attach file to sheet\n        Attachment attachment = smartsheet.sheetResources().attachmentResources().attachFile(\n        9283173393803140L,       // long sheetId\n        file,\n        \"application/msword\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Enable FileStream\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  sheetId: 1694401624483716,\n  fileSize: 20765,\n  fileName: \"ProgressReport.docx\",\n  fileStream: fs.createReadStream(\"/Users/jdoe/Documents/ProgressReport.docx\")\n};\n\n// Attach file to sheet\nsmartsheet.sheets.addFileAttachment(options)\n  .then(function(attachment) {\n      console.log(attachment);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_attachment = smartsheet_client.Attachments.attach_file_to_sheet(\n  9283173393803140,       # sheet_id\n  ('ProgressReport.docx',\n    open('/path/to/ProgressReport.docx', 'rb'),\n    'application/msword')\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/attachments/{attachmentId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/attachmentId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Attachment",
        "description": "Fetches a temporary URL that allows you to download an attachment. The urlExpiresInMillis attribute tells you how long the URL is valid.\n",
        "operationId": "attachments-get",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Attachment"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Attachment attachment = smartsheet.SheetResources.AttachmentResources.GetAttachment(\n  9283173393803140,               // sheetId\n  4583173393803140                // attachmentId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Attachment attachment = smartsheet.sheetResources().attachmentResources().getAttachment(\n        9283173393803140L,       // long sheetId\n        4583173393803140L        // long attachmentId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140,\n  attachmentId: 4583173393803140\n};\n\n// Get attachment\nsmartsheet.sheets.getAttachment(options)\n  .then(function(attachment) {\n      console.log(attachment);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "attachment = smartsheet_client.Attachments.get_attachment(\n  9283173393803140,       # sheet_id\n  4583173393803140)       # attachment_id\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Attachment",
        "description": "Deletes the attachment specified in the URL.\n",
        "operationId": "attachments-delete",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.AttachmentResources.DeleteAttachment(\n  9283173393803140,           // sheetId\n  7169782752536452            // attachmentId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().attachmentResources().deleteAttachment(\n        9283173393803140L,       // long sheetId\n        7169782752536452L        // sheetAttachmentId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  attachmentId: 7169782752536452,\n};\n\n// Delete attachment\nsmartsheet.sheets.deleteAttachment(options)\n  .then(function(results) {\n      console.log(results);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Attachments.delete_attachment(\n  9283173393803140,       # sheet_id\n  7169782752536452)       # attachment_id\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/attachments/{attachmentId}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/attachmentId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Versions",
        "description": "Gets a list of all versions of the given attachmentId in order from newest to oldest.\n",
        "operationId": "attachments-versionList",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of attachments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Attachment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Attachment> attachments = smartsheet.SheetResources.AttachmentResources.VersioningResources.ListVersions(\n  2252168947361668,               // sheetId\n  5510069950408580,               // attachmentId\n  null                            // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination\nPagedResult<Attachment> attachments = smartsheet.sheetResources().attachmentResources().versioningResources().listAllVersions(\n        2252168947361668L,       // long sheetId\n        5510069950408580L,       // long attachmentId\n        null                     // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  attachmentId: 5510069950408580\n};\n\n// List versions of the attachment\nsmartsheet.sheets.listAttachmentVersions(options)\n  .then(function(versionList) {\n    console.log(versionList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Attachments.list_attachment_versions(\n  2252168947361668,       # sheet_id\n  5510069950408580,       # attachment_id\n  include_all=True)\nversions = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Attachments.list_attachment_versions(\n  2252168947361668,       # sheet_id\n  5510069950408580,       # attachment_id\n  page_size=5,\n  page=1)\npages = response.total_pages\nversions = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Attach New version",
        "description": "Uploads a new version of a file to a sheet or row. This operation can be performed using a simple upload or a multipart upload.\n",
        "operationId": "attachments-versionUpload",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Attachment"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Attachment attachment = smartsheet.SheetResources.AttachmentResources.VersioningResources.AttachNewVersion(\n  9283173393803140,               // sheetId\n  0123456789123456,               // attachmentId\n  filePath,\n  \"application/msword\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/msword\" \\\n-H 'Content-Disposition: attachment; filename=\"ProgressReport.docx\"' \\\n-H \"Content-Length: FILE_SIZE\" \\\n-X POST \\\n--data-binary @ProgressReport.docx\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify the new file to be attached\nFile file = new File(\"/Users/jdoe/Documents/ProgressReport.docx\");\n\n// Attach new version of the file\n        Attachment attachment = smartsheet.sheetResources().attachmentResources().versioningResources().attachNewVersion(\n        9283173393803140L,       // long sheetId\n        0123456789123456L,       // long attachmentId\n        file,\n        \"application/msword\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Enable FileStream\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  sheetId: 9283173393803140,\n  attachmentId: 0123456789123456,\n  fileSize: 17291,\n  fileName: \"ProgressReport.docx\",\n  fileStream: fs.createReadStream(\"/Users/jdoe/Documents/ProgressReport.docx\")\n};\n\n// Attach new version\nsmartsheet.sheets.attachNewVersion(options)\n  .then(function(updatedAttachment) {\n    console.log(updatedAttachment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Attachments.attach_new_version(\n  9283173393803140,       # sheet_id\n  0123456789123456,       # attachment_id\n  ('ProgressReport.docx',\n    open('/path/to/ProgressReport.docx', 'rb'),\n    'application/msword')\n)\n\nupdated_attachment = response.result\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete All Versions",
        "description": "Deletes all versions of the attachment corresponding to the specified attachmentId. For attachments with\nmultiple versions, this effectively deletes the attachment from the object that it’s attached to.\n",
        "operationId": "attachments-versionsDelete",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.AttachmentResources.VersioningResources.DeleteAllVersions(\n  9283173393803140,               // sheetId\n  0123456789123456                // attachmentId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/attachments/{attachmentId}/versions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().attachmentResources().versioningResources().deleteAllVersions(\n        9283173393803140L,       // long sheetId\n        0123456789123456L        // long attachmentId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  attachmentId: 5510069950408580\n};\n\n// Delete all versions of the attachment\nsmartsheet.sheets.deleteAllAttachmentVersions(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Attachments.delete_attachment_versions(\n  9283173393803140,       # sheet_id\n  0123456789123456)       # attachment_id\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/automationrules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "operationId": "automationrules-list",
        "summary": "List All Automation Rules",
        "description": "Returns all automation rules associated with the specified sheet.\n\nMultistep workflows are not returned via the API.\nInstead, you'll see an error 400 - 1266: This rule is not accessible through the API.\nOnly single-action notifications, approval requests, or update requests qualify.\n\nFor users of Smartsheet for Slack, note that Slack notifications are not returned.\n",
        "tags": [
          "automationRules"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of AutomationRule objects",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of Automation Rules",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AutomationRule"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "PaginatedResult<AutomationRule> AutomationRules = smartsheet.SheetResources.AutomationRuleResources.ListAutomationRules(\n  9283173393803140,  // sheetId\n  null               // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140\n};\n\n// List automation rules\nsmartsheet.sheets.listAutomationRules(options)\n    .then(function(automationRulesList) {\n      console.log(automationRulesList);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresponse = smartsheet_client.Sheets.list_automation_rules(\n  9283173393803140,       # sheet_id\n  include_all=True)\nautomation_rules = response.data\n\n# Sample 2: Paginate the list of automation rules\nresponse = smartsheet_client.Sheets.list_automation_rules(\n  9283173393803140,       # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nautomation_rules = response.data\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/automationrules/{automationRuleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/automationRuleId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get an Automation Rule",
        "description": "Returns the specified automation rule, including any action values.\n",
        "operationId": "automationrule-get",
        "tags": [
          "automationRules"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "AutomationRule object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/AutomationRule"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "AutomationRule automationRule = smartsheet.SheetResources.GetAutomationRule(\n  9283173393803140,              // sheetId\n  789994550205316                // automationRuleId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules/{automationRuleId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140,\n  automationRuleId: 789994550205316\n};\n\n// Get automation rule\nsmartsheet.sheets.getAutomationRule(options)\n    .then(function(automationRule) {\n      console.log(automationRule);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "automation_rule = smartsheet_client.Sheets.get_automation_rule(\n  4478580756375428,       # sheet_id\n  4220838007334788)       # automation_rule_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update an Automation Rule",
        "description": "Updates an existing automation rule.\n\nWhen sending an AutomationRule, you must always specify **action.type** and it must match the existing rule type.\n",
        "operationId": "automationrule-update",
        "tags": [
          "automationRules"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the updated AutomationRule object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/AutomationRule"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set recipient\nRecipient recipient = new Recipient\n{\n  Email = \"jane.roe@smartsheet.com\"\n};\n\n// Specify the changes\nAutomationRule autoRule = new AutomationRule\n{\n  Id = 789994550205316,\n  Action = new AutomationAction\n  {\n    Recipients = new[] { recipient },\n    Type = AutomationActionType.NOTIFICATION_ACTION,\n    Frequency = AutomationActionFrequency.WEEKLY\n  }\n};\n\n// Update the automation rule\nAutomationRule automationRule = smartsheet.SheetResources.UpdateAutomationRule(\n  4583173393803140,  // sheetId\n  autoRule\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules/{automationRuleId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X PUT \\\n-d '{\n    \"action\": {\n        \"type\": \"APPROVAL_REQUEST_ACTION\",\n        \"recipients\": [{\n            \"email\": \"jane.roe@smartsheet.com\"\n        }],\n        \"frequency\": \"WEEKLY\"\n    }\n}'\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify the changes\nvar body = {\n  \"name\": \"Approval Request\",\n  \"action\": {\n    \"type\": \"APPROVAL_REQUEST_ACTION\",\n    \"recipients\": [\n      {\n        \"email\": \"jane.roe@smartsheet.com\"\n      }\n    ],\n    \"frequency\": \"WEEKLY\",\n    \"includeAllColumns\": true,\n    \"includeAttachments\": true,\n    \"includeDiscussions\": true,\n    \"notifyAllSharedUsers\": false\n  }\n};\n\n// Set options\nvar options = {\n  sheetId: 4583173393803140,\n  automationRuleId: 789994550205316,\n  body: body\n};\n\n// Update the automation rule\nsmartsheet.sheets.updateAutomationRule(options)\n    .then(function(updatedAutomationRule) {\n      console.log(updatedAutomationRule);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "automation_spec = smartsheet.models.AutomationRule({\n  'enabled': False,                # Disable Automation Rule\n  'name': 'New Name',              # Change Name of Automation Rule\n  'action': {\n    'type': 'NOTIFICATION_ACTION'  # Action/Type must always be included\n  }\n})\n\nresponse = smartsheet_client.Sheets.update_automation_rule(\n  4478580756375428,                # sheet_id\n  4220838007334788,                # automation_rule_id\n  automation_spec)\n\nupdated_automation = response.result\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete an Automation Rule",
        "description": "Deletes an automation rule.\n",
        "operationId": "automationrule-delete",
        "tags": [
          "automationRules"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "AutomationRule automationRule = smartsheet.SheetResources.AutomationRuleResources.DeleteAutomationRule(\n  9283173393803140,               // sheetId\n  789004550205316                 // automationRuleId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/automationrules/{automationRuleId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140,\n  automationRuleId: 789004550205316\n};\n\n// Delete automation rule\nsmartsheet.sheets.deleteAutomationRule(options)\n    .then(function(results) {\n      console.log(results);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.delete_automation_rule(\n  4478580756375428,       # sheet_id\n  4220838007334788)       # automation_rule_id\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/columns": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Columns",
        "description": "Gets a list of all columns belonging to the sheet specified in the URL.",
        "operationId": "columns-listOnSheet",
        "parameters": [
          {
            "$ref": "#/components/parameters/columnsLevel"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "tags": [
          "columns"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns [IndexResult object]() containing an array of [Column objects]().",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetColumn"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit 'include' parameter and pagination parameters\nPaginatedResult<Column> columns = smartsheet.SheetResources.ColumnResources.ListColumns(\n  9283173393803140,               // sheetId\n  null,                           // IEnumerable<ColumnInclusion> include\n  null,                           // PaginationParameters\n  2                               // int compatibilityLevel\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit 'include' parameter and pagination parameters\nPagedResult<Column> columns = smartsheet.sheetResources().columnResources().listColumns(\n        9283173393803140L,                   // long sheetId\n        null,                                // EnumSet<ColumnInclusion> includes\n        null                                 // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140\n};\n\n// List columns\nsmartsheet.sheets.getColumns(options)\n  .then(function(columnList) {\n    console.log(columnList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresponse = smartsheet_client.Sheets.get_columns(\n  9283173393803140,       # sheet_id\n  include_all=True)\ncolumns = response.data\n\n# Sample 2: Paginate the list of columns\nresponse = smartsheet_client.Sheets.get_columns(\n  9283173393803140,       # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\ncolumns = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Add Columns",
        "description": "Inserts one or more columns into the sheet specified in the URL.This operation can be performed using a [simple upload](/api/smartsheet/openapi/attachments) or a [multipart upload](/api/smartsheet/openapi/attachments). For more information, see [Post an Attachment](/api/smartsheet/openapi/attachments).",
        "operationId": "columns-addToSheet",
        "tags": [
          "columns"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "A [Column object]() that contains the following attributes\n  * **title**\n  * **type**\n  * **formula** (optional)\n  * **index** (zero-based)\n  * **autoNumberFormat** (optional)\n  * **description** (optional)\n  * **locked**(optional)\n  * **options** (optional)\n  * **symbol** (optional)\n  * **systemColumnType** (optional)\n  * **validation** (optional)\n  * **width** (optional)\n \n **NOTES:**\n  * When setting a column type of PICKLIST or MULTI_PICKLIST, you must follow a one operation per API call rule. For these column types, you must set the column type first, and then add any additional constraints in a second call, such as setting *validation* to *true*.\n  * When creating more than one column at a time, you cannot designate multiple index locations. Use one common index as the starting point. For example, designate the primary column as \"1\".\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnObjectAttributes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns [Result object](/api/smartsheet/openapi/schemas/result) containing the newly created columns -- either a single [Column object](/api/smartsheet/openapi/columns/column) or an array of Column objects, corresponding to what was specified in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AddColumns"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Create a column\nColumn columnA = new Column\n{\n  Title = \"This is a new multi-picklist column\",\n  Index = 0,\n  Type = ColumnType.MULTI_PICKLIST,\n  Options = new string[] { \"Cat\", \"Rat\", \"Bat\" }\n};\n\n// Create another column\nColumn columnB = new Column\n{\n  Title = \"New Date Column\",\n  Index = 4,\n  Type = ColumnType.DATE\n};\n\n// Add columns to the sheet\nIList<Column> addedColumns = smartsheet.SheetResources.ColumnResources.AddColumns(\n  2252168947361668,   // sheet Id\n  new Column[] { columnA, columnB }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"title\": \"New Multi-Picklist Column 1\", \"type\": \"MULTI_PICKLIST\", \"options\": [\"First\", \"Second\", \"Third\"], \"index\": 4} , {\"title\":\"New Date Column\", \"type\":\"DATE\", \"formula\": \"=data@row\", \"validation\":\"true\", \"index\":4},]' \\\n-d '[{\"index\": 6, \"title\": \"Dropdown Multi Select\", \"type\": \"MULTI_PICKLIST\", \"options\": [\"Template\", \"Blog\",\t\"Newsletter\",\t\"Email\", \"Press Release\", \"Advertisement\"],\t\"validation\": false, \"width\": 150}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Create columns\nColumn column1 = new Column()\n        .setTitle(\"New Multi-Picklist Column 1\")\n        .setType(ColumnType.MULTI_PICKLIST)\n        .setIndex(4)\n        .setOptions(Arrays.asList(\"First\", \"Second\", \"Third\"));\n\n        Column column2 = new Column()\n        .setTitle(\"New Date Column\")\n        .setType(ColumnType.DATE)\n        .setFormula(\"=data@row\")\n        .setValidation(true)\n        .setIndex(4);\n\n// Add columns to the sheet\n        List<Column> newColumns = smartsheet.sheetResources().columnResources().addColumns(\n        2252168947361668L,       // long sheetId\n        Arrays.asList(column1, column2)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify new columns\nvar column = [\n  {\n    \"title\": \"New Picklist Column 1\",\n    \"type\": \"PICKLIST\",\n    \"options\": [\n      \"First\",\n      \"Second\",\n      \"Third\"\n    ],\n    \"index\": 4\n  },\n  {\n    \"title\": \"New Date Column\",\n    \"type\": \"DATE\",\n    \"formula\": \"=data@row\",\n    \"validation\": true,\n    \"index\": 4\n  }\n];\n\n// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  body: column\n  };\n\n// Add columns to the sheet\nsmartsheet.sheets.addColumn(options)\n  .then(function(newColumns) {\n      console.log(newColumns);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Create the columns\ncolumn1 = smartsheet.models.Column({\n  'title': 'New Picklist Column 1',\n  'type': 'PICKLIST',\n  'options': [\n    'First',\n    'Second',\n    'Third'\n  ],\n  'index': 4\n})\n\ncolumn2 = smartsheet.models.Column({\n  'title': 'New Date Column',\n  'type': 'DATE',\n  'formula': '=data@row',\n  'validation': 'True',\n  'index': 4\n})\n\n# Add columns to the sheet\nnew_columns = smartsheet_client.Sheets.add_columns(\n  2252168947361668,       # sheet_id\n  [column1, column2])\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/columns/{columnId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/columnId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Column",
        "description": "Gets definitions for the column specified in the URL. **NOTE:** If you need to see the values of individual cells within the column, use [Get Sheet](#operation/getSheet) or [Get Row](#operation/row-get).",
        "operationId": "column-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/sheetLevel"
          }
        ],
        "tags": [
          "columns"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GetColumn"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include' parameter\nColumn column = smartsheet.SheetResources.ColumnResources.GetColumn(\n  9283173393803140,               // sheetId\n  7960873114331012,               // columnId\n  null                            // IEnumerable<ColumnInclusion> includes\n);\n\n// Sample 2: Specify 'include' parameter with value of \"FILTERS\"\nColumn column = smartsheet.SheetResources.ColumnResources.GetColumn(\n  9283173393803140,               // sheetId\n  7960873114331012,               // columnId\n  new ColumnInclusion[] { ColumnInclusion.FILTERS }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include' parameter\nColumn column = smartsheet.sheetResources().columnResources().getColumn(\n        9283173393803140L,       // long sheetId\n        7960873114331012L,       // long columnId\n        null                     // EnumSet<ColumnInclusion> includes\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"FILTERS\"\n        Column column = smartsheet.sheetResources().columnResources().getColumn(\n        9283173393803140L,       // long sheetId\n        7960873114331012L,       // long columnId\n        EnumSet.of(ColumnInclusion.FILTERS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140,\n  columnId: 7960873114331012\n};\n\n// Get column\nsmartsheet.sheets.getColumns(options)\n  .then(function(column) {\n    console.log(column);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "column = smartsheet_client.Sheets.get_column(\n  9283173393803140,       # sheet_id\n  7960873114331012,       # column_id\n  level=1)\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Column",
        "description": "Deletes the column specified in the URL.",
        "operationId": "column-delete",
        "tags": [
          "columns"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.ColumnResources.DeleteColumn(\n  9283173393803140,               // sheetId\n  0123456789012345                // columnId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().columnResources().deleteColumn(\n        9283173393803140L,       // long sheetId\n        0123456789012345L        // long columnId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140,\n  columnId: 0123456789012345\n};\n\n// Delete column\nsmartsheet.sheets.deleteColumn(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.delete_column(\n  9283173393803140,       # sheet_id\n  0123456789012345)       # column_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Column",
        "description": "Updates properties of the column, moves the column, or renames the column.\n\n**NOTE:**\n* You cannot change the type of a Primary column.\n* While dependencies are enabled on a sheet, you can't change the type of any special calendar/Gantt columns.\n* If the column type is changed, all cells in the column are converted to the new column type and column validation is cleared.\n* Type is optional when moving or renaming, but required when changing type or dropdown values.\n",
        "operationId": "column-updateColumn",
        "tags": [
          "columns"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "description": "A [Column object]() that contains the following attributes:\n * **index**\n * **autoNumberFormat** (optional)\n * **contactOptions** (optional) -- must have set column type to CONTACT_LIST\n * **description** (optional)\n * **format** (optional)\n * **formula** (optional)\n * **hidden**(optional)\n * **locked** (optional)\n * **options** (optional)\n * **symbol** (optional)\n * **systemColumnType** (optional)\n * **title** (optional)\n * **type** (optional)\n * **validation** (optional)\n * **width** (optional)\n \n**NOTE:** When setting a column type of PICKLIST or MULTI_PICKLIST, you must follow a one operation per API call rule. For these column types, you must set the column type first, and then add any additional constraints in a second call, such as setting *validation* to *true*.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnObjectAttributes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns [Result object](/api/smartsheet/openapi/schemas/result) containing the [Column object](/api/smartsheet/openapi/columns/column) that was modified.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/UpdateColumn"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify column properties\nColumn columnSpecification = new Column\n{\n  Id = 5005385858869124,\n  Title = \"First Column\",\n  Index = 0,\n  Type = ColumnType.PICKLIST,\n  Options = new string[] { \"One\", \"Two\"}\n};\n\n// Update column\nColumn updatedColumn = smartsheet.SheetResources.ColumnResources.UpdateColumn(\n  2252168947361668,   // sheetId\n  columnSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/columns/{columnId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X PUT \\\n-d '{\"title\": \"New multi-select dropdown column\", \"index\": 0, \"type\": \"MULTI_PICKLIST\", \"options\": [\"One\", \"Two\"]}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify column properties\nColumn columnSpecification = new Column(5005385858869124L)\n        .setTitle(\"First Column\")\n        .setIndex(0)\n        .setType(ColumnType.PICKLIST)\n        .setOptions(Arrays.asList(\"One\", \"Two\"));\n\n// Update column\n        Column updatedColumn = smartsheet.sheetResources().columnResources().updateColumn(\n        2252168947361668L,   // sheetId\n        columnSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify column properties\nvar column = {\n  \"index\": 0,\n  \"title\": \"First Column\",\n  \"type\": \"PICKLIST\",\n  \"options\": [\"One\", \"Two\"]\n};\n\n// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  columnId: 5005385858869124,\n  body: column\n  };\n\n// Update column\nsmartsheet.sheets.updateColumn(options)\n  .then(function(updatedColumn) {\n    console.log(updatedColumn);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Specify column properties\ncolumn_spec = smartsheet.models.Column({\n  'title': 'First Column',\n  'type': 'PICKLIST',\n  'options': [\"One\", \"Two\"],\n  'index': 0\n})\n\n# Update column\nresponse = smartsheet_client.Sheets.update_column(\n  2252168947361668,       # sheet_id\n  5005385858869124,       # column_id\n  column_spec)\n\nupdated_column = response.result\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/comments/{commentId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/commentId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get a comment",
        "description": "Gets the comment specified by commentId.\n",
        "operationId": "comment-get",
        "tags": [
          "comments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Comment"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Comment comment = smartsheet.SheetResources.CommentResources.GetComment(\n  2252168947361668,               // sheetId\n  48569348493401200               // commentId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Comment comment = smartsheet.sheetResources().commentResources().getComment(\n        2252168947361668L,       // long sheetId\n        4856934849340120L        // long commentId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  commentId: 48569348493401200\n};\n\n// Get comment\nsmartsheet.sheets.getComment(options)\n  .then(function(comment) {\n    console.log(comment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "comment = smartsheet_client.Discussions.get_discussion_comment(\n  2252168947361668,       # sheet_id\n  4856934849340120        # comment_id\n)\n"
          }
        ]
      },
      "put": {
        "summary": "Edit a comment",
        "description": "Updates the text of a comment. NOTE: Only the user that created the comment is permitted to update it.\n",
        "operationId": "comment-edit",
        "tags": [
          "comments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Comment"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the Sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify edited comment properties\nComment commentSpecification = new Comment\n{\n  Id = 7144101943502724,\n  Text = \"This is the updated comment text\"\n}\n\n// Edit comment\nComment updatedComment = smartsheet.SheetResources.DiscussionResources.CommentResources.UpdateComment(\n  3285357287499652,          // sheetId\n  commentSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X PUT \\\n-d '{\"text\":\"This is the updated comment text.\"}'\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify text\nvar body = {\n  text: \"This is the updated comment text.\"\n};\n\n// Set options\nvar options = {\n  sheetId: 3285357287499652,\n  commentId: 7144101943502724,\n  body: body\n};\n\n// Edit comment\nsmartsheet.sheets.editComment(options)\n  .then(function(updatedComment) {\n    console.log(updatedComment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "comment = smartsheet_client.Discussions.update_comment(\n  3285357287499652,       # sheet_id\n  7144101943502724,       # comment_id\n  smartsheet.models.Comment({\n    'text': 'This is the updated comment text'}))\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete a comment",
        "description": "Deletes the comment specified in the URL.\n",
        "operationId": "comment-delete",
        "tags": [
          "comments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the Sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.CommentResources.DeleteComment(\n  2252168947361668,           // sheetId\n  4952999001909124            // commentId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X 'DELETE'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().commentResources().deleteComment(\n        2252168947361668L,       // long sheetId\n        4952999001909124L        // long commentId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  commentId: 4952999001909124\n};\n\n// Delete comment\nsmartsheet.sheets.deleteComment(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Discussions.delete_discussion_comment(\n  2252168947361668,       # sheet_id\n  4952999001909124)       # comment_id\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/comments/{commentId}/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/commentId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Attach File or URL to Comment",
        "description": "Attaches a file to the comment. The URL can be any of the following:\n\n* Normal URL (attachmentType \"LINK\")\n* Box.com URL (attachmentType \"BOX_COM\")\n* Dropbox URL (attachmentType \"DROPBOX\")\n* Egnyte URL (attachmentType \"EGNYTE\")\n* Evernote URL (attachmentType \"EVERNOTE\")\n* Google Drive URL (attachmentType \"GOOGLE_DRIVE\")\n* OneDrive URL (attachmentType \"ONEDRIVE\")\n\n>**Important:** Smartsheet Gov allows only the following attachment types:\n> - BOX_COM\n> - FILE\n> - GOOGLE_DRIVE\n> - LINK\n> - ONEDRIVEß\n\nThis operation can be performed using a simple upload or a multipart upload.\n",
        "operationId": "attachments-attachToComment",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/URLAttachmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Attachment"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Attachment attachment = smartsheet.SheetResources.CommentResources.AttachmentResources.AttachFile(\n  9283173393803140,           // sheetId\n  1234567890234568,           // commentId\n  filePath,\n  \"application/msword\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/comments/{commentId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/msword\" \\\n-H 'Content-Disposition: attachment; filename=\"ProgressReport.docx\"' \\\n-H \"Content-Length: FILE_SIZE\" \\\n-X POST \\\n--data-binary @ProgressReport.docx\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify file to be attached\nFile file = new File(\"/Users/jdoe/Documents/ProgressReport.docx\");\n\n// Attach file to comment\n        Attachment attachment = smartsheet.sheetResources().commentResources().attachmentResources().attachFile(\n        9283173393803140L,       // long sheetId\n        1234567890234568L,       // long commentId\n        file,\n        \"application/msword\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Enable FileStream\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  sheetId: 1696803624483716,\n  commentId: 7722333183016324,\n  fileSize: 20765,\n  fileName: \"ProgressReport.docx\",\n  fileStream: fs.createReadStream(\"/Users/jdoe/Documents/ProgressReport.docx\")\n};\n\n// Attach file to comment\nsmartsheet.sheets.addCommentFileAttachment(options)\n  .then(function(attachment) {\n      console.log(attachment);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_attachment = smartsheet_client.Attachments.attach_file_to_comment(\n  9283173393803140,       # sheet_id\n  1234567890234568,       # comment_id\n  ('ProgressReport.docx',\n    open('/path/to/ProgressReport.docx', 'rb'),\n    'application/msword')\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/copy": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        },
        {
          "$ref": "#/components/parameters/sheetCopyInclude"
        },
        {
          "$ref": "#/components/parameters/sheetCopyExclude"
        }
      ],
      "post": {
        "summary": "Copy Sheet",
        "description": "Creates a copy of the specified sheet.\n",
        "operationId": "copy-sheet",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "description": "Destination where to create a copy of the specified sheet.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerDestinationForCopy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/components-schemas-Sheet"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination {\n  DestinationId = 3791509922310020,               // long destinationFolderId\n  DestinationType = DestinationType.FOLDER,\n  NewName = \"newSheetName\"\n};\n\n// Sample 1: Omit 'include' parameter\nSheet sheet = smartsheet.SheetResources.CopySheet(\n  9283173393803140,                               // sheetId\n  destination,\n  null                                            // IEnumerable<SheetCopyInclusion> include\n);\n\n// Sample 2: Specify 'include' parameter with value of \"data\"\nSheet sheet = smartsheet.SheetResources.CopySheet(\n  9283173393803140,                               // sheetId\n  destination,\n  new SheetCopyInclusion[] { SheetCopyInclusion.DATA }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/copy?include=data,attachments' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"destinationType\": \"folder\",\n  \"destinationId\": 7960873114331012,\n  \"newName\": \"newSheetName\"\n}' \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination()\n        .setDestinationType(DestinationType.FOLDER)\n        .setDestinationId(9283173393803140L)\n        .setNewName(\"newSheetName\");\n\n// Sample 1: Omit 'include' parameter\nSheet sheet = smartsheet.sheetResources().copySheet(\n        4583173393803140L,                          // long sheetId\n        destination,\n        null                                        // EnumSet<SheetCopyInclusion> includes\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"data\"\nSheet sheet = smartsheet.sheetResources().copySheet(\n        4583173393803140L,                         // long sheetId\n        destination,\n        EnumSet.of(SheetCopyInclusion.DATA)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set destination information\nvar body = {\n  destinationType: \"home\",\n  newName: \"newSheetName\"\n};\n\n// Set elements to copy\nvar params = {\n  include: \"attachments,data\",\n  includeAll: true\n};\n\n// Set options\nvar options = {\n  sheetId: 7254137655060356,\n  body: body,\n  queryParameters: params\n};\n\n// Copy sheet\nsmartsheet.sheets.copySheet(options)\n  .then(function(copiedSheet) {\n    console.log(copiedSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Copy sheet\nresponse = smartsheet_client.Sheets.copy_sheet(\n  4583173393803140,                               # sheet_id\n  smartsheet.models.ContainerDestination({\n    'destination_type': 'folder',               # folder, workspace, or home\n    'destination_id': 9283173393803140,         # folder_id\n    'new_name': 'newSheetName'\n  })\n)\n\n# Sample 2: Copy sheet with attachments and discussions\nresponse = smartsheet_client.Sheets.copy_sheet(\n  4583173393803140,       # sheet_id\n  include='attachments,discussions'\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/crosssheetreferences": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Create Cross-sheet References",
        "description": "Adds a cross-sheet reference between two sheets and defines the data range for formulas. Each distinct data range requires a new cross-sheet reference.",
        "operationId": "add-crosssheet-reference",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "tags": [
          "crossSheetReferences"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "description": "CrossSheetReference object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CrossSheetReferenceRequestWithColumnIds"
                  },
                  {
                    "$ref": "#/components/schemas/CrossSheetReferenceRequestWithRowIds"
                  },
                  {
                    "$ref": "#/components/schemas/CrossSheetReferenceRequestWithColumnAndRowIds"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a CrossSheetReference object, corresponding to what was specified in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/CrossSheetReference"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "CrossSheetReference xref = new CrossSheetReference();\nxref.Name = \"Sample Time Log Sheet Range 1\";\nxref.SourceSheetId = 154378742065028;\nxref.StartRowId = 4089096300717956;\nxref.EndRowId = 2681721417164676;\nxref.StartColumnId = 824812248557444;\nxref.EndColumnId = 824812248557444;\nCrossSheetReference newXRef = smartsheet.SheetResources.CrossSheetReferenceResources.CreateCrossSheetReference(\n    1755440242550660,   //sheetId\n    xref\n  );\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/crosssheetreferences \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\n  \"name\": \"Sample Time Log Sheet Range 1\",\n  \"sourceSheetId\": 154378742065028,\n  \"startRowId\": 4089096300717956,\n  \"endRowId\": 2681721417164676,\n  \"startColumnId\": 824812248557444,\n  \"endColumnId\": 824812248557444\n}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "CrossSheetReference xref = new CrossSheetReference();\n        xref.setName(\"Sample Time Log Sheet Range 1\");\n        xref.setSourceSheetId(154378742065028L);\n        xref.setStartRowId(4089096300717956L);\n        xref.setEndRowId(2681721417164676L);\n        xref.setStartColumnId(824812248557444L);\n        xref.setEndColumnId(824812248557444L);\n\nCrossSheetReference newXRef = smartsheet.sheetResources().crossSheetReferenceResources().createCrossSheetReference(\n        1755440242550660,   //sheetId\n        xref\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var body = {\n  name: \"my cross sheet reference\",\n  sourceSheetId: 154378742065028,\n  startRowId: 4089096300717956,\n  endRowId: 2681721417164676,\n  \"startColumnId\": 824812248557444,\n  \"endColumnId\": 824812248557444\n};\n\nsmartsheet.sheets.createCrossSheetReference({sheetId: 456745674567, body: body})\n  .then((result) => {\n    console.log(\"success\");\n    console.log(JSON.stringify(result));\n  })\n  .catch((error) => {\n    console.log(\"error\");\n    console.log(JSON.stringify(error));\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "xref = smartsheet.models.CrossSheetReference({\n    'name': 'Sample Time Log Sheet Range 1',\n    'source_sheet_id': 154378742065028,\n    'start_row_id': 4089096300717956,\n    'end_row_id': 2681721417164676,\n    'start_column_id': 824812248557444,\n    'end_column_id': 824812248557444\n})\nresult = smartsheet_client.Sheets.create_cross_sheet_reference(\n  1755440242550660, xref)\n"
          }
        ]
      },
      "get": {
        "summary": "List Cross-sheet References",
        "description": "Lists all cross-sheet references for the sheet.",
        "operationId": "list-crosssheet-references",
        "tags": [
          "crossSheetReferences"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of CrossSheetReference objects",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CrossSheetReference"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "//Sample 1: List all\nsmartsheet.SheetResources.CrossSheetReferenceResources.ListCrossSheetReferences(\n    9283173393803140, // sheetId\n    null              // PaginationParameters\n  );\n\n//Sample 2: Paginate the list\nPaginationParameters paginationParameters = new PaginationParameters(\n    false,  // includeAll\n    100,    // pageSize\n    1       // page\n  );\nsmartsheet.SheetResources.CrossSheetReferenceResources.ListCrossSheetReferences(\n    9283173393803140,   // sheetId\n    paginationParameters\n  );\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/crosssheetreferences \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "//Sample 1: List all\nsmartsheet.sheetResources().crossSheetReferenceResources().listCrossSheetReferences(\n        9283173393803140L,  // sheetId\n        null    // PaginationParameters\n        );\n\n//Sample 2: Paginate the list\nPaginationParameters paginationParameters = new PaginationParameters(\n        false,  // includeAll\n        100,    // pageSize\n        1       // page\n        );\nsmartsheet.sheetResources().crossSheetReferenceResources().listCrossSheetReferences(\n        9283173393803140L,  // sheetId\n        paginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.sheets.listCrossSheetReferences({sheetId: 9283173393803140})\n  .then((result) => {\n    console.log(\"success\");\n    console.log(JSON.stringify(result));\n  })\n  .catch((error) => {\n    console.log(\"error\");\n    console.log(JSON.stringify(error));\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresult = smartsheet_client.Sheets.list_cross_sheet_references(\n  9283173393803140)\n\n# Sample 2: Paginate the list of cross-sheet references\nresponse = smartsheet_client.Sheets.list_cross_sheet_references(\n  9283173393803140,       # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\ncrosssheetreferences = response.data\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/crosssheetreferences/{crossSheetReferenceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/crossSheetReferenceId"
        }
      ],
      "get": {
        "summary": "Get Cross-sheet Reference",
        "description": "Gets the cross-sheet reference specified in the URL.",
        "operationId": "get-crosssheet-reference",
        "tags": [
          "crossSheetReferences"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "CrossSheetReference object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossSheetReference"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "CrossSheetReference xref = smartsheet.SheetResources.CrossSheetReferenceResources.GetCrossSheetReference(\n    9283173393803140, // sheetId\n    8157685695702916  // crossSheetReferenceId\n  );\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/crosssheetreferences/{crossSheetReferenceId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "CrossSheetReference xref = smartsheet.sheetResources().crossSheetReferenceResources().getCrossSheetReference(\n        9283173393803140L, // sheetId\n        8157685695702916L  // crossSheetReferenceId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.sheets.getCrossSheetReference({sheetId: 9283173393803140, crossSheetReferenceId: 8157685695702916})\n  .then((result) => {\n    console.log(\"success\");\n    console.log(JSON.stringify(result));\n  })\n  .catch((error) => {\n    console.log(\"error\");\n    console.log(JSON.stringify(error));\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "result = smartsheet_client.Sheets.get_cross_sheet_reference(\n    9283173393803140, # sheet_id\n    8157685695702916  # cross_sheet_reference_id\n  )\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/discussions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Discussions",
        "description": "Gets a list of all discussions associated with the specified sheet. Remember that discussions are containers\nfor the conversation thread. To see the entire thread, use the include=comments parameter.\n",
        "operationId": "discussions-list",
        "tags": [
          "discussions"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/discussionInclude"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of discussions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Discussion"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nPaginatedResult<Discussion> results = smartsheet.SheetResources.DiscussionResources.ListDiscussions(\n  9283173393803140,               // sheetId\n  null,                           // IEnumerable<DiscussionInclusion> include\n  null                            // PaginationParameters\n);\n\n// Sample 2: Specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true'\nPaginatedResult<Discussion> results = smartsheet.SheetResources.DiscussionResources.ListDiscussions(\n  9283173393803140,               // sheetId\n  new DiscussionInclusion[] { DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS },\n  new PaginationParameters(\n    true,                       // includeAll\n    null,                       // int pageSize\n    null)                       // int page\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions?include=comments,attachments' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nPagedResult<Discussion> results = smartsheet.sheetResources().discussionResources().listDiscussions(\n        9283173393803140L,   // long sheetId\n        null,                // PaginationParameters\n        null                 // EnumSet<DiscussionInclusion> includes\n        );\n\n// Sample 2: Specify pagination parameter 'includeAll'\nPaginationParameters parameters = new PaginationParameters()\n        .setIncludeAll(true);\n\n// List discussions (specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true')\nPagedResult<Discussion> results = smartsheet.sheetResources().discussionResources().listDiscussions(\n        9283173393803140L,   // long sheetId\n        parameters,\n        EnumSet.of(DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 3138415114905476\n};\n\n// List discussions\nsmartsheet.sheets.getDiscussions(options)\n  .then(function(discussionList) {\n    console.log(discussionList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Discussions.get_all_discussions(\n  9283173393803140,       # sheet_id\n  include_all=True)\ndiscussions = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Discussions.get_all_discussions(\n  9283173393803140,       # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\ndiscussions = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create a Discussion",
        "description": "Creates a new discussion on a sheet. To create a discussion with an attachment please use \"multipart/form-data\" content type.\n",
        "operationId": "discussions-create",
        "tags": [
          "discussions"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionCreationRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionCreationRequestWithAttachment"
              },
              "encoding": {
                "discussion": {
                  "contentType": "application/json"
                },
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Discussion"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Example request: create discussion on sheet (without attachment)\n\n// Create discussion (including the comment)\nDiscussion discussionSpecification = new Discussion\n{\n  Comment = new Comment\n  {\n    Text = \"This text is the body of the first comment\"\n  },\n  Comments = null         // workaround for SDK issue\n};\n\n// Add discussion to sheet\nDiscussion newDiscussion = smartsheet.SheetResources.DiscussionResources.CreateDiscussion(\n  9283173393803140,                   // sheetId\n  discussionSpecification\n);\n\n// Example request: create discussion on sheet (with attachment)\n\n// Create discussion (including the comment)\nDiscussion discussionSpecification = new Discussion\n{\n  Comment = new Comment\n  {\n    Text = \"This text is the body of the first comment\"\n  },\n  Comments = null         // workaround for SDK issue\n};\n\n// Add discussion (including comment with attachment) to sheet\nDiscussion newDiscussion = smartsheet.SheetResources.DiscussionResources.CreateDiscussionWithAttachment(\n  9283173393803140,                   // sheetId\n  discussionSpecification,\n  filePath,\n  \"application/octet-stream\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: create discussion on sheet (without attachment)\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"comment\": {\"text\":\"This text is the body of the first comment\"}}'\n\n# Example request: create discussion on sheet (with attachment)\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: multipart/form-data\" \\\n-X POST \\\n-F 'discussion={ \"comment\": { \"text\": \"This text is the body of the first comment\" } };type=application/json' \\\n-F \"file=@file_to_attach;type=application/octet-stream\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Example request: create discussion on sheet (without attachment)\n\n// Create comment\nComment commentSpecification = new Comment()\n        .setText(\"This text is the body of the first comment\");\n\n// Create discussion (including the comment)\n        Discussion discussionSpecification = new Discussion()\n        .setComment(commentSpecification)\n        .setComments(null);     // workaround for SDK issue\n\n// Add discussion to sheet\n        Discussion newDiscussion = smartsheet.sheetResources().discussionResources().createDiscussion(\n        9283173393803140L,       // long sheetId\n        discussionSpecification\n        );\n\n// Example request: create discussion on sheet (with attachment)\n\n// Create comment\n        Comment commentSpecification = new Comment()\n        .setText(\"This text is the body of the first comment\");\n\n// Create discussion (including the comment)\n        Discussion discussionSpecification = new Discussion()\n        .setComment(commentSpecification)\n        .setComments(null);     // workaround for SDK issue\n\n        File file = new File(filePath);\n\n// Add discussion (including comment with attachment) to sheet\n        Discussion newDiscussion = smartsheet.sheetResources().discussionResources().createDiscussionWithAttachment(\n        9283173393803140L,       // long sheetId\n        discussionSpecification,\n        file,\n        \"application/octet-stream\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Example request: create discussion on sheet (without attachment)\n\n// Specify discussion\nvar discussion = {\n  \"comment\": {\n    \"text\": \"This text is the body of the first comment\"\n  }\n};\n\n// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  body: discussion\n  };\n\n// Add discussion to sheet\nsmartsheet.sheets.createDiscussion(options)\n  .then(function(newDiscussion) {\n    console.log(newDiscussion);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Example request: create discussion on sheet (with attachment)\n\n// Multipart operations are not supported by the Node SDK. Instead, see instructions to Create Discussion on Sheet, and then Attach File to Comment.\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: create discussion on sheet (without attachment)\n\nresponse = smartsheet_client.Discussions.create_discussion_on_sheet(\n  9283173393803140,           # sheet_id\n  smartsheet.models.Discussion({\n    'comment': smartsheet.models.Comment({\n      'text': 'This text is the body of the first comment'\n    })\n  })\n)\n\n# Example request: create discussion on sheet (with attachment)\n\nresponse = smartsheet_client.Discussions.create_discussion_on_sheet_with_attachment(\n  9283173393803140,           # sheet_id\n  smartsheet.models.Discussion({\n    'comment': smartsheet.models.Comment({\n      'text': 'This text is the body of the first comment'\n    })\n  }),\n  ('photo.jpg', open('/path/to/photo.jpg', 'rb'), 'image/jpeg')\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/discussions/{discussionId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/discussionId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Discussion",
        "description": "Gets the discussion specified by discussionId.\n",
        "operationId": "discussion-get",
        "tags": [
          "discussions"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Discussion"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Discussion discussion = smartsheet.SheetResources.DiscussionResources.GetDiscussion(\n  9283173393803140,               // sheetId\n  0123456789012345                // discussionId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Discussion discussion = smartsheet.sheetResources().discussionResources().getDiscussion(\n        9283173393803140L,       // long sheetId\n        0123456789012345L        // long discussionId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  discussionId: 2331373580117892\n};\n\n// Get discussion\nsmartsheet.sheets.getDiscussions(options)\n  .then(function(discussion) {\n    console.log(discussion);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "discussion = smartsheet_client.Discussions.get_discussion(\n  9283173393803140,       # sheet_id\n  0123456789012345)       # discussion_id\n\n# discussion is an instance of smartsheet.models.Discussion\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete a Discussion",
        "description": "Deletes the discussion specified in the URL.\n",
        "operationId": "discussion-delete",
        "tags": [
          "discussions"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.DiscussionResources.DeleteDiscussion(\n  9283173393803140,               // sheetId\n  0123456789012345                // discussionId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\\\n-X 'DELETE'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().discussionResources().deleteDiscussion(\n        9283173393803140L,       // long sheetId\n        0123456789012345L        // long discussionId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  discussionId: 991393444325252\n};\n\n// Delete discussion\nsmartsheet.sheets.deleteDiscussion(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Discussions.delete_discussion(\n  9283173393803140,       # sheet_id\n  0123456789012345)       # discussion_id\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/discussions/{discussionId}/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/discussionId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Discussion Attachments",
        "description": "Gets a list of all attachments that are in the discussion.\n",
        "operationId": "discussion-listAttachments",
        "tags": [
          "attachments",
          "discussions"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of attachments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Attachment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Attachment> attachments = smartsheet.SheetResources.DiscussionResources.AttachmentResources.ListAttachments(\n  9283173393803140,               // sheetId\n  1234567890123456,               // discussionId\n  null                            // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination\nPagedResult<Attachment> attachments = smartsheet.sheetResources().discussionResources().attachmentResources().getAttachments(\n        9283173393803140L,       // long sheetId\n        1234567890123456L,       // long discussionId\n        null                     // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  discussionId: 3962273862576004\n};\n\n// List discussion attachments\nsmartsheet.sheets.listDiscussionAttachments(options)\n  .then(function(attachmentsList) {\n      console.log(attachmentsList);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresponse = smartsheet_client.Attachments.list_discussion_attachments(\n  9283173393803140,       # sheet_id\n  1234567890123456,       # discussion_id\n  include_all=True)\nattachments = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Attachments.list_discussion_attachments(\n  9283173393803140,       # sheet_id\n  1234567890123456,       # discussion_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nattachments = response.data\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/discussions/{discussionId}/comments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/discussionId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Create a comment",
        "description": "Adds a comment to a discussion. To create a comment with an attachment please use \"multipart/form-data\" content type.\n",
        "operationId": "comments-create",
        "tags": [
          "comments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreationRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreationRequestWithAttachment"
              },
              "encoding": {
                "comment": {
                  "contentType": "application/json"
                },
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Comment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Example request: add comment (without attachment)\n\n// Create comment\nComment commentSpecification = new Comment\n{\n  Text = \"This is a new comment.\"\n};\n\n// Add comment to discussion\nComment newComment = smartsheet.SheetResources.DiscussionResources.CommentResources.AddComment(\n  2252168947361668,               // sheetId\n  3962273862576004,               // discussionId\n  commentSpecification\n);\n\n// Example request: add comment (with attachment)\n\n// Create comment\nComment commentSpecification = new Comment\n{\n  Text = \"This is a new comment.\"\n};\n\n// Add comment (with attachment) to discussion\nComment newComment = smartsheet.SheetResources.DiscussionResources.CommentResources.AddCommentWithAttachment(\n  2252168947361668,                   // sheetId\n  3962273862576004,                   // discussionId\n  commentSpecification,\n  filePath,\n  \"application/octet-stream\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: add comment (without attachment)\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/comments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"text\":\"This is a new comment.\"}'\n\n# Example request: add comment (with attachment)\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/discussions/{discussionId}/comments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: multipart/form-data\" \\\n-X POST \\\n-F 'comment={ \"text\":\"This is a new comment.\" };type=application/json' \\\n-F \"file=@insurance_benefits.pdf;type=application/octet-stream\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Example request: add comment (without attachment)\n\n// Create comment\nComment commentSpecification = new Comment()\n        .setText(\"This is a new comment.\");\n\n// Add comment to discussion\n        Comment newComment = smartsheet.sheetResources().discussionResources().commentResources().addComment(\n        2252168947361668L,       // long sheetId\n        3962273862576004L,       // long discussionId\n        commentSpecification\n        );\n\n// Example request: add comment (with attachment)\n\n// Create comment\n        Comment commentSpecification = new Comment()\n        .setText(\"This is a new comment.\");\n\n// Add comment (with attachment) to discussion\n        File file = new File(filePath);\n        smartsheet.sheetResources().discussionResources().commentResources().addCommentWithAttachment(\n        2252168947361668L,       // long sheetId\n        3962273862576004L,       // long discussionId\n        commentSpecification,\n        file,\n        \"application/octet-stream\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Example request: add comment (without attachment)\n\n// Specify comment\nvar comment = { \"text\": \"This is a new comment.\" };\n\n// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  discussionId: 3962273862576004,\n  body: comment\n  };\n\n// Add comment to discussion\nsmartsheet.sheets.addDiscussionComment(options)\n  .then(function(newComment) {\n    console.log(newComment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Example request: add comment (with attachment)\n\n// Multipart operations are not supported by the Node SDK. Instead, see instructions to Add Comment, and then Attach File to Comment.\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: add comment (without attachment)\n\nresponse = smartsheet_client.Discussions.add_comment_to_discussion(\n  2252168947361668,       # sheet_id\n  3962273862576004,       # discussion_id\n  smartsheet.models.Comment({\n    'text': 'This is a new comment.'\n  })\n)\n\n# Example request: add comment (with attachment)\n\n# Create comment\ncomment = smartsheet.models.Comment({\n  'text': 'This is a new comment.'\n})\n\n# Add comment (with attachment) to discussion\nresponse = smartsheet_client.Discussions.add_comment_to_discussion_with_attachment(\n  2252168947361668,           # sheet_id\n  3962273862576004,           # discussion_id\n  comment,\n  ('image.png', open('/path/to/image.png', 'rb'), 'image/png')\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/emails": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        }
      ],
      "post": {
        "summary": "Send Sheet via Email",
        "description": "Sends the sheet as a PDF attachment via email to the designated recipients.",
        "operationId": "sheet-send",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "description": "[SheetEmail object](/api/smartsheet/openapi/sendviaemail/sheetemail)\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SheetEmail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify recipients\nRecipient[] recipients = new Recipient[] {\n  new Recipient { Email = \"john.doe@smartsheet.com\" },\n  new Recipient { GroupId = 2258118617917316 }\n};\n\n// Configure email\nSheetEmail sheetEmail = new SheetEmail {\n  SendTo = recipients,\n  Subject = \"Check this report out!\",\n  Message = \"Here are the rows I mentioned in our meeting\",\n  CcMe = false,\n  Format = SheetEmailFormat.PDF,\n  FormatDetails = new FormatDetails { PaperSize = PaperSize.A4 }\n};\n\n// Send sheet via email\nsmartsheet.SheetResources.SendSheet(4293147074291588, sheetEmail);      // sheetId\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/emails \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"sendTo\" : [{\"email\": \"john.doe@smartsheet.com\"}, {\"groupId\": 2258118617917316}], \"subject\": \"Check these rows out!\", \"message\": \"Here is the Sheet I mentioned in our meeting.\", \"ccMe\": false, \"format\": \"PDF\", \"formatDetails\": {\"paperSize\": \"A4\"}}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify individual recipient\nRecipientEmail recipientEmail = new RecipientEmail.AddRecipientEmailBuilder()\n        .setEmail(\"john.doe@smartsheet.com\")\n        .build();\n\n// Specify group recipient\nRecipientGroup recipientGroup = new RecipientGroup.AddRecipientGroupBuilder()\n        .setGroupId(2258118617917316L)\n        .build();\n\n// Set recipients\nList<Recipient> recipients = Arrays.asList(recipientEmail,recipientGroup);\n\n// Set format details\nFormatDetails formatDetails = new FormatDetails();\nformatDetails.setPaperSize(PaperSize.A0);\n\n// Configure email\nSheetEmail email = new SheetEmail.AddSheetEmailBuilder()\n        .setSendTo(recipients)\n        .setSubject(\"Check these rows out!\")\n        .setMessage(\"Here are the rows I mentioned in our meeting\")\n        .setCcMe(false)\n        .setFormat(SheetEmailFormat.PDF)\n        .setFormatDetails(formatDetails)\n        .build();\n\n// Send sheet via email\nsmartsheet.sheetResources().sendSheet(4293147074291588L, email);        // sheetId\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Configure email\nvar email = {\n  \"sendTo\": [\n    {\n      \"email\": \"john.doe@smartsheet.com\"\n    },\n    {\n      \"groupId\": 2258118617917316\n    }\n  ],\n  \"subject\": \"Check these rows out!\",\n  \"message\": \"Here are the rows I mentioned in our meeting\",\n  \"ccMe\": false,\n  \"format\": \"PDF\",\n  \"formatDetails\": {\n    \"paperSize\": \"A4\"\n  }\n};\n\n// Set options\nvar options = {\n  body: email,\n  sheetId: 2252168947361668\n};\n\n// Send sheet via email\nsmartsheet.sheets.sendSheetViaEmail(options)\n  .then(function(data) {\n    console.log(data);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sheets.send_sheet(\n  4293147074291588,           # sheet_id\n  smartsheet.models.SheetEmail({\n    'send_to': [\n      smartsheet.models.Recipient({'email': 'john.doe@smartsheet.com'}),\n      smartsheet.models.Recipient({'group_id': 2258118617917316})\n    ],\n    'subject': 'Check these rows out!',\n    'message': 'Here are the rows I mentioned in our meeting.',\n    'cc_me': False,\n    'format': 'PDF',\n    'format_details': smartsheet.models.FormatDetails({\n      'paper_size': 'A4'\n    })\n  })\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/move": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        }
      ],
      "post": {
        "summary": "Move Sheet",
        "description": "Moves the specified sheet to a new location.\nWhen a sheet that is shared to one or more users and/or groups is moved into or out of a workspace, those sheet-level shares are preserved.\n",
        "operationId": "move-sheet",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "description": "Destination to move the specified sheet.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerDestinationForMove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/components-schemas-Sheet"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination {\n  DestinationId = 7960873114331012,           // destinationFolderId\n  DestinationType = DestinationType.FOLDER,\n};\n\n// Move sheet\nSheet sheet = smartsheet.SheetResources.MoveSheet(\n  4583173393803140,                           // sheetId\n  destination\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/move \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"destinationType\": \"folder\",\n  \"destinationId\": 7960873114331012\n}' \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination();\n        destination.setDestinationType(DestinationType.FOLDER)\n        .setDestinationId(7960873114331012L);\n\n// Move sheet\nSheet sheet = smartsheet.sheetResources().moveSheet(\n        4583173393803140L,                         // long sheetId\n        destination\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set destination information\nvar body = {\n  destinationType: \"folder\",\n  destinationId: 7960873114331012\n};\n\n// Set options\nvar options = {\n  sheetId: 4583173393803140,\n  body: body\n};\n\n// Move sheet\nsmartsheet.sheets.moveSheet(options)\n  .then(function(movedSheet) {\n    console.log(movedSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "sheet = smartsheet_client.Sheets.move_sheet(\n  4583173393803140,                       # sheet_id\n  smartsheet.models.ContainerDestination({\n    'destination_type': 'folder',       # folder, workspace, or home\n    'destination_id': 7960873114331012  # folder_id\n  })\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/proofs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "summary": "List Proofs",
        "description": "Gets a list of all proofs for a given sheet.\n",
        "operationId": "proofs-getAllProofs",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of all proofs",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Proof"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/proofs/{proofId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/proofId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/proofInclude"
          }
        ],
        "summary": "Get Proof",
        "description": "Gets the proof specified in the URL. Returns the proof, which is optionally populated with discussion and attachment objects.\n",
        "operationId": "proofs-get",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Proof"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}?include=attachments,discussions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Proof",
        "description": "Deletes the proof including all versions. The proofId must be for the original version.\n",
        "operationId": "proofs-delete",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          }
        ]
      },
      "put": {
        "summary": "Update Proof Status",
        "description": "Sets the proof status as either complete or incomplete.\n",
        "operationId": "proofs-update",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProofStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Proof"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Disposition: attachment; filename=\"abc.bmp\"\" \\\n-X PUT\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/proofs/{proofId}/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/proofId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Proof Attachments",
        "description": "Gets a list of all attachments that are in the proof, excluding discussion-level attachments in the proof.\n",
        "operationId": "proofs-listAttachments",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of proof attachments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Attachment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          }
        ]
      },
      "post": {
        "summary": "Attach File to Proof",
        "description": "Attaches a file to the proof.\n",
        "operationId": "proofs-attachToProof",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Attachment"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: image/gif\" \\\n-H \"Content-Disposition: attachment; filename=\"giphy.gif\"\" \\\n-X POST \\\n--data-binary \"@home/giphy.gif\"\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/proofs/{proofId}/discussions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/proofId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Proof Discussions",
        "description": "Gets a list of all discussions that are in the proof.\n",
        "operationId": "proofs-listDiscussions",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/discussionInclude"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of proof discussions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Discussion"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Proof Discussion",
        "description": "Creates a discussion on a proof.\n",
        "operationId": "proofs-createDiscussion",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionCreationRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionCreationRequestWithAttachment"
              },
              "encoding": {
                "discussion": {
                  "contentType": "application/json"
                },
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Discussion"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "// Sample 1: create proof discussion (without attachment)\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/discussions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: multipart/form-data \\\n-X POST \\\n--data-binary \"@/home/Downloads/test_b (4).pdf\"\n\n// Sample 2: create proof discussion (with attachment)\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/discussions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: multipart/form-data \\\n-X POST \\\n-F 'discussion={ \"comment\": { \"text\": \"This text is the body of the first comment\" } };type=application/json' \\\n-F \"file=@/home/Downloads/test_b (4).pdf;type=application/octet-stream\"\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/discussions' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/proofs/{proofId}/requestactions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/proofId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Proof Request Actions",
        "description": "Gets a summarized list of all request actions associated with the specified proof.\n",
        "operationId": "proofs-listRequestActions",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of proof request actions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ProofRequestAction"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/requestactions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/proofs/{proofId}/requests": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/proofId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "delete": {
        "summary": "Delete Proof Requests",
        "description": "Deletes all proof requests in a proof.\n",
        "operationId": "proofs-deleteProofRequests",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/requests \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          }
        ]
      },
      "post": {
        "summary": "Create Proof Request",
        "description": "Creates a proof request.\n",
        "operationId": "proofs-createProofRequests",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProofRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/ProofRequest"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/requests \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\n  \"sendTo\": [{\n    \"email\": \"john.doe@smartsheet.com\"\n  }],\n  \"subject\": \"This is a test.\"\n}'\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/proofs/{proofId}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/proofId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Proof Versions",
        "description": "Gets a list of all versions of the given proofId in order from newest to oldest.\n",
        "operationId": "proofs-getVersions",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of proof versions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Proof"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/versions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Proof Version",
        "description": "Deletes a proof version. Proof Id must be a current version proof Id.\n",
        "operationId": "proofs-deleteVersion",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/versions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          }
        ]
      },
      "post": {
        "summary": "Create Proof Version",
        "description": "Creates a proof version. Proof Id must be for the original proof.\n",
        "operationId": "proofs-createVersion",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/URLAttachmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Proof"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/proofs/{proofId}/versions \\\n-H \"Content-Disposition: attachment; filename=\"error.gif\"\" \\\n-H \"Content-Type: image/gif\" \\\n-X POST \\\n--data-binary \"@/home/Downloads/giphy.gif\"\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/publish": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Sheet Publish Status",
        "description": "Gets the sheet's 'Publish' settings.\n",
        "operationId": "get-sheetPublish",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SheetPublish"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "SheetPublish status = smartsheet.SheetResources.GetPublishStatus(\n  4583173393803140            // sheetId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/publish \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "SheetPublish status = smartsheet.sheetResources().getPublishStatus(\n        4583173393803140L,       // long sheetId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 4583614634583940\n};\n\n// Get sheet publish status\nsmartsheet.sheets.getPublishStatus(options)\n  .then(function(status) {\n    console.log(status);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sheets.get_publish_status(\n  4583173393803140)       # sheet_id\nstatus = response.result\n# status is a smartsheet.models.SheetPublish object\n"
          }
        ]
      },
      "put": {
        "summary": "Set Sheet Publish Status",
        "description": "Sets the publish status of the sheet and returns the new status, including the URLs of any enabled publishings.\n",
        "operationId": "set-sheetPublish",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "SheetPublish object.\n\nFor Read Only, if you do not specify a value for **readOnlyFullAccessibleBy**, the value defaults\nto the organization-level 'Sheet Publishing' setting (if the sheet owner belongs to an organization account)\nor to **ALL** (if the sheet owner does not belong to an organization account).\n\nFor Read Write, if you do not specify a value for **readWriteAccessibleBy**, the value defaults\nto the organization-level 'Sheet Publishing' setting (if the sheet owner belongs to an organization account)\nor to **ALL** (if the sheet owner does not belong to an organization account).\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SheetPublishRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SheetPublish"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify sheet publish status properties\nSheetPublish publishSpecification = new SheetPublish\n{\n  ReadOnlyLiteEnabled = true,\n  ReadOnlyFullEnabled = false,\n  ReadWriteEnabled = false,\n  IcalEnabled = false\n};\n\n// Set sheet publish status\nSheetPublish updatedStatus = smartsheet.SheetResources.UpdatePublishStatus(\n  4583614634583940,       // sheetId\n  publishSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/publish \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"readOnlyLiteEnabled\": true,\"readOnlyFullEnabled\": false,\"readWriteEnabled\": false,\"icalEnabled\": false}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify sheet publish status properties\nSheetPublish publishSpecification = new SheetPublish()\n        .setIcalEnabled(false)\n        .setReadOnlyFullEnabled(false)\n        .setReadWriteEnabled(false)\n        .setReadOnlyLiteEnabled(true);\n\n// Set sheet publish status\nSheetPublish updatedStatus = smartsheet.sheetResources().updatePublishStatus(\n        4583614634583940L,       // long sheetId\n        publishSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify publish status\nvar publishStatus = {\n  \"readOnlyLiteEnabled\": true,\n  \"readOnlyFullEnabled\": false,\n  \"readWriteEnabled\": false,\n  \"icalEnabled\": false\n};\n\n// Set options\nvar options = {\n  sheetId: 4583614634583940,\n  body: publishStatus\n  };\n\n// Set publish status\nsmartsheet.sheets.setPublishStatus(options)\n  .then(function(updatedStatus) {\n    console.log(updatedStatus);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# With the Python SDK, if fewer than all four flags are set, current status is retrieved and merged with the flags that _are_ set with this method call.\n\nupdated_status = smartsheet_client.Sheets.set_publish_status(\n  4583173393803140,       # sheet_id\n  smartsheet.models.SheetPublish({\n    'read_only_lite_enabled': True\n  })\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Add Rows",
        "description": "Inserts one or more rows into the sheet specified in the URL. If you want to insert the rows in any position but the default, use [location-specifier attributes](/api/smartsheet/openapi/rows) (that is, toTop, toBottom, parentId, siblingId, above, indent, outdent). See language tabs for variations in syntax.\n\nNote: This operation does not add rows with cells that have images. However, you can upload an image to a cell *after* the cell exists in a sheet. To do so, call the operation described in the [Add Image to Cell](/api/smartsheet/openapi/cellimages/addimagetocell) page.\n\nThis operation supports both single-object and bulk semantics. For more information, see [Optional Bulk Operations](/api/smartsheet/guides/advanced-topics/scalability-options#bulk-operations).\n",
        "operationId": "rows-addToSheet",
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/allowPartialSuccess"
          },
          {
            "$ref": "#/components/parameters/overrideValidation"
          }
        ],
        "requestBody": {
          "description": "[Row object](/api/smartsheet/openapi/rows/row) or an array of Row objects, with the following attributes:\n * One or more [location-specifier attributes](/api/smartsheet/openapi/rows) (required)\n * **expanded** (optional)\n * **format** (optional)\n * **cells** (optional) -- if specified, must be an array of [Cell objects](/api/smartsheet/openapi/cells/cell), where each object is limited to the following attributes:\n   * **columnId** (required)\n   * One of the following (required):\n      * **formula**: the formula for the cell. For cross-sheet formulas, you must first define a [cross-sheet reference](/api/smartsheet/openapi/crosssheetreferences)\n      * **value**\n   * When **value** is specified\n      * [hyperlink](/api/smartsheet/openapi/schemas/widgethyperlink) (optional) with exactly one of the following attributes set:\n        * **reportId**\n        * **sheetId**\n        * **url**\n      * [linkInFromCell]() (optional) with all of the following attributes set:\n        * **columnId**\n        * **rowId**\n        * **sheetId**\n      * **strict** (optional)\n   * **format** (optional)\n   * **overrideValidation** (optional)\n * **locked** (optional) - **true** to lock the row or **false** to unlock the row.\n\nSee [Column Types](/api/smartsheet/openapi/columns) for more information.\n\n**NOTES:**\n* Column Ids must be valid for the sheet to which the row belongs, and must only be used once for each row in the operation.\n* Cells of a project sheet in the \"Finish Date\" column cannot be updated via API.\n* Cells of a project sheet in the \"Start Date\" column cannot be updated via API for rows that contain a value in the \"Predecessor\" column.\n* Max length for a cell value is 4000 characters after which truncation occurs without warning. Empty string values are converted to null.\n* When adding or updating rows, there is a 500 row limit for each API call.  \n* Calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as cell.value = \"#CIRCULAR REFERENCE\".\n* If you are adding or updating a row using *linkInFromCell*, you cannot use *overrideValidation* as a query param. In this case, you must pass *overrideValidation* in the body as a cell update field. Additionally, *linkInFromCell* requires a *value* of null.\n* Any one sheet can have up to 500,000 inbound cell links. (Smartsheet Gov has an inbound cell link limit of 100,000.) \n* If you want to clear a cell link, you can either pass *value* as an empty string or set the *value* to the current value and omit *linkInFromCell*.\n",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Row"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Row"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns [Result object](/api/smartsheet/openapi/schemas/result) containing the newly created rows -- either a single [Row object](/api/smartsheet/openapi/rows/row) or array of Row objects, corresponding to what was specified in the request, as well as the new version of the sheet.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AddRowsObject"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "When **allowPartialSuccess=false** (or not specified):\n\nIf an error occurs, the [Error object](/api/smartsheet/openapi/schemas/error) returned contains a **detail** attribute set to an object with the following attribute:\n* **index**: the array index of the row that caused the error (0 if a single Row was passed in)\n\nIf any error occurs, the entire request fails (no rows are added), and the error response returned describes the first problem that was encountered. For example:\n```\n{\n  \"errorCode\": 1042,\n  \"message\": \"The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX.\"\n  \"detail\": {\n    \"index\": 4\n  }\n}\n```\n\nWhen **allowPartialSuccess=true**:\n\nWhen partial success is enabled, and one or more of the objects in the request fail to be added/updated/deleted, a standard [Result object](/api/smartsheet/openapi/schemas/result) is returned, but with a **message** of **'PARTIAL_SUCCESS'** (instead of **'SUCCESS'**), and a **resultCode** of **3**. Additionally, the object contains a **failedItems** attribute -- an array of [BulkItemFailure objects](/api/smartsheet/openapi/schemas/bulkitemfailure) that contains an item for each object in the request that failed to be added/updated/deleted.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify cell values for first row\nCell[] cellsToInsert = new Cell[]\n{\n  new Cell\n  {\n    ColumnId = addedColumns[0].Id,\n    ObjectValue = new MultiPicklistObjectValue(new string[] {\"Bat\", \"Cat\"})\n  }\n};\nRow rowA = new Row\n{\n  ToTop = true,\n  Cells = cellsToInsert\n};\n\n// Specify cell values of second row\nCell[] cellsB = new Cell[] {\n  new Cell\n  {\n    ColumnId = 7960873114331012,\n    Value = true\n  },\n  new Cell\n  {\n    ColumnId = 642523719853956,\n    Value = \"New status\"\n  }\n};\n\n// Specify contents of second row\nRow rowB = new Row\n{\n  ToTop = true,\n  Cells = cellsB\n};\n\n// Add rows to sheet\nIList<Row> newRows = smartsheet.SheetResources.RowResources.AddRows(\n  2331373580117892,               // sheetId\n  new Row[] { rowA, rowB }        // IEnumerable<Row> rowsToAdd\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"toTop\":true, \"cells\": [ {\"columnId\": 7960873114331012, \"value\": true}, {\"columnId\": 642523719853956, \"value\": \"New status\", \"strict\": false} ] }, {\"toTop\":true, \"cells\": [ {\"columnId\": 7960873114331012, \"value\": true}, {\"columnId\": 642523719853956, \"value\": \"New status\", \"strict\": false} ] }]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify cell values for first row\nList<Cell> rowACells = Arrays.asList(\n        new Cell(7960873114331012L)   // column Id\n        .setValue(true),\n        new Cell(642523719853956L)    // column Id\n        .setValue(\"New status\")\n        );\n\n// Specify contents of first row\nRow rowA = new Row();\nrowA.setCells(rowACells)\n        .setToBottom(true);\n\n// Specify cell values for second row\nList<Cell> rowBCells = Arrays.asList(\n        new Cell(7960873114331012L)\n        .setValue(true),\n        new Cell(642523719853956L)\n        .setValue(\"New status\")\n        );\n\n// Specify contents of second row\nRow rowB = new Row();\nrowB.setCells(rowBCells)\n        .setToBottom(true);\n\n// Add rows to sheet\nList<Row> newRows = smartsheet.sheetResources().rowResources().addRows(\n        1639534409607044L,    // sheet Id\n        Arrays.asList(rowA, rowB));\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify rows\nvar row = [\n  {\n    \"toTop\": true,\n    \"cells\": [\n      {\n        \"columnId\": 7960873114331012,\n        \"value\": true\n      },\n      {\n        \"columnId\": 642523719853956,\n        \"value\": \"New status\",\n        \"strict\": false\n      }\n    ]\n  },\n  {\n    \"toTop\": true,\n    \"cells\": [\n      {\n        \"columnId\": 7960873114331012,\n        \"value\": true\n      },\n      {\n        \"columnId\": 642523719853956,\n        \"value\": \"New status\",\n        \"strict\": false\n      }\n    ]\n  }\n];\n\n// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  body: row\n  };\n\n// Add rows to sheet\nsmartsheet.sheets.addRows(options)\n  .then(function(newRows) {\n    console.log(newRows);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Specify cell values for one row\nrow_a = smartsheet.models.Row()\nrow_a.to_top = True\nrow_a.cells.append({\n  'column_id': 7960873114331012,\n  'value': True\n})\nrow_a.cells.append({\n  'column_id': 642523719853956\n  'value': 'New Status',\n  'strict': False\n})\n\n# Specify cell values for another row\nrow_b = smartsheet.models.Row()\nrow_b.to_top = True\nrow_b.cells.append({\n  'column_id': 7960873114331012,\n  'value': True\n})\nrow_b.cells.append({\n  'column_id': 642523719853956\n  'value': 'New Status',\n  'strict': False\n})\n\n# Add rows to sheet\nresponse = smartsheet_client.Sheets.add_rows(\n  2331373580117892,       # sheet_id\n  [row_a, row_b])\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Rows",
        "description": "Deletes one or more rows from the sheet specified in the URL.",
        "operationId": "delete-rows",
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/rowIds"
          },
          {
            "$ref": "#/components/parameters/ignoreRowsNotFound"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns [Result object](/api/smartsheet/openapi/schemas/result) containing row Ids corresponding to all rows that were successfully deleted (including any child rows of rows specified in the URL).",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify 'ignoreRowsNotFound' parameter with value of 'true'\nsmartsheet.SheetResources.RowResources.DeleteRows(\n  2252168947361668,                                    // sheetId\n  new long[] { 207098194749316, 207098194749317 },     // rowIds\n  true                                                 // Boolean ignoreRowsNotFound\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows?ids={rowId1},{rowId2},{rowId3}&ignoreRowsNotFound=true' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify 'ignoreRowsNotFound' parameter with value of 'true'\nsmartsheet.sheetResources().rowResources().deleteRows(\n        2252168947361668L,               // long sheetId\n        new HashSet(Arrays.asList(\n        207098194749316L,            // long rowId,\n        207098194749317L,            // long additional rowId\n        207098194749318L,)           // long additional rowId\n        true                             // Boolean ignoreRowsNotFound\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  rowId: 207098194749316\n};\n\n// Delete row\nsmartsheet.sheets.deleteRow(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.delete_rows(\n  2252168947361668,                       # sheet_id\n  [207098194749316, 207098194749317])     # row_ids\n"
          }
        ]
      },
      "put": {
        "summary": "Update Rows",
        "description": "Updates cell values in the specified rows, expands/collapses the specified rows, or modifies the position of specified rows (including indenting/outdenting). For detailed information about changing row positions, see [location-specifier attributes](/api/smartsheet/openapi/rows).\n\nNote: This operation does not handle adding images to cells. However, you can upload an image to a cell by calling the operation described in the [Add Image to Cell](/api/smartsheet/openapi/cellimages/addimagetocell) page.\n",
        "operationId": "update-rows",
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/allowPartialSuccess"
          },
          {
            "$ref": "#/components/parameters/overrideValidation"
          }
        ],
        "requestBody": {
          "description": "[Row object](/api/smartsheet/openapi/rows/row) or an array of Row objects, with the following attributes:\n* **id** (required)\n* One or more [location-specifier attributes](/api/smartsheet/openapi/rows) (optional)\n* **expanded** (optional)\n* **format** (optional)\n* **cells** (optional) -- if specified, must be an array of [Cell objects](/api/smartsheet/openapi/cells/cell), where each object is limited to the following attributes:\n  * **columnId** (required)\n  * One of the following (required):\n    * **formula**: the formula for the cell. For cross-sheet formulas, you must first define a [cross-sheet reference](/api/smartsheet/openapi/crosssheetreferences)\n    * **value**: a desired value, a label for a **hyperlink** you're inserting (see below), or an empty string `\"\"` if you're linking to another cell (see **linkInFromCell** below).\n  * **hyperlink**: (optional) a link to a report, sheet, or URL. Note, you must set the **value** attribute (e.g., set to a label you want or set to an empty string `\"\"` to use the linked item's title). Specify the one attribute applicable to the item you're linking:\n      * **reportId**\n      * **sheetId**\n      * **url**\n  * **linkInFromCell** (optional) links in another cell's value. Smartsheet synchronizes the source cell into this cell. Note, the synchronization may take several minutes. Set all of the following attributes:\n    * **columnId**\n    * **rowId**\n    * **sheetId**\n  * **strict** (optional) - Set it `false` for lenient value parsing; default is `true`. See [Cell value parsing](/api/smartsheet/openapi/cells) for details.\n  * **format** (optional)\n  * **image** (optional) -- object for setting a cell image's attributes, such as its alternate text (e.g., `altText = string`).\n  * **overrideValidation** (optional)\n* **locked** (optional) - **true** to lock the row or **false** to unlock the row.\n\nSee [Column Types](/api/smartsheet/openapi/columns) for more information.\n\n**NOTE:**\n* Column Ids must be valid for the sheet to which the row belongs, and must only be used once for each row in the operation.\n* Cells of a project sheet in the \"Finish Date\" column cannot be updated via API.\n* Cells of a project sheet in the \"Start Date\" column cannot be updated via API for rows that contain a value in the \"Predecessor\" column.\n* Max length for a cell value is 4000 characters after which truncation occurs without warning. Empty string values are converted to null.\n* Calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as cell.value = \"#CIRCULAR REFERENCE\".\n",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Row"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Row"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns [Result object](/api/smartsheet/openapi/schemas/result) containing an array of the updated rows.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UpdateRowsObject"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "When **allowPartialSuccess=false** (or not specified):\n\nIf an error occurs, the [Error object](/api/smartsheet/openapi/schemas/error) returned contains a **detail** attribute set to an object with the following attribute:\n* **index**: the array index of the row that caused the error (0 if a single Row was passed in)\n* **rowId**: the id of the row that caused the error (omitted if the row was missing an Id)\n\nIf any error occurs, the entire request fails (no rows are added), and the error response returned describes the first problem that was encountered. For example:\n```\n{\n\"errorCode\": 1042,\n\"message\": \"The cell value in column 5504245941200772 did not conform to the strict requirements for type CHECKBOX.\"\n\"detail\": {\n  \"index\": 4\n  \"rowId\": 6572427401553796\n  }\n}\n```\nWhen **allowPartialSuccess=true**:\n\nWhen partial success is enabled, and one or more of the objects in the request fail to be added/updated/deleted, a standard [Result object](/api/smartsheet/openapi/schemas/result) is returned, but with a **message** of **'PARTIAL_SUCCESS'** (instead of **'SUCCESS'**), and a **resultCode** of **3**. Additionally, the object contains a **failedItems** attribute -- an array of [BulkItemFailure objects](/api/smartsheet/openapi/schemas/bulkitemfailure) that contains an item for each object in the request that failed to be added/updated/deleted.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify updated value for first cell\nvar cellToUpdateA = new Cell\n{\n  ColumnId = 7518312134403972,\n  Value = \"new value\"\n};\n\n// Specify updated value for second cell\nvar cellToUpdateB = new Cell\n{\n  ColumnId = 1888812600190852,\n  Value = \"A\"\n};\n\n// Identify row and add new cell values to it\nvar rowToUpdate = new Row\n{\n  Id = 6572427401553796,\n  Cells = new Cell[] { cellToUpdateA, cellToUpdateB }\n};\n\nIList<Row> updatedRow = smartsheet.SheetResources.RowResources.UpdateRows(\n  2068827774183300,    // sheet Id\n  new Row[] {rowToUpdate}\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '[{\"id\": \"6572427401553796\", \"cells\": [{\"columnId\": 7518312134403972,\"image\": {\"altText\": \"New Alt Text\"},\"value\": \"new value\"}, {\"columnId\": 1888812600190852,\"value\": \"A\"}]}, {\"id\": \"2068827774183300\", \"cells\": [{\"columnId\": 7518312134403972,\"value\": \"desc_updated\"}, {\"columnId\": 1888812600190852,\"value\": \"B\"}, {\"columnId\": 6552023773538180,\"objectValue\": {\"objectType\": \"MULTI_CONTACT\",\"values\": [{\"objectType\": \"CONTACT\",\"email\": \"john.doe@smartsheet.com\",\"name\": \"John Doe\"}, {\"objectType\": \"CONTACT\",\"email\": \"jane.roe@smartsheet.com\",\"name\": \"Jane Roe\"}]}}]}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify updated cell values for first row\nCell cellA = new Cell(7518312134403972L)   // column Id\n        .setValue(\"new value\");\n\nCell cellB = new Cell(6392412227561348L)   // column Id\n        .setValue(123);\n\nRow rowA = new Row(2068827774183300L);\n        rowA.setCells(Arrays.asList(cellA, cellB));\n\n// Specify updated cell values for second row\nCell cellC = new Cell(7518312134403972L)\n        .setValue(\"desc_updated\");\n\nCell cellD = new Cell(6392412227561348L)\n        .setValue(456);\n\nRow rowB = new Row(6572427401553796L);\n        rowB.setCells(Arrays.asList(cellC, cellD));\n\n// Update rows in sheet\nList<Row> updatedRows = smartsheet.sheetResources().rowResources().updateRows(\n        1639534409607044L,                      // long sheetId\n        Arrays.asList(rowA, rowB)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify updated cell values\nvar row = [\n  {\n    \"id\": \"6572427401553796\",\n    \"cells\": [\n      {\n        \"columnId\": 7518312134403972,\n        \"value\": \"new value\"\n      },\n      {\n        \"columnId\": 1888812600190852,\n        \"value\": \"A\"\n      }\n    ]\n  },\n  {\n    \"id\": \"2068827774183300\",\n    \"cells\": [\n      {\n        \"columnId\": 7518312134403972,\n        \"value\": \"desc_updated\"\n      },\n      {\n        \"columnId\": 1888812600190852,\n        \"value\": \"B\"\n      }\n    ]\n  }\n];\n\n// Set options\nvar options = {\n  sheetId: 2068827774183300,\n  body: row\n  };\n\n// Update rows in sheet\nsmartsheet.sheets.updateRow(options)\n  .then(function(updatedRows) {\n    console.log(updatedRows);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Build new cell value\nnew_cell = smartsheet.models.Cell()\nnew_cell.column_id = 7036894123976580\nnew_cell.value = \"new value\"\nnew_cell.strict = False\n\n# Build the row to update\nnew_row = smartsheet.models.Row()\nnew_row.id = 6809535313667972\nnew_row.cells.append(new_cell)\n\n# Update rows\nupdated_row = smartsheet_client.Sheets.update_rows(\n  2068827774183300,      # sheet_id\n  [new_row])\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/emails": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Send Rows via Email",
        "description": "Sends one or more rows via email.",
        "operationId": "rows-send",
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "The columns included for each row in the email are populated according to the following rules:\n* If the **columnIds** attribute of the MultiRowEmail object is specified as an array of column Ids, those specific columns are included.\n* If the **columnIds** attribute of the MultiRowEmail object is omitted, all columns except hidden columns shall be included.\n* If the **columnIds** attribute of the MultiRowEmail object is specified as empty, no columns shall be included. (**NOTE:** In this case, either **includeAttachments=true** or **includeDiscussions=true** must be specified.)\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiRowEmail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify recipients\nRecipient[] recipients = new Recipient[] {\n  new Recipient { Email = \"recipient@smartsheet.com\" }\n};\n\n// Configure email\nMultiRowEmail multiRowEmail = new MultiRowEmail {\n  SendTo = recipients,\n  Subject = \"some subject\",\n  Message = \"some message\",\n  CcMe = false,\n  RowIds = new long[] { 6327127650920324, 3404239197235076 },\n  ColumnIds = new long[] { 5190835902932868, 3791509922310020 },\n  IncludeAttachments = false,\n  IncludeDiscussions = false\n};\n\n// Send rows via email\nsmartsheet.SheetResources.RowResources.SendRows(4293147074291588, multiRowEmail);       // sheetId\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/emails \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\n  \"sendTo\": [\n    {\"email\": \"recipient@smartsheet.com\"}\n  ],\n  \"subject\": \"Check these rows out!\",\n  \"message\": \"Here are the rows I mentioned in our meeting\",\n  \"ccMe\": false,\n  \"rowIds\": [\n    6327127650920324, 3404239197235076\n  ],\n  \"columnIds\": [\n    5190835902932868, 3791509922310020\n  ],\n  \"includeAttachments\": false,\n  \"includeDiscussions\": false\n}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify recipients\nRecipientEmail recipientEmail = new RecipientEmail.AddRecipientEmailBuilder()\n        .setEmail(\"recipient@smartsheet.com\")\n        .build();\n\nList<Recipient> recipients = new ArrayList<Recipient>();\nrecipients.add(recipientEmail);\n\n// Configure email\nMultiRowEmail multiRowEmail = new MultiRowEmail.AddMultiRowEmailBuilder()\n        .setSendTo(recipients)\n        .setSubject(\"some subject\")\n        .setMessage(\"some message\")\n        .setCcMe(false)\n        .setRowIds(Arrays.asList(6327127650920324L, 3404239197235076L)\n        .setColumnIds(Arrays.asList(5190835902932868L, 3791509922310020L)\n        .setIncludeAttachments(false)\n        .setIncludeDiscussions(false)\n        .build();\n\n// Send rows via email\nsmartsheet.sheetResources().rowResources().sendRows(4293147074291588L, multiRowEmail);   // sheetId\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Configure email\nvar email = {\n  \"sendTo\": [\n    {\n      \"email\": \"john.doe@smartsheet.com\"\n    },\n    {\n      \"groupId\": 2258118617917316\n    }\n  ],\n  \"subject\": \"Check these rows out!\",\n  \"message\": \"Here are the rows I mentioned in our meeting\",\n  \"ccMe\": false,\n  \"includeDiscussions\": false,\n  \"includeAttachments\": true,\n  \"rowIds\": [\n    1049041315358596,\n    5552640942729092\n  ]\n};\n\n// Set options\nvar options = {\n  \"body\": email,\n  \"sheetId\": 2252168947361668\n};\n\n// Send row via email\nsmartsheet.sheets.sendRows(options)\n  .then(function(data) {\n    console.log(data);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Configure email\nemail = smartsheet.models.MultiRowEmail()\nemail.send_to = smartsheet.models.Recipient({\n  'email': 'john.doe@smartsheet.com'\n})\nemail.row_ids = [6327127650920324, 3404239197235076]\nemail.column_ids = [5190835902932868, 3791509922310020]\n\n# Send rows via email\nresponse = smartsheet_client.Sheets.send_rows(\n  4293147074291588,       # sheet_id\n  email)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/copy": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Copy Rows to Another Sheet",
        "description": "Copies rows from the sheet specified in the URL to (the bottom of) another sheet.",
        "operationId": "copy-rows",
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/copyRowsInclude"
          },
          {
            "$ref": "#/components/parameters/ignoreRowsNotFoundForCopyRows"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyOrMoveRowDirective"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CopyOrMoveRowResult object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CopyOrMoveRowResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination sheet\nCopyOrMoveRowDestination destination = new CopyOrMoveRowDestination { SheetId = 2258256056870788 };\n\n// Specify rows to be copied (and destination sheet)\nCopyOrMoveRowDirective directive = new CopyOrMoveRowDirective { RowIds = new long[] { 145417762563972, 8026717110462340 }, To = destination };\n\n// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters\nCopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.CopyRowsToAnotherSheet(\n  4583173393803140,           // sheetId\n  directive,\n  null,                       // IEnumerable<CopyRowInclusion> include\n  null                        // Nullable<bool> ignoreRowsNotFound\n);\n\n// Sample 2: Specify 'include' parameter with value of \"CHILDREN\", and 'ignoreRowsNotFound' parameter with value of 'true'\nCopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.CopyRowsToAnotherSheet(\n  4583173393803140,           // sheetId\n  directive,\n  new CopyRowInclusion[] {\n    CopyRowInclusion.CHILDREN },\n  true\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/copy \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{ \"rowIds\": [145417762563972, 8026717110462340], \"to\": {\"sheetId\": 2258256056870788} }'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination sheet\nCopyOrMoveRowDestination destination = new CopyOrMoveRowDestination()\n        .setSheetId(2258256056870788L);\n\n// Specify rows to be copied (and destination sheet)\nCopyOrMoveRowDirective directive = new CopyOrMoveRowDirective()\n        .setRowIds(Arrays.asList(145417762563972L, 8026717110462340L))\n        .setTo(destination);\n\n// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters\nCopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().copyRows(\n        4583173393803140L,                        // long sheetId\n        null,                                     // EnumSet<RowCopyInclusion> includes\n        true,                                     // Boolean ignoreRowsNotFound\n        directive\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"CHILDREN\", and 'ignoreRowsNotFound' parameter with value of 'true'\nCopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().copyRows(\n        4583173393803140L,                        // long sheetId\n        EnumSet.of(RowCopyInclusion.CHILDREN),\n        true,\n        directive\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify the directive\nvar copyRow = {\n  \"rowIds\": [145417762563972,8026717110462340],\n  \"to\": {\n    \"sheetId\": 2258256056870788\n  }\n};\n\n// Set options\nvar options = {\n  sheetId: 4583173393803140,\n  body: copyRow\n  };\n\n// Copy rows\nsmartsheet.sheets.copyRowToAnotherSheet(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sheets.copy_rows(\n  4583173393803140,               # sheet_id of rows to be copied\n  smartsheet.models.CopyOrMoveRowDirective({\n    'row_ids': [145417762563972, 8026717110462340],\n    'to': smartsheet.models.CopyOrMoveRowDestination({\n      'sheet_id': 2258256056870788\n    })\n  })\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/move": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Move Rows to Another Sheet",
        "description": "Moves rows from the sheet specified in the URL to (the bottom of) another sheet.",
        "operationId": "move-rows",
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/moveRowsInclude"
          },
          {
            "$ref": "#/components/parameters/ignoreRowsNotFoundForMoveRows"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyOrMoveRowDirective"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CopyOrMoveRowResult object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CopyOrMoveRowResult"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination sheet\nCopyOrMoveRowDestination destination = new CopyOrMoveRowDestination { SheetId = 2258256056870788 };\n\n// Specify rows to be moved (and destination sheet)\nCopyOrMoveRowDirective directive = new CopyOrMoveRowDirective { RowIds = new long[] { 145417762563972, 8026717110462340 }, To = destination };\n\n// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters\nCopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.MoveRowsToAnotherSheet(\n  4583173393803140,               // sheetId\n  directive,\n  null,                           // IEnumerable<MoveRowInclusion> include\n  null                            // Nullable<bool> ignoreRowsNotFound\n);\n\n// Sample 2: Specify 'include' parameter with value of \"ATTACHMENTS\" and \"DISCUSSIONS\", and 'ignoreRowsNotFound' parameter with value of 'true'\nCopyOrMoveRowResult results = smartsheet.SheetResources.RowResources.MoveRowsToAnotherSheet(\n  4583173393803140,               // sheetId\n  directive,\n  new MoveRowInclusion[] {\n    MoveRowInclusion.ATTACHMENTS,\n    MoveRowInclusion.DISCUSSIONS },\n  true                            // Nullable<bool> ignoreRowsNotFound\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/move \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{ \"rowIds\": [145417762563972, 8026717110462340], \"to\": {\"sheetId\": 2258256056870788} }'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination sheet\nCopyOrMoveRowDestination destination = new CopyOrMoveRowDestination()\n        .setSheetId(2258256056870788L);\n\n// Specify rows to be moved (and destination sheet)\nCopyOrMoveRowDirective directive = new CopyOrMoveRowDirective()\n        .setRowIds(Arrays.asList(145417762563972L, 8026717110462340L))\n        .setTo(destination);\n\n// Sample 1: Omit 'include' and 'ignoreRowsNotFound' parameters\nCopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().moveRows(\n        4583173393803140L,                  // long sheetId\n        null,                               // EnumSet<RowMoveInclusion> includes\n        true,                               // Boolean ignoreRowsNotFound\n        directive\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"ATTACHMENTS\" and \"DISCUSSIONS\", and 'ignoreRowsNotFound' parameter with value of 'true'\nCopyOrMoveRowResult results = smartsheet.sheetResources().rowResources().moveRows(\n        4583173393803140L,                  // long sheetId\n        EnumSet.of(\n        RowMoveInclusion.ATTACHMENTS,\n        RowMoveInclusion.DISCUSSIONS),\n        true,                               // Boolean ignoreRowsNotFound\n        directive\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify the directive\nvar moveRow = {\n  \"rowIds\": [145417762563972,8026717110462340],\n  \"to\": {\n    \"sheetId\": 2258256056870788\n  }\n};\n\n// Set options\nvar options = {\n  sheetId: 4583173393803140,\n  body: moveRow\n  };\n\n// Move rows\nsmartsheet.sheets.moveRowToAnotherSheet(options)\n  .then(function(movedRow) {\n    console.log(movedRow);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sheets.move_rows(\n  4583173393803140,           # sheet_id of rows to be moved\n  smartsheet.models.CopyOrMoveRowDirective({\n    'row_ids': [145417762563972, 8026717110462340],\n    'to': smartsheet.models.CopyOrMoveRowDestination({\n      'sheet_id': 2258256056870788\n    })\n  })\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/{rowId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/rowId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Row",
        "description": "Gets the row specified in the URL.",
        "operationId": "row-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/rowInclude"
          },
          {
            "$ref": "#/components/parameters/sheetExclude"
          },
          {
            "$ref": "#/components/parameters/sheetLevel"
          }
        ],
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns [Row object]() populated according to the specified parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GetRowObject"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit 'include' parameter and pagination parameters\nRow row = smartsheet.SheetResources.RowResources.GetRow(\n  4583173393803140,               // sheetId\n  2361756178769796,               // rowId\n  null,                           // IEnumerable<RowInclusion> include\n  null                            // IEnumerable<RowExclusion> exclude\n);\n\n// Specify 'include' parameter with values of \"COLUMNS\" and \"COLUMN_TYPE\", and 'exclude' parameter with value of \"NONEXISTENT_CELLS\"\nRow row = smartsheet.SheetResources.RowResources.GetRow(\n  4583173393803140,               // sheetId\n  2361756178769796,               // rowId\n  new RowInclusion[] {\n    RowInclusion.COLUMNS,\n    RowInclusion.COLUMN_TYPE },\n  new ObjectExclusion[] { ObjectExclusion.NONEXISTENT_CELLS }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}?include=discussions,attachments,columns,columnType' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nRow row = smartsheet.sheetResources().rowResources().getRow(\n        4583173393803140L,       // long sheetId\n        2361756178769796L,       // long rowId\n        null,                    // EnumSet<RowInclusion> includes\n        null                     // EnumSet<ObjectExclusion> excludes\n        );\n\n// Sample 2: Specify 'include' parameter with values of \"COLUMNS\" and \"COLUMN_TYPE\", and 'exclude' parameter with value of \"NONEXISTENT_CELLS\"\nRow row = smartsheet.sheetResources().rowResources().getRow(\n        4583173393803140L,       // long sheetId\n        2361756178769796L,       // long rowId\n        EnumSet.of(\n        RowInclusion.COLUMNS,\n        RowInclusion.COLUMN_TYPE),\n        EnumSet.of(\n        ObjectExclusion.NONEXISTENT_CELLS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 4583173393803140,\n  rowId: 2361756178769796\n};\n\n// Get row\nsmartsheet.sheets.getRow(options)\n  .then(function(row) {\n    console.log(row);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get row\nrow = smartsheet_client.Sheets.get_row(\n  4583173393803140,       # sheet_id\n  2361756178769796        # row_id\n)\n\n# Sample 2: Include discussions, attachments, columns, and columnType\nrow = smartsheet_client.Sheets.get_row(\n  4583173393803140,       # sheet_id\n  2361756178769796,       # row_id\n  include='discussions,attachments,columns,columnType'\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/{rowId}/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/rowId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Row Attachments",
        "description": "Gets a list of all attachments that are on the row, including row and discussion-level attachments.\n",
        "operationId": "attachments-listOnRow",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of attachments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Attachment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Attachment> attachments = smartsheet.SheetResources.RowResources.AttachmentResources.ListAttachments(\n  2252168947361668,               // sheetId\n  4293147074291588,               // rowId\n  null                            // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination\nPagedResult<Attachment> attachments = smartsheet.sheetResources().rowResources().attachmentResources().getAttachments(\n        2252168947361668L,       // long sheetId\n        4293147074291588L,       // long rowId\n        null                     // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  rowId: 4293147074291588\n};\n\n// List row attachments\nsmartsheet.sheets.getRowAttachments(options)\n  .then(function(attachmentsList) {\n      console.log(attachmentsList);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Attachments.list_row_attachments(\n  2252168947361668,       # sheet_id\n  4293147074291588,       # row_id\n  include_all=True)\nattachments = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Attachments.list_row_attachments(\n  2252168947361668,       # sheet_id\n  4293147074291588,       # row_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nattachments = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Attach File or URL to Row",
        "description": "Attaches a file to the row. The URL can be any of the following:\n\n* Normal URL (attachmentType \"LINK\")\n* Box.com URL (attachmentType \"BOX_COM\")\n* Dropbox URL (attachmentType \"DROPBOX\")\n* Egnyte URL (attachmentType \"EGNYTE\")\n* Evernote URL (attachmentType \"EVERNOTE\")\n* Google Drive URL (attachmentType \"GOOGLE_DRIVE\")\n* OneDrive URL (attachmentType \"ONEDRIVE\")\n\n>**Important:** Smartsheet Gov allows only the following attachment types:\n> - BOX_COM\n> - FILE\n> - GOOGLE_DRIVE\n> - LINK\n> - ONEDRIVEß\n\nFor multipart uploads please use \"multipart/form-data\" content type.\n",
        "operationId": "row-attachments-attachFile",
        "tags": [
          "attachments"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/URLAttachmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Attachment"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Attachment attachment = smartsheet.SheetResources.RowResources.AttachmentResources.AttachFile(\n  9283173393803140,           // sheetId\n  0123456789012345,           // rowId\n  filePath,\n  \"application/msword\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/attachments \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/msword\" \\\n-H 'Content-Disposition: attachment; filename=\"ProgressReport.docx\"' \\\n-H \"Content-Length: FILE_SIZE\" \\\n-X POST \\\n--data-binary @ProgressReport.docx\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify file to be attached\nFile file = new File(\"/Users/jdoe/Documents/ProgressReport.docx\");\n\n// Attach file to row\n        Attachment attachment = smartsheet.sheetResources().rowResources().attachmentResources().attachFile(\n        9283173393803140L,       // long sheetId\n        0123456789012345L,       // long rowId\n        file,\n        \"application/msword\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Enable FileStream\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  sheetId: 1696803624483716,\n  rowId: 1049041355358596,\n  fileSize: 20765,\n  fileName: \"ProgressReport.docx\",\n  fileStream: fs.createReadStream(\"/Users/jdoe/Documents/ProgressReport.docx\")\n};\n\n// Attach file to row\nsmartsheet.sheets.addRowFileAttachment(options)\n  .then(function(attachment) {\n      console.log(attachment);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_attachment = smartsheet_client.Attachments.attach_file_to_row(\n  9283173393803140,       # sheet_id\n  0123456789012345,       # row_id\n  ('ProgressReport.docx',\n    open('/path/to/ProgressReport.docx', 'rb'),\n    'application/msword')\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/rowId"
        },
        {
          "$ref": "#/components/parameters/columnId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Add Image to Cell",
        "description": "Uploads an image to the specified cell within a sheet.",
        "operationId": "addImageToCell",
        "tags": [
          "cellImages"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Content-Disposition"
          },
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/altText"
          },
          {
            "$ref": "#/components/parameters/overrideValidation"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Row"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set options\nImage image = new Image\n  {\n    AltText = \"Caution Sign\",\n    Height = 16,\n    Width = 16\n  };\n\nsmartsheet.SheetResources.RowResources.CellResources.AddImageToCell(\n  1696831624483716, // sheetId\n  1049441315358596, // rowId\n  74761903175665540, // columnId\n  \"/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png\",\n  \"image\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/cellimages?altText=my%20image' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: image/jpeg\" \\\n-H 'Content-Disposition: attachment; filename=\"picture.jpg\"' \\\n-H \"Content-Length: FILE_SIZE\" \\\n-X POST \\\n--data-binary @picture.jpg\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set options\nImage image = new Image()\n        .setAltText(\"Caution sign\")\n        .setHeight(16L)\n        .setWidth(16L);\n\n        smartsheet.sheetResources().rowResources().cellResources().addImageToCell(\n        1639534409607044L,      // sheetId\n        1049441315358596L,      // rowId\n        74761903175665540L,      // columnId\n        \"/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png\",\n        \"image\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Enable FileStream\nvar fs = require(\"fs\")\n\n// Set options\nvar options = {\n  sheetId: 1696831624483716,\n  rowId: 1049441315358596,\n  columnId: 74761903175665540,\n  fileSize: 458,    // Must be exact bytes; no rounding\n  fileName: \"img_pl_decisionshapesHold.png\",\n  fileStream: fs.createReadStream(\"/Users/jroe/Documents/images/img_pl_decisionshapesHold.png\"),\n  queryParameters: {\n    \"altText\": \"Caution sign\",\n    \"overrideValidation\": true\n  }\n};\n\n// Add image to cell\nsmartsheet.sheets.addImageToCell(options)\n  .then(function(image) {\n    console.log(image);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "sheet_id = 1696831624483716\ncolumn_id = 74761903175665540\nrow_id = 1049441315358596\ncaution_pic = \"/Users/jdoe/Documents/images/img_pl_decisionshapesHold.png\"\nfile_type = \"png\"\nsmartsheet_client.Cells.add_image_to_cell(sheet_id, row_id, column_id, caution_pic, file_type)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/rowId"
        },
        {
          "$ref": "#/components/parameters/columnId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Cell History",
        "description": "Gets the cell modification history.\n",
        "operationId": "cellHistory-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/cellHistoryInclude"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sheetLevel"
          }
        ],
        "tags": [
          "cells"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of cell history objects",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CellHistory"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nPaginatedResult<CellHistory> results = smartsheet.SheetResources.RowResources.CellResources.GetCellHistory(\n  9283173393803140,               // sheetId\n  0123456789012345,               // rowId\n  4567890123456789,               // columnId\n  null,                           // IEnumerable<CellInclusion> includes\n  null                            // PaginationParameters\n);\n\n// Sample 2: Specify 'include' parameter with value of \"COLUMN_TYPE\" and 'includeAll' parameter with value of 'true'\nPaginatedResult<CellHistory> results = smartsheet.SheetResources.RowResources.CellResources.GetCellHistory(\n  9283173393803140,               // sheetId\n  0123456789012345,               // rowId\n  4567890123456789,               // columnId\n  new CellInclusion[] { CellInclusion.COLUMN_TYPE },\n  new PaginationParameters(\n    true,                       // Boolean includeAll\n    null,                       // int pageSize\n    null)                       // int page\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/columns/{columnId}/history?include=columnType' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination\nPagedResult<CellHistory> cellHistory = smartsheet.sheetResources().rowResources().cellResources().getCellHistory(\n        9283173393803140L,       // long sheetId\n        0123456789012345L,       // long rowId\n        4567890123456789L,       // long columnId\n        null                     // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 9283173393803140,\n  rowId: 0123456789012345,\n  columnId: 4567890123456789\n};\n\n// Get cell history\nsmartsheet.sheets.getCellHistory(options)\n  .then(function(history) {\n      console.log(history);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get history\nresponse = smartsheet_client.Cells.get_cell_history(\n  9283173393803140,       # sheet_id\n  0123456789012345,       # row_id\n  4567890123456789,       # column_id\n  include_all=True)\nrevisions = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Cells.get_cell_history(\n  9283173393803140,       # sheet_id\n  0123456789012345,       # row_id\n  4567890123456789,       # column_id\n  page_size=5,\n  page=1)\npages = response.total_pages\nrevisions = response.data\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/{rowId}/discussions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/rowId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Discussions with a Row",
        "description": "Gets a list of all discussions associated with the specified row. Remember that discussions are containers\nfor the conversation thread. To see the entire thread, use the include=comments parameter.\n",
        "operationId": "row-discussions-list",
        "tags": [
          "discussions"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/discussionInclude"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of discussions",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Discussion"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nPaginatedResult<Discussion> results = smartsheet.SheetResources.RowResources.DiscussionResources.ListDiscussions(\n  2252168947361668,                   // sheetId\n  4293147074291588,                   // rowId\n  null,                               // IEnumerable<DiscussionInclusion> include\n  null                                // PaginationParameters\n);\n\n// Sample 2: Specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true'\nPaginatedResult<Discussion> results = smartsheet.SheetResources.RowResources.DiscussionResources.ListDiscussions(\n  2252168947361668,                   // sheetId\n  4293147074291588,                   // rowId\n  new DiscussionInclusion[] { DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS },\n  new PaginationParameters(\n    true,                           // includeAll\n    null,                           // int pageSize\n    null)                           // int page\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions?include=comments,attachments' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include' parameter and pagination parameters\nPagedResult<Discussion> results = smartsheet.sheetResources().rowResources().discussionResources().listDiscussions(\n        2252168947361668L,       // long sheetId\n        4293147074291588L,       // long rowId\n        null,                    // PaginationParameters\n        null                     // EnumSet<DiscussionInclusion> includes\n        );\n\n// Sample 2: Specify pagination parameter 'includeAll'\nPaginationParameters parameters = new PaginationParameters()\n        .setIncludeAll(true);\n\n// Get all row discussions (specify 'include' parameter with values of 'COMMENTS' and 'ATTACHMENTS', and 'includeAll' parameter with value of 'true')\nPagedResult<Discussion> results = smartsheet.sheetResources().rowResources().discussionResources().listDiscussions(\n        2252168947361668L,       // long sheetId\n        4293147074291588L,       // long rowId\n        parameters,\n        EnumSet.of(DiscussionInclusion.COMMENTS, DiscussionInclusion.ATTACHMENTS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  rowId: 4293147074291588\n};\n\n// List row discussions\nsmartsheet.sheets.getRowDiscussions(options)\n  .then(function(discussionList) {\n    console.log(discussionList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Discussions.get_row_discussions(\n  2252168947361668,               # sheet_id\n  4293147074291588,               # row_id\n  include_all=True)\ndiscussions = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Discussions.get_row_discussions(\n  2252168947361668,               # sheet_id\n  4293147074291588,               # row_id\n  page_size=10)\npages = response.total_pages          # starts on page 1 by default\ndiscussions = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create a Discussion on a Row",
        "description": "Creates a new discussion on a row. To create a discussion with an attachment please use \"multipart/form-data\" content type.\n",
        "operationId": "row-discussions-create",
        "tags": [
          "discussions"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionCreationRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionCreationRequestWithAttachment"
              },
              "encoding": {
                "discussion": {
                  "contentType": "application/json"
                },
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Discussion"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Example request: create discussion on row (without attachment)\n\n// Create discussion (including the comment)\nDiscussion discussionSpecification = new Discussion\n{\n  Comment = new Comment\n    {\n      Text = \"This text is the body of the first comment\"\n    },\n  Comments = null         // workaround for SDK issue\n};\n\n// Add discussion to row\nDiscussion newDiscussion = smartsheet.SheetResources.RowResources.DiscussionResources.CreateDiscussion(\n  9283173393803140,               // sheetId\n  0123456789012345,               // rowId\n  discussionSpecification\n);\n\n// Example request: create discussion on row (with attachment)\n\n// Create discussion (including the comment)\nDiscussion discussionSpecification = new Discussion\n{\n  Comment = new Comment\n  {\n    Text = \"This text is the body of the first comment\"\n  },\n  Comments = null         // workaround for SDK issue\n};\n\n// Add discussion to row\nDiscussion newDiscussion = smartsheet.SheetResources.RowResources.DiscussionResources.CreateDiscussionWithAttachment(\n  9283173393803140,                   // sheetId\n  0123456789012345,                   // rowId\n  discussionSpecification,\n  filePath,\n  \"application/octet-stream\"\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: create discussion on row (without attachment)\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"comment\": {\"text\":\"This text is the body of the first comment\"}}'\n\n# Example request: create discussion on row (with attachment)\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/discussions \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: multipart/form-data\" \\\n-X POST \\\n-F 'discussion={ \"comment\": { \"text\": \"This text is the body of the first comment\" } };type=application/json' \\\n-F \"file=@insurance_benefits.pdf;type=application/octet-stream\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Example request: create discussion on row (without attachment)\n\n// Create comment\nComment commentSpecification = new Comment()\n        .setText(\"This text is the body of the first comment\");\n\n// Create discussion (including the comment)\n        Discussion discussionSpecification = new Discussion()\n        .setComment(commentSpecification)\n        .setComments(null);     // workaround for SDK issue\n\n// Add discussion to row\n        Discussion newDiscussion = smartsheet.sheetResources().rowResources().discussionResources().createDiscussion(\n        9283173393803140L,       // sheetId\n        0123456789012345L,       // rowId\n        discussionSpecification\n        );\n\n// Example request: create discussion on row (with attachment)\n\n// Create comment\n        Comment commentSpecification = new Comment()\n        .setText(\"This text is the body of the first comment\");\n\n// Create discussion (including the comment)\n        Discussion discussionSpecification = new Discussion()\n        .setComment(commentSpecification)\n        .setComments(null);     // workaround for SDK issue\n\n// Set file path\n        File file = new File(filePath);\n\n// Add discussion to row\n        Discussion newDiscussion = smartsheet.sheetResources().rowResources().discussionResources().createDiscussionWithAttachment(\n        9283173393803140L,       // long sheetId\n        0123456789012345L,       // long rowId\n        discussionSpecification,\n        file,\n        \"application/octet-stream\"\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Example request: create discussion on row (without attachment)\n\n// Specify discussion\nvar discussion = {\n  \"comment\": {\n    \"text\": \"This text is the body of the first comment\"\n  }\n};\n\n// Set options\nvar options = {\n  sheetId: 2252168947361668,\n  rowId: 4293147074291588,\n  body: discussion\n  };\n\n// Add discussion to row\nsmartsheet.sheets.createRowDiscussion(options)\n  .then(function(newDiscussion) {\n    console.log(newDiscussion);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Example request: create discussion on row (with attachment)\n\n// Multipart operations are not supported by the Node SDK. Instead, see instructions to Create Discussion on Row, and then Attach File to Comment.\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: create discussion on row (without attachment)\n\nresponse = smartsheet_client.Discussions.create_discussion_on_row(\n  9283173393803140,           # sheet_id\n  0123456789012345,           # row_id\n  smartsheet.models.Discussion({\n    'comment': smartsheet.models.Comment({\n      'text': 'This text is the body of the first comment'\n    })\n  })\n)\n\n# Example request: create discussion on row (with attachment)\n\n# Add discussion to row\nresponse = smartsheet_client.Discussions.create_discussion_on_row_with_attachment(\n  9283173393803140,       # sheet_id\n  0123456789012345,       # row_id\n  smartsheet.models.Discussion({\n    'comment': smartsheet.models.Comment({\n      'text': 'This text is the body of the first comment'\n    })\n  }),\n  ('photo.jpg', open('/path/to/photo.jpg', 'rb'), 'image/jpeg')\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/rows/{rowId}/proofs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/rowId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Create Proof",
        "description": "Creates a proof on a row.\n",
        "operationId": "proofs-create",
        "tags": [
          "proofs"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Proof"
                        }
                      }
                    }
                  ],
                  "properties": {
                    "version": {
                      "description": "New version of the sheet. Applicable only for operations which update sheet data.",
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/rows/{rowId}/proofs \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Disposition: attachment; filename=\"giphy.gif\"\" \\\n-H \"Content-Type: image/gif\" \\\n--data-binary @giphy.gif \\\n-X POST\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/sentupdaterequests": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Sent Update Requests",
        "description": "Gets a summarized list of all sent update requests on the sheet.\nOnly the following fields are returned in the response:\n  * **id**\n  * **message**\n  * **sendTo**\n  * **sentAt**\n  * **sentBy**\n  * **status**\n  * **subject**\n  * **updateRequestId**\n",
        "operationId": "sentupdaterequests-list",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of SentUpdateRequest objects",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of Sent Update Requests",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SentUpdateRequest"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: list sent update requests\n\nPaginatedResult<SentUpdateRequest> results = smartsheet.SheetResources.UpdateRequestResources.ListSentUpdateRequests(\n    1639534409607044,       // sheetId\n    null                    // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: list sent update requests\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/sentupdaterequests \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "# Example request: list sent update requests\n\nPagedResult<SentUpdateRequest> results = smartsheet.sheetResources().updateRequestResources().listSentUpdateRequests(\n    1639534409607044L,      // long sheetId\n    null                    // PaginationParameters\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: list sent update requests\n\n// Set options\nvar options = {\n    sheetId: 1639534409607044\n};\n\n// List sent update requests\nsmartsheet.sheets.getAllSentUpdateRequests(options)\n    .then(function(requestsList) {\n        console.log(requestsList);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List sent update requests\nresponse = smartsheet_client.Sheets.list_sent_update_requests(\n  5190835902932868)      # sheet_id\nupdate_requests = response.data\n\n# Sample 2: Paginate the list of sent update requests\nresponse = smartsheet_client.Sheets.list_sent_update_requests(\n  5190835902932868,      # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nupdate_requests = response.data\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/sentupdaterequests/{sentUpdateRequestId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "name": "sentUpdateRequestId",
          "in": "path",
          "required": true,
          "description": "ID of the sent update request",
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Sent Update Request",
        "description": "Gets the specified sent update request on the sheet.\n",
        "operationId": "sentupdaterequest-get",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SentUpdateRequest object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentUpdateRequest"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: get sent update request\n\nSentUpdateRequest results = smartsheet.SheetResources.UpdateRequestResources.GetSentUpdateRequest(\n    3285357287499652,      // sheetId\n    2303451729291140       // sentUpdateRequestId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: get sent update request\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/sentupdaterequests/{sentUpdateRequestId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "# Example request: get sent update request\n\nSentUpdateRequest results = smartsheet.sheetResources().updateRequestResources().getSentUpdateRequest(\n    1639534409607044L,      // long sheetId\n    67287475611524L         // long sentUpdateRequestId\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: get sent update request\n\n// Set options\nvar options = {\n    sheetId: 1639534409607044,\n    sentUpdateRequestId: 67287475611524\n};\n\n// Get sent update request\nsmartsheet.sheets.getSentUpdateRequest(options)\n    .then(function(updateRequest) {\n        console.log(updateRequest);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: get sent update request\n\nresponse = smartsheet_client.Sheets.get_sent_update_request(\n    5190835902932868,       # sheet_id\n    7510551698925444        # update_request_id\n)\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Sent Update Request",
        "description": "Deletes the specified sent update request.\n\n**Delete operation is supported only when the specified sent update request is in the pending status.\nDeleting a sent update request that was already completed by recipient is not allowed.**\n",
        "operationId": "sentupdaterequest-delete",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS",
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: delete sent update request\n\nsmartsheet.SheetResources.UpdateRequestResources.DeleteSentUpdateRequest(\n    3285357287499652,      // sheetId\n    2303451729291140       // sentUpdateRequestId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: delete sent update request\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/sentupdaterequests/{sentUpdateRequestId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "# Example request: delete sent update request\n\nsmartsheet.sheetResources().updateRequestResources().deleteSentUpdateRequest(\n    1639534409607044L,      // long sheetId\n    965780272637828L        // long sentUpdateRequestId\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: delete sent update request\n\n// Set options\nvar options = {\n    sheetId: 1639534409607044,\n    sentUpdateRequestId: 965780272637828\n};\n\n// Delete sent update request\nsmartsheet.sheets.deleteSentUpdateRequest(options)\n    .then(function(result) {\n        console.log(result);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: delete sent update request\n\nsmartsheet_client.Sheets.delete_sent_update_request(\n    5190835902932868,   # sheet_id\n    381297098024836     # sent_update_request_id\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/summary": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Sheet Summary",
        "description": "Returns object containing array of summary fields. Allows for pagination of results.",
        "operationId": "list-summary-fields",
        "tags": [
          "sheetSummary"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sheetSummaryInclude"
          },
          {
            "$ref": "#/components/parameters/sheetSummaryExclude"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SheetSummary"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.SummaryResources.GetSheetSummary(\n  1421228469708676,    // sheetId\n  new List<SummaryFieldInclusion> { SummaryFieldInclusion.FORMAT, SummaryFieldInclusion.WRITER_INFO },\n  new List<SummaryFieldExclusion> { SummaryFieldExclusion.DISPLAY_VALUE }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/summary?include=writerInfo \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().summaryResources().getSheetSummary(\n        1421228469708676L,    // long sheetId\n        EnumSet.of(SummaryFieldInclusion.FORMAT, SummaryFieldInclusion.WRITERINFO),\n        EnumSet.of(SummaryFieldExclusion.DISPLAYVALUE)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var options = {\n  sheetId: 1421228469708676\n};\n\nsmartsheet.sheets.getSummary(options)\n  .then(function(summary) {\n    console.log(summary);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.get_sheet_summary(\n    1421228469708676,    # sheet_id\n    include='format,writerInfo',\n    exclude='displayValue'\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/summary/fields": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Summary Fields",
        "description": "Returns object containing array of summary fields. Allows for pagination of results.",
        "operationId": "list-summary-fields-paginated",
        "tags": [
          "sheetSummary"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/sheetSummaryInclude"
          },
          {
            "$ref": "#/components/parameters/sheetSummaryExclude"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Summary Fields",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SummaryField"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "PaginationParameters paginationParameters = new PaginationParameters(\n  false,    // includeAll\n  100,    // pageSize\n  1    // page\n);\nsmartsheet.SheetResources.SummaryResources.GetSheetSummaryFields(\n  1421228469708676,    // sheetId\n  new List<SummaryFieldInclusion> { SummaryFieldInclusion.FORMAT, SummaryFieldInclusion.WRITER_INFO },\n  new List<SummaryFieldExclusion> { SummaryFieldExclusion.DISPLAY_VALUE },\n  paginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/summary/fields \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "PaginationParameters paginationParameters = new PaginationParameters(\n        false,    // includeAll\n        100,    // pageSize\n        1    // page\n        );\nsmartsheet.sheetResources().summaryResources().getSheetSummaryFields(\n        1421228469708676L,    // long sheetId\n        EnumSet.of(SummaryFieldInclusion.FORMAT, SummaryFieldInclusion.WRITERINFO),\n        EnumSet.of(SummaryFieldExclusion.DISPLAYVALUE),\n        paginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var options = {\n  sheetId: 1421228469708676\n};\n\nsmartsheet.sheets.getSummaryFields(options)\n  .then(function(summary) {\n    console.log(summary);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.get_sheet_summary_fields(\n    1421228469708676,    # sheet_id\n    include='format,writerInfo',\n    exclude='displayValue',\n    100,    # page_size\n    1,    # page\n    False    # include_all\n)\n"
          }
        ]
      },
      "put": {
        "summary": "Update Summary Fields",
        "description": "Updates the summary fields for the given sheet.",
        "operationId": "update-summary-fields",
        "tags": [
          "sheetSummary"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/renameIfConflict"
          }
        ],
        "requestBody": {
          "description": "Array of SummaryField objects",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SummaryFieldUpdateRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "description": "A list of updated summary fields",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SummaryField"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "SummaryField summaryField = new SummaryField();\nsummaryField.Type = ColumnType.TEXT_NUMBER;\nsummaryField.ObjectValue = new StringObjectValue(\"Sally Smart\");\nsummaryField.Index = 2;\nsummaryField.Title = \"Author\";\n\nsmartsheet.SheetResources.SummaryResources.UpdateSheetSummaryFields(\n  1421228469708676,    // sheetId\n  new SummaryField[] { summaryField },\n  false    // renameIfConflict\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/summary/fields \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '[{\n  \"id\": 5629723890335892,\n  \"type\": \"CONTACT_LIST\",\n  \"objectValue\": {\n    \"objectType\": \"CONTACT\",\n    \"email\": \"jane.roe@smartsheet.com\",\n    \"name\": \"Jane Roe\"\n  },\n  \"index\": 2,\n  \"title\": \"Author\"\n}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "SummaryField summaryField = new SummaryField();\nsummaryField.setType(ColumnType.TEXT_NUMBER);\nsummaryField.setObjectValue(new StringObjectValue(\"Sally Smart\"));\nsummaryField.setIndex(2);\nsummaryField.setTitle(\"Author\");\n\nsmartsheet.sheetResources().summaryResources().updateSheetSummaryFields(\n        1421228469708676L,    // long sheetId\n        Arrays.asList(summaryField),\n        false    // renameIfConflict\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var options = {\n  sheetId: 1421228469708676,\n  body: [{\n    id: 5629723890335892,\n    objectValue: 'Accepted'\n  }]\n};\n\nsmartsheet.sheets.updateSummaryFields(options)\n  .then(function(summary) {\n    console.log(summary);\n  }).catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "summary_field1 = smartsheet.models.SummaryField()\nsummary_field1.type = ColumnType.TEXT_NUMBER\nsummary_field1.object_value = smartsheet.models.StringObjectValue('Sally Smart')\nsummary_field1.index = 2\nsummary_field1.title = 'Author'\n\nsmartsheet_client.Sheets.update_sheet_summary_fields(\n    1421228469708676,    # sheet_id\n    [summary_field1],\n    False    # rename_if_conflict\n)\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Summary Fields",
        "description": "Deletes summary fields from the specified sheet.",
        "operationId": "delete-summary-fields",
        "tags": [
          "sheetSummary"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sheetSummaryFieldIds"
          },
          {
            "$ref": "#/components/parameters/ignoreSummaryFieldsNotFound"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "description": "A list of fieldIds corresponding to all summary fields that were successfully deleted.",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.SummaryResources.DeleteSheetSummaryFields(\n  1421228469708676,    // sheetId\n  new long[] { 1421228469708676, 1421228469708676, 1421228469708676 },    // summaryFieldIds\n  true    // ignoreSummaryFieldsNotFound\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/summary/fields?ids={fieldId1},{fieldId2},{fieldId3} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().summaryResources().deleteSheetSummaryFields(\n        1421228469708676L,    // long sheetId\n        new HashSet(Arrays.asList(1421228469708676L, 1421228469708676L, 1421228469708676L)),    // long summaryFieldIds\n        true    // ignoreSummaryFieldsNotFound\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var options = {\n  sheetId: 1421228469708676,\n  queryParameters: {\n    ids: '207098194749316',\n    '100091196549967',\n    '450360473006272'\n  }\n};\n\nsmartsheet.sheets.deleteSummaryFields(options)\n  .then(function(summary) {\n    console.log(summary);\n  }).catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.delete_sheet_summary_fields(\n    1421228469708676,    # sheet_id\n    [1421228469708676, 1421228469708676, 1421228469708676],    # summary_field_ids\n    True    # ignore_summary_fields_not_found\n)\n"
          }
        ]
      },
      "post": {
        "summary": "Add Summary Fields",
        "description": "Creates one or more summary fields for the specified sheet.",
        "operationId": "add-summary-fields",
        "tags": [
          "sheetSummary"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/renameIfConflict"
          }
        ],
        "requestBody": {
          "description": "Array of SummaryField objects",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SummaryFieldCreateRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "description": "A list of created summary fields",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SummaryField"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "SummaryField summaryField = new SummaryField();\nsummaryField.Type = ColumnType.TEXT_NUMBER;\nsummaryField.ObjectValue = new StringObjectValue(\"Sally Smart\");\nsummaryField.Index = 2;\nsummaryField.Title = \"Author\";\n\nsmartsheet.SheetResources.SummaryResources.AddSheetSummaryFields(\n  1421228469708676,    // sheetId\n  new SummaryField[] { summaryField },\n  false    // renameIfConflict\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/summary/fields \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\n  \"type\": \"TEXT_NUMBER\",\n  \"objectValue\": \"Sally Smart\",\n  \"index\": 2,\n  \"title\": \"Author\"\n}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "SummaryField summaryField = new SummaryField();\nsummaryField.setType(ColumnType.TEXT_NUMBER);\nsummaryField.setObjectValue(new StringObjectValue(\"Sally Smart\"));\nsummaryField.setIndex(2);\nsummaryField.setTitle(\"Author\");\n\nsmartsheet.sheetResources().summaryResources().addSheetSummaryFields(\n        1421228469708676L,    // long sheetId\n        Arrays.asList(summaryField),\n        false    // renameIfConflict\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var options = {\n  sheetId: 1421228469708676,\n  body: [{\n    type: 'TEXT_NUMBER',\n    objectValue: 'Sally Smart',\n    index: 2,\n    title: 'Author'\n  }]\n};\n\nsmartsheet.sheets.addSummaryFields(options)\n  .then(function(summary) {\n    console.log(summary);\n  }).catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "summary_field1 = smartsheet.models.SummaryField()\nsummary_field1.type = ColumnType.TEXT_NUMBER\nsummary_field1.object_value = smartsheet.models.StringObjectValue('Sally Smart')\nsummary_field1.index = 2\nsummary_field1.title = 'Author'\n\nsmartsheet_client.Sheets.add_sheet_summary_fields(\n    1421228469708676,    # sheet_id\n    [summary_field1],\n    False    # rename_if_conflict\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/summary/fields/{fieldId}/images": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/summaryFieldId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Add Image to Sheet Summary",
        "description": "Adds an image to the summary field.",
        "operationId": "add-image-summaryField",
        "tags": [
          "sheetSummary"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Content-Disposition"
          },
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/altText"
          },
          {
            "$ref": "#/components/parameters/overrideValidation"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SummaryFieldAddImage"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.SummaryResources.AddSheetSummaryFieldImage(\n  1421228469708676,    // sheetId\n  5629723890335892,    // fieldId\n  \"picture.jpg\",    // file\n  \"image/jpeg\",    // contentType\n  \"my image\"    // altText\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/summary/fields/{fieldId}/images?altText=my%20image \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: image/jpeg\" \\\n-H 'Content-Disposition: attachment; filename=\"picture.jpg\"' \\\n-X POST \\\n--data-binary @picture.jpg\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().summaryResources().addSheetSummaryFieldImage(\n        1421228469708676L,    // long sheetId\n        5629723890335892L,    // long fieldId\n        \"picture.jpg\",    // file\n        \"image/jpeg\",    // contentType\n        \"my image\"    // altText\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var options = {\n  sheetId: 1421228469708676,\n  fieldId: 5629723890335892,\n  path: 'C:/picture.jpg',\n  fileName: 'picture.jpg'\n};\n\nsmartsheet.sheets.addSummaryFieldImage(options)\n  .then(function(summary) {\n    console.log(summary);\n  }).catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.add_sheet_summary_field_image(\n    1421228469708676,    # sheet_id\n    5629723890335892,    # field_id\n    \"picture.jpg\",       # file\n    \"image/jpeg\",        # file_type\n    \"my image\"           # alt_text\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/updaterequests": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Update Requests",
        "description": "Gets a summarized list of all update requests that have future schedules associated with the specified sheet.\nOnly the following fields are returned in the response:\n  * **id**\n  * **ccMe**\n  * **createdAt**\n  * **message**\n  * **modifiedAt**\n  * **schedule**\n  * **sendTo**\n  * **sentBy**\n  * **subject**\n",
        "operationId": "updaterequests-list",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of UpdateRequest objects",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of UpdateRequest objects",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UpdateRequest"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: list update requests\n\nPaginatedResult<UpdateRequest> results = smartsheet.SheetResources.UpdateRequestResources.ListUpdateRequests(\n    1639534409607044,       // sheetId\n    null                    // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: list update requests\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/updaterequests \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "# Example request: list update requests\n\nPagedResult<UpdateRequest> results = smartsheet.sheetResources().updateRequestResources().listUpdateRequests(\n    1639534409607044L,      // long sheetId\n    null                    // PaginationParameters\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: list update requests\n\n// Set options\nvar options = {\n    sheetId: 1639534409607044\n};\n\n// List update requests\nsmartsheet.sheets.getAllUpdateRequests(options)\n    .then(function(requestsList) {\n        console.log(requestsList);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List update requests\nresponse = smartsheet_client.Sheets.list_update_requests(\n  5190835902932868)      # sheet_id\nupdate_requests = response.data\n\n# Sample 2: Paginate the list of update requests\nresponse = smartsheet_client.Sheets.list_update_requests(\n  5190835902932868,       # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nupdate_requests = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create an Update Request",
        "description": "Creates an update request for the specified rows within the sheet. An email notification (containing a link to the update request) is sent to the specified recipients according to the specified schedule.\n\nThe recipients of an update request must be specified by using email addresses only. Sending an update request to a group is not supported.\n\nThe following attributes have the following values when not specified:\n* **ccMe:** false\n* **message:** Please update the following rows in my online sheet.\n* **subject:** Update Request: {Sheet Name}\n\nWhen the Schedule object is not specified, the request is sent to the recipients immediately.\n\nIf an error occurs because the request specified one or more *alternate email addresses*,\nplease retry using the primary email address.\n",
        "operationId": "updaterequests-create",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the newly created UpdateRequest object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/UpdateRequest"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: create update request\n\n// Specify recipients\nRecipient[] recipientSpecification = new Recipient[] {\n    new Recipient { Email = \"recipient1@smartsheet.com\"}\n};\n\n// Configure update request\nUpdateRequest updateRequestSpecification = new UpdateRequest\n{\n    SendTo = recipientSpecification,\n    Subject = \"Sample Monthly Update Request\",\n    Message = \"Please update my online sheet.\",\n    CcMe = true,\n    RowIds = new long[] { 1123834706323332, 5627434333693828 },\n    ColumnIds = new long[] { 4549065498224516, 2297265684539268 },\n    IncludeAttachments = true,\n    IncludeDiscussions = true\n};\n\n// Send update request via email\nUpdateRequest newUpdateRequest = smartsheet.SheetResources.UpdateRequestResources.CreateUpdateRequest(\n    3285357287499652,       // sheetId\n    updateRequestSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: create update request\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/updaterequests \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\n  \"sendTo\": [\n    {\"email\": \"recipient1@smartsheet.com\"},\n    {\"email\": \"recipient2@smartsheet.com\"}\n  ],\n  \"subject\": \"Sample Monthly Update Request\",\n  \"message\": \"Please update my online sheet.\",\n  \"ccMe\": false,\n  \"rowIds\": [4508292249610116, 2256492435924868],\n  \"columnIds\": [4508284196546436, 2256484382861188],\n  \"includeAttachments\": false,\n  \"includeDiscussions\": false\n}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "# Example request: create update request\n\n// Specify recipients\nRecipientEmail recipientA = new RecipientEmail()\n    .setEmail(\"recipient1@smartsheet.com\");\n\nRecipientEmail recipientB = new RecipientEmail()\n    .setEmail(\"recipient2@smartsheet.com\");\n\nList<Recipient> recipients = Arrays.asList(recipientA, recipientB);\n\n// Specify parameters for update request\nUpdateRequest updateRequest = new UpdateRequest();\nupdateRequest.setRowIds((Arrays.asList(3344087179913092L, 7847686807283588L));\nupdateRequest.setSendTo(recipients)\n    .setSubject(\"Sample Monthly Update Request\")\n    .setMessage(\"Please update my online sheet.\")\n    .setColumnIds(Arrays.asList(1735559124150148L, 1735559124150148L))\n    .setIncludeAttachments(false)\n    .setIncludeDiscussions(false);\n\n// Create update request\nsmartsheet.sheetResources().updateRequestResources().createUpdateRequest(\n    1639534409607044L,      // long sheetId\n    updateRequest\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: create update request\n\n// Set body\nvar body = {\n  rowIds: [\n    1049041315358596,\n    5552640942729092\n  ],\n  includeAttachments: true,\n  includeDiscussions: false,\n  sendTo: [\n    {\n      email: \"jane.roe@smartsheet.com\"\n    }\n  ],\n  subject: \"Sample Monthly Update Request\",\n  message: \"Please update my online sheet.\",\n  schedule: {\n    type: \"DAILY\",\n    startAt: \"2016-04-01T00:00:00Z\",\n    endAt: \"2018-12-31T00:00:00Z\",\n    dayDescriptors: [\n      \"WEEKDAY\"\n    ]\n  }\n};\n\n// Set options\nvar options = {\n  sheetId: 1696801624483716,\n  body: body\n};\n\n// Create update request\nsmartsheet.sheets.createUpdateRequest(options)\n  .then(function(updatedRequest) {\n    console.log(updatedRequest);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: create update request\n\n# Configure update request\nrequest = smartsheet.models.UpdateRequest()\nrequest.send_to = [{'email': 'someone@smartsheet.com'}]\nrequest.subject = 'Please update based on meeting'\nrequest.message = 'Hello, please checkout my update request'\nrequest.cc_me = False\nrequest.include_discussions = False\nrequest.include_attachments = False\nrequest.row_ids = [6809535313667972]\nrequest.column_ids = [7036894123976580]\n\n# Send update request\naction = smartsheet_client.Sheets.create_update_request(\n  5190835902932868,           # sheet_id\n  request\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/updaterequests/{updateRequestId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "name": "updateRequestId",
          "in": "path",
          "required": true,
          "description": "ID of the Update Request",
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get an Update Request",
        "description": "Gets the specified update request for the sheet that has a future schedule.\n\nThe rowIds and columnIds in the returned UpdateRequest object represent the list at the time\nthe update request was created or last modified. The lists may contain Ids of rows or columns\nthat are no longer valid (for example, they have been removed from the sheet).\n",
        "operationId": "updaterequests-get",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "UpdateRequest object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRequest"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: get update request\n\nUpdateRequest results = smartsheet.SheetResources.UpdateRequestResources.GetUpdateRequest(\n    3285357287499652,      // sheetId\n    2409350321989508       // updateRequestId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: get update request\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/updaterequests/{updateRequestId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "# Example request: get update request\n\nUpdateRequest results = smartsheet.sheetResources().updateRequestResources().getUpdateRequest(\n    1639534409607044L,      // long sheetId\n    965780272637828L        // long updateRequestId\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: get update request\n\n// Set options\nvar options = {\n    sheetId: 3285357287499652,\n    updateRequestId: 2409350321989508\n};\n\n// Get update request\nsmartsheet.sheets.getUpdateRequest(options)\n    .then(function(updateRequest) {\n        console.log(updateRequest);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: get update request\n\nresponse = smartsheet_client.Sheets.get_update_request(\n    5190835902932868,       # sheet_id\n    7510551698925444        # update_request_id\n)\n"
          }
        ]
      },
      "put": {
        "summary": "Update an Update Request",
        "description": "Changes the specified update request for the sheet.\n\n**Making changes to update requests that do not have future scheduled delivery is not allowed.**\n\nThe UpdateRequest object in the request body must specify one or more of the following attributes:\n\n* **ccMe:** Boolean\n* **columnIds:** number[]\n* **includeAttachments:** Boolean\n* **includeDiscussions:** Boolean\n* **message:** string\n* **schedule:** Schedule object\n* **sendTo:** Recipient[]\n* **subject:** string\n\nIf an error occurs because the request specified one or more *alternate email addresses*,\nplease retry using the primary email address.\n",
        "operationId": "updaterequests-update",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "responses": {
          "200": {
            "description": "Result object containing the modified UpdateRequest object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/UpdateRequest"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: change update request\n\n// Identify the update request you want to change\nUpdateRequest updateRequestSpecification = new UpdateRequest\n{\n    Id = 7178482007467908,        // long updateRequestId\n    Subject = \"Sample Monthly Update Request\",\n    Message = \"Please update my online sheet.\"\n};\n\n// Change update request\nUpdateRequest updatedUpdateRequest = smartsheet.SheetResources.UpdateRequestResources.UpdateUpdateRequest(\n    3285357287499652,          // sheetId\n    updateRequestSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: change update request\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/updaterequests/{updateRequestId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\n  \"subject\": \"Sample Monthly Update Request\",\n  \"message\": \"Please update my online sheet.\"\n}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Example request: change update request\n\nUpdateRequest updateRequest = new UpdateRequest();\nupdateRequest.setId(3294745817573252L);\nupdateRequest.setColumnIds(Arrays.asList(1735559124150148L, 1735559124150148L));\nupdateRequest.setIncludeAttachments(true);\nsmartsheet.sheetResources().updateRequestResources().updateUpdateRequest(\n    3294745817573252L,  // long sheetId\n    updateRequest\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: change update request\n\n// Set text\nvar body = {\n    subject: \"Sample Monthly Update Request\"\n};\n\n// Set options\nvar options = {\n    sheetId: 3285357287499652,\n    updateRequestId: 7178482007467908,\n    body: body\n};\n\n// Change update request\nsmartsheet.sheets.changeUpdateRequest(options)\n    .then(function(updatedRequest) {\n        console.log(updatedRequest);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: change update request\n\n# Update required request fields\nrequest = smartsheet.models.UpdateRequest()\nrequest.subject = 'Sample Monthly Update Request'\nrequest.column_ids = [7036894123976580]\nrequest.include_attachments = True\n\n# Change update request\naction = smartsheet_client.Sheets.update_update_request(\n    3294745817573252,       # sheet_id\n    7820135625975684,       # update_request_id\n    request\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete an Update Request",
        "description": "Terminates the future scheduled delivery of the update request specified in the URL.\n",
        "operationId": "updaterequests-delete",
        "tags": [
          "updateRequests"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SHEETS",
              "WRITE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "# Example request: delete update request\n\nsmartsheet.SheetResources.UpdateRequestResources.DeleteUpdateRequest(\n    3285357287499652,      // sheetId\n    2409350321989508       // updateRequestId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "# Example request: delete update request\n\ncurl https://api.smartsheet.com/2.0/sheets/{sheetId}/updaterequests/{updateRequestId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "# Example request: delete update request\n\nsmartsheet.sheetResources().updateRequestResources().deleteUpdateRequest(\n    1639534409607044L,      // long sheetId\n    965780272637828L        // long updateRequestId\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "# Example request: delete update request\n\n// Set options\nvar options = {\n    sheetId: 3285357287499652,\n    updateRequestId: 2409350321989508\n};\n\n// Delete update request\nsmartsheet.sheets.deleteUpdateRequest(options)\n    .then(function(result) {\n        console.log(result);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Example request: delete update request\n\nsmartsheet_client.Sheets.delete_update_request(\n    5190835902932868,        # sheet_id\n    7444581001258884         # update_request_id\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/shares": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/accessApiLevel"
        }
      ],
      "post": {
        "summary": "Share Sheet",
        "description": "Shares a sheet with the specified users and groups.",
        "operationId": "share-sheet",
        "tags": [
          "sharing",
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sendEmail"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Share"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Share"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing either a single Share object or an array of Share objects, corresponding to what\nwas specified in the request. All shares have scope=ITEM.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/Share"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Share"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "If called with a single Share object, and that user or group share already exists, error code 1025 is returned.\nIf called with an array of Share objects, and one or more user or group shares in the array already exist,\nthey are ignored and omitted from the response.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify share (to one user as Editor)\nShare[] shareSpecification = new Share[] { new Share\n  {\n    Email = \"jane.doe@smartsheet.com\",\n    AccessLevel = AccessLevel.EDITOR\n  }\n};\n\n// Share sheet\nIList<Share> addressList = smartsheet.SheetResources.ShareResources.ShareTo(\n  4583614634583940,               // sheetId\n  shareSpecification,\n  true                            // Nullable<bool> sendEmail\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sheets/{sheetId}/shares?sendEmail=true' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"email\": \"jane.doe@smartsheet.com\", \"accessLevel\": \"EDITOR\"}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify share (to one user as Editor)\nShare shareSpecification = new Share()\n        .setEmail(\"jane.doe@smartsheet.com\")\n        .setAccessLevel(AccessLevel.EDITOR);\n\n// Share sheet\nList<Share> addressList = smartsheet.sheetResources().shareResources().shareTo(\n        4583614634583940L,                    // long sheetId\n        (Arrays.asList(shareSpecification)),\n        true                                  // Boolean sendEmail\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify share (to one user as Editor)\nvar share = [\n  {\n    \"email\": \"jane.doe@smartsheet.com\",\n    \"accessLevel\": \"EDITOR\"\n  }\n];\n\n// Set options\nvar options = {\n  sheetId: 4583614634583940,\n  body: share\n  };\n\n// Share sheet\nsmartsheet.sheets.share(options)\n  .then(function(addressList) {\n    console.log(addressList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sheets.share_sheet(\n  4583614634583940,       # sheet_id\n  smartsheet.models.Share({\n    'access_level': 'EDITOR',\n    'email': 'jane.doe@smartsheet.com'\n  }),\n  True                    # sendEmail\n)\n"
          }
        ]
      },
      "get": {
        "summary": "List Sheet Shares",
        "description": "Gets a list of all users and groups to whom the specified Sheet is shared, and their access level. This operation\nsupports query string parameters for pagination of results. For more information, see Paging Query String Parameters.\n",
        "operationId": "list-sheet-shares",
        "tags": [
          "sharing",
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharingInclude"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Share objects. By default, this operation returns only item-level\nshares (scope=ITEM). Use the sharingInclude parameter to request that workspace-level shares\n(include=workspaceShares) also be returned.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Share> shares = smartsheet.SheetResources.ShareResources.ListShares(\n  4583614634583940,               // sheetId\n  null                            // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Share> shares = smartsheet.sheetResources().shareResources().listShares(\n        4583614634583940L,       // long sheetId\n        null,                    // PaginationParameters\n        true                     // Boolean includeWorkspaceShares\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 4583614634583940\n};\n\n// List sheet shares\nsmartsheet.sheets.listShares(options)\n  .then(function(shareList) {\n    console.log(shareList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Sheets.list_shares(\n  4583614634583940,       # sheet_id\n  include_all=True)\nshares = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Sheets.list_shares(\n  4583614634583940,       # sheet_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nshares = response.data\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/shares/{shareId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/shareId"
        },
        {
          "$ref": "#/components/parameters/accessApiLevel"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Sheet Share.",
        "description": "Gets the share specified in the URL.",
        "operationId": "share-sheet-get",
        "tags": [
          "sharing",
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Share object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Share"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Share share = smartsheet.SheetResources.ShareResources.GetShare(\n  4583614634583940,           // sheetId\n  \"AQAISF82FOeE\"              // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Share share = smartsheet.sheetResources().shareResources().getShare(\n        4583614634583940L,       // long sheetId\n        \"AAAASuWWFOeE\"           // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 4583614634583940,\n  shareId: \"AQAISF82FOeE\"\n};\n\n// Get sheet share\nsmartsheet.sheets.getShare(options)\n  .then(function(share) {\n    console.log(share);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "share = smartsheet_client.Sheets.get_share(\n  4583614634583940,       # sheet_id\n  'AAAASuWWFOeE')         # share_id\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Sheet Share",
        "description": "Deletes the share specified in the URL.",
        "operationId": "delete-sheet-share",
        "tags": [
          "sharing",
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SheetResources.ShareResources.DeleteShare(\n  4583614634583940,               // sheetId\n  \"AAAASuWWFOeE\"                  // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sheetResources().shareResources().deleteShare(\n        4583614634583940L,       // long sheetId\n        \"AAAASuWWFOeE\"           // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 4583614634583940,\n  shareId: \"AAAASuWWFOeE\"\n};\n\n// Delete sheet share\nsmartsheet.sheets.deleteShare(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sheets.delete_share(\n  4583614634583940,       # sheet_id\n  'AAAFeF82FOeE')         # share_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Sheet Share.",
        "description": "Updates the access level of a user or group for the specified sheet.",
        "operationId": "update-sheet-share",
        "tags": [
          "sharing",
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SHEETS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessLevel": {
                    "$ref": "#/components/schemas/AccessLevel"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Result object containing the modified Share object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "object",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set the access level to Viewer\nShare shareSpecification = new Share\n{\n  Id = \"AAAFeF82FOeE\",\n  AccessLevel = AccessLevel.VIEWER\n};\n\n// Update sheet share\nShare updatedShare = smartsheet.SheetResources.ShareResources.UpdateShare(\n  4583614634583940,               // sheetId\n  shareSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"accessLevel\": \"VIEWER\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set the access level to Viewer\nShare shareSpecification = new Share()\n        .setEmail(\"jane.doe@smartsheet.com\")\n        .setAccessLevel(AccessLevel.EDITOR);\n\n// Update sheet share\nShare updatedShare = smartsheet.sheetResources().shareResources().updateShare(\n        4583614634583940L,       // long sheetId\n        shareSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set access level to Viewer\nvar shareSpecification = {\"accessLevel\": \"VIEWER\"};\n\n// Set options\nvar options = {\n  sheetId: 1696801624483716,\n  shareId: \"AAAHAYImFOeE\",\n  body: shareSpecification\n};\n\n// Update sheet share\nsmartsheet.sheets.updateShare(options)\n  .then(function(updatedShare) {\n    console.log(updatedShare);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_share = smartsheet_client.Sheets.update_share(\n  4583614634583940,       # sheet_id\n  'AAAFeF82FOeE',         # share_id\n  smartsheet.models.Share({\n    'access_level': 'VIEWER'\n  })\n)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/sort": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        }
      ],
      "post": {
        "summary": "Sort Rows in Sheet",
        "description": "Sorts the rows of a sheet, either in ascending or descending order.",
        "operationId": "rows-sort",
        "tags": [
          "rows"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sortRows"
          }
        ],
        "requestBody": {
          "description": "[SortSpecifier](/api/smartsheet/openapi/schemas/sortspecifier) with the following attribute:\n* **sortCriteria** -- [SortCriterion](/api/smartsheet/openapi/schemas/sortcriterion) array in priority order. Specifies sort order.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SortSpecifier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns [Sheet object](/api/smartsheet/openapi/sheets/sheet), populated according to the specified parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Sheet"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "SortCriterion criterion = new SortCriterion\n{\n  ColumnId = 4583173393803140,    // columnId\n  Direction = SortDirection.DESCENDING\n};\nSortSpecifier specifier = new SortSpecifier\n{\n  SortCriteria = new SortCriterion[] { criterion }\n};\n\nSheet sheet = smartsheet.SheetResources.SortSheet(\n    4583173393803140,    // sheetId\n    specifier\n  );\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/sort \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"sortCriteria\": [{\"columnId\": 4583173393803140, \"direction\": \"DESCENDING\"}]}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "SortCriterion criterion = new SortCriterion();\ncriterion.setColumnId(4583173393803140L);    // long columnId\ncriterion.setDirection(SortDirection.DESCENDING);\nSortSpecifier specifier = new SortSpecifier();\nspecifier.setSortCriteria(Arrays.asList(criterion));\n\nSheet sheet = smartsheet.sheetResources().sortSheet(\n        4583173393803140L,    // long sheetId\n        specifier\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify sort criteria\nvar body = {\n  sortCriteria: [\n    {\n      columnId: 4583173393803140,\n      direction: \"DESCENDING\"\n    }\n  ]\n};\n\n// Sort rows\nsmartsheet.sheets.sortRowsInSheet({sheetId: 9283173393803140, body: body})\n  .then((result) => {\n      console.log(\"success\");\n      console.log(JSON.stringify(result));\n  })\n  .catch((error) => {\n      console.log(\"error\");\n      console.log(JSON.stringify(error));\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "sort_specifier = smartsheet.models.SortSpecifier({\n    'sort_criteria': [smartsheet.models.SortCriterion({\n        'column_id': 4583173393803140,\n        'direction': 'DESCENDING'\n    })]\n})\nsheet = smartsheet_client.Sheets.sort_sheet(9283173393803140, sort_specifier)\n"
          }
        ]
      }
    },
    "/sheets/{sheetId}/version": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sheetId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Sheet Version",
        "description": "Gets the sheet version without loading the entire sheet.\nThe following actions increment sheet version:\n* add/modify cell value\n* add/modify discussion/comment\n* add/modify row\n* add/remove/update version attachment\n* cell updated via cell link\n* change formatting\n",
        "operationId": "get-sheetVersion",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SheetVersion"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Integer version = smartsheet.SheetResources.GetSheetVersion(\n  1531988831168388            // sheetId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sheets/{sheetId}/version \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Integer version = smartsheet.sheetResources().getSheetVersion(\n        1531988831168388L        // long sheetId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sheetId: 1531988831168388\n};\n\n// Get sheet version\nsmartsheet.sheets.getSheetVersion(options)\n  .then(function(version) {\n    console.log(version);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "version = smartsheet_client.Sheets.get_sheet_version(\n  1531988831168388)       # sheet_id\n"
          }
        ]
      }
    },
    "/sights": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "operationId": "list-sights",
        "summary": "List Dashboards",
        "description": "Gets a list of all dashboards that the user has access to.",
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SIGHTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/modifiedSince"
          },
          {
            "$ref": "#/components/parameters/numericDates"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Dashboard objects with a subset of attributes.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Dashboards",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SightListItem"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "PaginatedResult<Sight> sights = smartsheet.SightResources.ListSights(\n  null,       // PaginationParameters\n  null        // Nullable<DateTime> modifiedSince\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "PagedResult<Sight> sights = smartsheet.sightResources().listSights(\n        null,       // PaginationParameters\n        null        // Date modifiedSince\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.sights.listSights()\n  .then(function(sights) {\n    console.log(sights.data);\n  })\n  .catch(function(error) {\n    console.log(error);\n  })\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List All\nresponse = smartsheet_client.Sights.list_sights(include_all=True)\nsights = response.data\n\n# Sample 2: Paginate the list of dashboards\nresponse = smartsheet_client.Sights.list_sights(\n  page_size=10,\n  page=1)\npages = response.total_pages\nsights = response.data\n"
          }
        ]
      }
    },
    "/sights/{sightId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/sightId"
        }
      ],
      "get": {
        "summary": "Get Dashboard",
        "description": "Gets the specified dashboard.",
        "operationId": "get-sight",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/sightInclude"
          },
          {
            "$ref": "#/components/parameters/sightLevel"
          },
          {
            "$ref": "#/components/parameters/numericDates"
          }
        ],
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SIGHTS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sight"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Sight sight = smartsheet.SightResources.GetSight(\n  6327127650920324        // long sightId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}?level=4 \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Sight sight = smartsheet.sightResources().getSight(\n        6327127650920324L       // long sightId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sightId: 6327127650920324\n};\n\n// Get dashboard\nsmartsheet.sights.getSight(options)\n  .then(function(sight) {\n    console.log(sight);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get dashboard\nsight = smartsheet_client.Sights.get_sight(\n  6327127650920324)     # sightId\n\n# Sample 2: Determine whether a user has Commenter permissions for a dashboard\nresponse = smartsheet_client.Sights.get_sight(\n  6327127650920324,       # sightId\n  accessApiLevel=1)\n"
          }
        ]
      },
      "put": {
        "summary": "Update Dashboard",
        "description": "Updates (renames) the specified dashboard.",
        "operationId": "update-sight",
        "parameters": [
          {
            "$ref": "#/components/parameters/numericDates"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SIGHTS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SightName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the updated Dashboard object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ItemResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Sight"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Sight sight = smartsheet.SightResources.UpdateSight(\n  new Sight {\n    Id = 5363568917931908,    // sightId\n    Name = \"New Dashboard Name\"\n  }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"name\": \"New Dashboard Name\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Sight sight = new Sight();\nsight.setId(5363568917931908L);    // long sightId\nsight.setName(\"New Dashboard Name\");\nSight updatedSight = smartsheet.sightResources().updateSight(sight);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set property to change\nvar body = {\n  name: \"New Dashboard Name\"\n};\n\n// Set options\nvar options = {\n  sightId: 5363568917931908,\n  body: body\n};\n\n// Update Dashboard\nsmartsheet.sights.updateSight(options)\n  .then(function(updatedSight) {\n    console.log(updatedSight);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_sight = smartsheet_client.Sights.update_sight(\n  5363568917931908,           # sight_id\n  smartsheet.models.Sight({\n    'name': 'New Dashboard Name'\n  })\n)\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Dashboard",
        "description": "Deletes the dashboard specified in the URL.",
        "operationId": "delete-sight",
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "DELETE_SIGHTS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Generic response result",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SightResources.DeleteSight(\n  5077532685952900            // sightId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sightResources().deleteSight(\n        3100061023397764L       // long sightId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sightId: 5363568917931908\n};\n\n// Delete Dashboard\nsmartsheet.sights.deleteSight(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sights.delete_sight(3404239197235076)     # sight_id\n"
          }
        ]
      }
    },
    "/sights/{sightId}/copy": {
      "post": {
        "summary": "Copy Dashboard",
        "description": "Creates a copy of the specified dashboard.",
        "operationId": "copy-sight",
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SIGHTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/sightId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerDestinationForCopy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a dashboard with a subset of attributes for the newly created dashboard.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ItemResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SightResult"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination\n{\n  DestinationId = 3791509922310020,               // long destinationFolderId\n  DestinationType = DestinationType.FOLDER,\n  NewName = \"newDashboardName\"\n};\n\n// Copy Dashboard\nSight sight = smartsheet.SightResources.CopySight(\n  6327127650920324,                               // long sightId\n  destination\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/copy \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"destinationType\": \"workspace\",\n  \"destinationId\": 7960873114331012,\n  \"newName\": \"newDashboardName\"\n}' \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination()\n        .setDestinationType(DestinationType.FOLDER)\n        .setDestinationId(3791509922310020L)\n        .setNewName(\"newDashboardName\");\n\n// Copy Dashboard\nSight sight = smartsheet.sightResources().copySight(\n        6327127650920324L,                          // long sightId\n        destination\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify new dashboard properties\nvar body = {\n  destinationType: \"home\",\n  newName: \"newDashboardName\"\n};\n\n// Set options\nvar options = {\n  sightId: 6327127650920324,\n  body: body\n};\n\n// Copy Dashboard\nsmartsheet.sights.copySight(options)\n  .then(function(copiedSight) {\n    console.log(copiedSight);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "new_sight = smartsheet_client.Sights.copy_sight(\n  6327127650920324,                           # sight_id\n  smartsheet.models.ContainerDestination({\n    'destination_type': 'folder',           # folder, workspace, or home\n    'destination_id': 3791509922310020,     # folder_id\n    'new_name': 'newDashboardName'\n  })\n)\n"
          }
        ]
      }
    },
    "/sights/{sightId}/move": {
      "post": {
        "summary": "Move Dashboard",
        "description": "Moves the specified dashboard to a new location.",
        "operationId": "move-sight",
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SIGHTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/sightId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerDestinationForMove"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Dashboard object with a subset of attributes for the moved dashboard.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ItemResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SightResult"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination\n{\n  DestinationId = 8460057768683396,               // long destinationFolderId\n  DestinationType = DestinationType.FOLDER\n};\n\n// Move Dashboard\nSight sight = smartsheet.SightResources.MoveSight(\n  5077532685952900,                               // long sightId\n  destination\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/move \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"destinationType\": \"folder\",\n  \"destinationId\": workspace_or_folder_id\n}' \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify destination\nContainerDestination destination = new ContainerDestination()\n        .setDestinationType(DestinationType.FOLDER)\n        .setDestinationId(7960873114331012L);\n\n// Move Dashboard\nSight sight = smartsheet.sightResources().moveSight(\n        4583173393803140L,                          // long sightId\n        destination\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set destination\nvar body = {\n  destinationType: \"folder\",\n  destinationId: 8460057768683396\n};\n\n// Set options\nvar options = {\n  sightId: 5077532685952900,\n  body: body\n};\n\n// Move Dashboard\nsmartsheet.sights.moveSight(options)\n  .then(function(movedSight) {\n    console.log(movedSight);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sights.move_sight(\n  5363568917931908,                           # sight_id\n  smartsheet.models.ContainerDestination({\n    'destination_type': 'folder',           # folder, workspace, or home\n    'destination_id': 8460057768683396      # destination folder_id\n  })\n)\n"
          }
        ]
      }
    },
    "/sights/{sightId}/publish": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/sightId"
        }
      ],
      "get": {
        "summary": "Get Dashboard Publish Status",
        "description": "Gets the dashboard 'publish' settings.",
        "operationId": "get-sight-publish-status",
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SIGHTS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "SightPublish object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SightPublish"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "SightPublish publish = smartsheet.SightResources.GetPublishStatus(\n    5363568917931908    // sightId\n  );\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/publish \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "SightPublish publish = smartsheet.sightResources().getPublishStatus(\n        5363568917931908L    // long sightId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sightId: 5363568917931908\n};\n\n// Get dashboard publish status\nsmartsheet.sights.getSightPublishStatus(options)\n  .then(function(status) {\n    console.log(status);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "status = smartsheet_client.Sights.get_publish_status(\n  5363568917931908)       # sight_id\n"
          }
        ]
      },
      "put": {
        "summary": "Set Dashboard Publish Status",
        "description": "Publishes or unpublishes a dashboard.",
        "operationId": "set-sight-publish-status",
        "tags": [
          "dashboards"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_SIGHTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SightPublish"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SightPublish object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ItemResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SightPublish"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "SightPublish publish = new SightPublish();\npublish.ReadOnlyFullEnabled = true;\nsmartsheet.SightResources.SetPublishStatus(\n  5363568917931908,    // sightId\n  publish\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/publish \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\n  \"readOnlyFullEnabled\": true,\n  \"readOnlyFullAccessibleBy\": \"ALL\"\n}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "SightPublish publish = new SightPublish();\npublish.setReadOnlyFullEnabled(true);\nsmartsheet.sightResources().setPublishStatus(\n        5363568917931908L,    // long sightId\n        publish\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify property to change\nvar body = {\n  readOnlyFullEnabled: false\n};\n\n// Set options\nvar options = {\n  sightId: 5363568917931908,\n  body: body\n};\n\n// Set dashboard publish status\nsmartsheet.sights.setSightPublishStatus(options)\n  .then(function(newStatus) {\n    console.log(newStatus);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sights.set_publish_status(\n  5363568917931908,       # sight_id\n  smartsheet.models.SightPublish({\n    'read_only_full_enabled': True\n  })\n)\n"
          }
        ]
      }
    },
    "/sights/{sightId}/shares": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/accessApiLevel"
        },
        {
          "$ref": "#/components/parameters/sightId"
        }
      ],
      "post": {
        "summary": "Share Dashboard",
        "description": "Shares a dashboard with the specified users and groups.",
        "operationId": "share-sight",
        "tags": [
          "dashboards",
          "sharing"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SIGHTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sendEmail"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Share"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing either a single Share object or an array of Share objects, corresponding to what was\nspecified in the request. All shares have scope=ITEM.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/Share"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Share"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "If called with a single Share object, and that user or group share already exists, error code 1025 is returned.\nIf called with an array of Share objects, and one or more user or group shares in the array already exist,\nthey are ignored and omitted from the response.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Share share = new Share {\n  Type = ShareType.USER,\n  AccessLevel = AccessLevel.EDITOR,\n  Email = \"jane.doe@smartsheet.com\"\n}\nList<Share> sightShares = smartsheet.SightResources.ShareResources.ShareTo(\n  6327127650920324,             // sightId\n  new Share[] { share },        // IEnumerable<Share> shares\n  true                          // bool sendEmail\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/sights/{sightId}/shares?sendEmail=true' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"email\": \"jane.doe@smartsheet.com\", \"accessLevel\": \"VIEWER\"}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify share (to one user as Viewer)\nShare shareSpecification = new Share()\n        .setEmail(\"jane.doe@smartsheet.com\")\n        .setAccessLevel(AccessLevel.VIEWER);\n\n// Share dashboard\nList<Share> addressList = smartsheet.sightResources().shareResources().shareTo(\n        4583614634583940L,                    // long sightId\n        (Arrays.asList(shareSpecification)),\n        true                                  // Boolean sendEmail\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify share (to one user as Viewer)\nvar share = [\n  {\n    \"email\": \"jane.doe@smartsheet.com\",\n    \"accessLevel\": \"VIEWER\"\n  }\n];\n\n// Set options\nvar options = {\n  sightId: 6327127650920324,\n  body: share\n};\n\n// Share dashboard\nsmartsheet.sights.share(options)\n  .then(function(addressList) {\n    console.log(addressList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sights.share_sight(\n  6327127650920324,       # sight_id\n  smartsheet.models.Share({\n    'access_level': 'VIEWER',\n    'email': 'jane.doe@smartsheet.com'\n  }),\n  True                    # sendEmail\n)\n"
          }
        ]
      },
      "get": {
        "summary": "List Dashboard Shares",
        "description": "Gets a list of all users and groups to whom the specified dashboard is shared, and their access level.",
        "operationId": "list-sight-shares",
        "tags": [
          "dashboards",
          "sharing"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SIGHTS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sharingInclude"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Share objects. By default, this operation returns only item-level\nshares (scope=ITEM). Use the sharingInclude parameter to request that workspace-level shares (scope=WORKSPACE)\nalso be returned.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "PaginatedResult<Share> shares = smartsheet.SightResources.ShareResources.ListShares(\n  6327127650920324,       // sightId\n  null,                   // Pagination parameters\n  ShareScope.Item         // ShareScope shareScope\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/shares \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "//Sample 1: List all\nsmartsheet.sightResources().shareResources().listShares(\n        6327127650920324L,    // long sightId\n        null,    // PaginationParameters\n        true    // includeWorkspaceShares\n        );\n\n//Sample 2: Paginate the list\nPaginationParameters paginationParameters = new PaginationParameters(\n        false,  // includeAll\n        100,    // pageSize\n        1   // page\n        );\nsmartsheet.sightResources().shareResources().listShares(\n        6327127650920324L,    // long sightId\n        paginationParameters,\n        true    // includeWorkspaceShares\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sightId: 6327127650920324\n}\n\n// List dashboard shares\nsmartsheet.sights.listShares(options)\n  .then(function(shareList) {\n    console.log(shareList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Sights.list_shares(\n  6327127650920324,       # sight_id\n  include_all=True)\nshares = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Sights.list_shares(\n  6327127650920324,       # sight_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nshares = response.data\n"
          }
        ]
      }
    },
    "/sights/{sightId}/shares/{shareId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sightId"
        },
        {
          "$ref": "#/components/parameters/shareId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Dashboard Share",
        "description": "Gets a list of all users and groups to whom the specified dashboard is shared, and their access level.",
        "operationId": "share-sight-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          }
        ],
        "tags": [
          "dashboards",
          "sharing"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SIGHTS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Share object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Share"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Share share = smartsheet.SightResources.ShareResources.GetShare(\n  6327127650920324,           // long sightId\n  \"AAABbMomFOeE\"              // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Share share = smartsheet.sightResources().shareResources().getShare(\n        6327127650920324L,           // long sightId\n        \"AAABbMomFOeE\"              // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sightId: 6327127650920324,\n  shareId: \"AAABbMomFOeE\"\n}\n\n// Get dashboard share\nsmartsheet.sights.getShare(options)\n  .then(function(share) {\n    console.log(share);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "share = smartsheet_client.Sights.get_share(\n  6327127650920324,       # sight_id\n  'AAACOqOmFOeE')         # share_id\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Dashboard Share",
        "description": "Deletes the share specified in the URL.",
        "operationId": "delete-sight-share",
        "tags": [
          "dashboards",
          "sharing"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SIGHTS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.SightResources.ShareResources.DeleteShare(\n  6327127650920324,     // sightId\n  \"AAABbMomFOeE\"        // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.sightResources().shareResources().deleteShare(\n        6327127650920324L,           // long sightId\n        \"AAABbMomFOeE\"               // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  sightId: 6327127650920324,\n  shareId: \"AAABbMomFOeE\"\n}\n\n// Delete dashboard share\nsmartsheet.sights.deleteShare(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Sights.delete_share(\n  6327127650920324,       # sight_id\n  'AAACOqOmFOeE')         # share_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Dashboard Share",
        "description": "Updates the access level of a user or group for the specified dashboard.",
        "operationId": "update-sight-share",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          }
        ],
        "tags": [
          "dashboards",
          "sharing"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "SHARE_SIGHTS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessLevel": {
                    "$ref": "#/components/schemas/AccessLevel"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Result object containing the modified Share object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "object",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Share updatedShare = smartsheet.SightResources.ShareResources.UpdateShare(\n  6327127650920324,          // sightId\n  new Share {                // Share share\n    Id = \"AAALRqomFOeE\",     // string shareId\n    AccessLevel = AccessLevel.VIEWER  // AccessLevel accessLevel\n  }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/sights/{sightId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"accessLevel\": \"VIEWER\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set the access level to Viewer\nShare shareSpecification = new Share();\n        shareSpecification.setAccessLevel(AccessLevel.VIEWER)\n        .setId(\"AAAFeF82FOeE\");   // string shareId\n\n// Update dashboard share\nShare updatedShare = smartsheet.sightResources().shareResources().updateShare(\n        6327127650920324L,       // long sightId\n        shareSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set access level to Viewer\nvar shareSpecification = {\"accessLevel\": \"VIEWER\"};\n\n// Set options\nvar options = {\n  sightId: 6327127650920324,\n  shareId: \"AAALRqomFOeE\",\n  body: shareSpecification\n};\n\n// Update dashboard share\nsmartsheet.sights.updateShare(options)\n  .then(function(updatedShare) {\n    console.log(updatedShare);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_share = smartsheet_client.Sights.update_share(\n  6327127650920324,       # sight_id\n  'AAALRqomFOeE',         # share_id\n  smartsheet.models.Share({\n    'access_level': 'VIEWER'\n  })\n)\n"
          }
        ]
      }
    },
    "/templates": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List User-Created Templates",
        "description": "Gets a list of user-created templates that the user has access to.",
        "operationId": "templates-list",
        "tags": [
          "templates"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of Templates",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Template"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Template> templates = smartsheet.TemplateResources.ListUserCreatedTemplates(\n  null                // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/templates \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Template> templates = smartsheet.templateResources().listUserCreatedTemplates(\n        null        // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.templates.listUserCreatedTemplates()\n  .then(function(templateList) {\n    console.log(templateList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# List all templates and paginate the response\nresponse = smartsheet_client.Templates.list_user_created_templates(\n  page_size=10,\n  page=1)\npages = response.total_pages\ntemplates = response.data\n"
          }
        ]
      }
    },
    "/templates/public": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "List Public Templates",
        "description": "Gets a list of public templates that the user has access to.",
        "operationId": "templates-listPublic",
        "tags": [
          "templates"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "name": "level",
            "in": "query",
            "required": false,
            "description": "Level of public template types. 0 refers to only Sheet types, 1 refers to all types.",
            "schema": {
              "type": "number",
              "enum": [
                0,
                1
              ],
              "default": 0
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of Templates",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Template"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Gets or Refreshes an Access Token",
        "description": "Gets or refreshes an access token, as part of the OAuth process.",
        "operationId": "tokens-getOrRefresh",
        "tags": [
          "tokens"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Required for POST and PUT requests. Defines the structure for the response.\n",
            "schema": {
              "type": "string",
              "enum": [
                "application/x-www-form-urlencoded"
              ]
            }
          },
          {
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "string"
            },
            "description": "The client Id you obtained when you registered your app.",
            "required": true
          },
          {
            "in": "query",
            "name": "client_secret",
            "schema": {
              "type": "string"
            },
            "description": "(Optional) Must use either this value or hash. Plain text method for sending this value. For example, client_secret={app_secret}. Encryption occurs at the HTTPS level."
          },
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "description": "Authorization code acquired after user selects \"Allow\" in the Web login UI."
          },
          {
            "in": "query",
            "name": "grant_type",
            "schema": {
              "type": "string",
              "enum": [
                "authorization_code",
                "refresh_token"
              ]
            },
            "required": true,
            "description": "Must be set to \"authorization_code\"."
          },
          {
            "in": "query",
            "name": "hash",
            "schema": {
              "type": "string"
            },
            "description": "(Optional) Must use either this value or client_secret. SHA-256 hash of your app secret concatenated with a pipe and the authorization code. For example, hash={SHA_256(app_secret|code)}."
          },
          {
            "in": "query",
            "name": "refresh_token",
            "schema": {
              "type": "string"
            },
            "description": "refresh_token value that came with the access token."
          },
          {
            "in": "query",
            "name": "redirect_url",
            "schema": {
              "type": "string"
            },
            "deprecated": true,
            "description": "**Deprecated** If supplied, must match the redirect URI you registered for your app."
          }
        ],
        "responses": {
          "200": {
            "description": "An access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "default": {
            "description": "Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Get access token\n// Option 1: Use a hash\nToken token = oauth.ObtainNewToken(\n  authResult      // AuthorizationResult authResult\n);\n\n// Option 2: Use plain text\n// In progress\n\n// Sample 2: Refresh access token\nToken tokenRefreshed = oauth.RefreshToken(token);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "// Sample 1: Get access token\n// Option 1: Use a hash\ncurl https://api.smartsheet.com/2.0/token \\\n-d 'grant_type=authorization_code&code={your_code}&client_id={your_client_id}&hash={SHA_256(app_secret|code)}' \\\n-X POST\n\n// Option 2: Use plain text\ncurl https://api.smartsheet.com/2.0/token \\\n-d 'grant_type=authorization_code&code={your_code}&client_id={your_client_id}&client_secret={app_secret}' \\\n-X POST\n\n// Sample 2: Refresh access token\n// Option 1: Use a hash\ncurl https://api.smartsheet.com/2.0/token \\\n-d 'grant_type=refresh_token&refresh_token={your_refresh_token}&client_id={your_client_id}&hash={SHA_256(app_secret|refresh_token)}' \\\n-X POST\n\n// Option 2: Use plain text\ncurl https://api.smartsheet.com/2.0/token \\\n-d 'grant_type=refresh_token&refresh_token={your_refresh_token}&client_id={your_client_id}&client_secret={app_secret}' \\\n-X POST\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Get access token\n// Option 1: Use a hash\n// Create hash\nvar hash =\n  crypto.createHash('sha256')\n    .update('9samp7le3for71you' + '|' + 'sample6p9qisx6a')\n        // ('Your App Secret' + '|' + 'Received Authorization Code')\n    .digest('hex');\n\n// Set options\nvar options = {\n  queryParameters: {\n    client_id: '1samp48lel5for68you',   // Your App Client ID\n    code: 'sample6p9qisx6a',            // Received Authorization Code\n    hash: hash\n  },\n  contentType: 'application/x-www-form-urlencoded'\n};\n\n// Get access token\nsmartsheet.tokens.getAccessToken(options)\n  .then(function(token) {\n  console.log(token);\n})\n.catch(function(error) {\n    console.log(error);\n  });\n\n// Option 2: Use plain text\n// In progress\n\n// Sample 2: Refresh access token\n// Create hash\nvar hash =\n  crypto.createHash('sha256')\n    .update('9samp7le3for71you' + '|' + 'sample6p9qisx6a')\n        // ('Your App Secret' + '|' + 'Your App Refresh Token')\n    .digest('hex');\n\n// Set options\nvar options = {\n  queryParameters: {\n    client_id: '1samp48lel5for68you',   // Your App Client ID\n    refresh_token: 'e9x352a9mp4151le2505',\n    hash: hash\n  },\n  contentType: 'application/x-www-form-urlencoded'\n};\n\n// Refresh access token\nsmartsheet.tokens.refreshAccessToken(options)\n  .then(function(updatedToken) {\n      console.log(updatedToken);\n  })\n  .catch(function(error) {\n      console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "import requests\n\nurl = \"https://api.smartsheet.com/2.0/token?client_id=string&client_secret=string&code=string&grant_type=authorization_code&hash=string&refresh_token=string&redirect_url=string\"\n\nquery = {\n  \"client_id\": \"string\",\n  \"client_secret\": \"string\",\n  \"code\": \"string\",\n  \"grant_type\": \"authorization_code\",\n  \"hash\": \"string\",\n  \"refresh_token\": \"string\",\n  \"redirect_url\": \"string\"\n}\n\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n\nresponse = requests.post(url, headers=headers, params=query)\n\ndata = response.json()\nprint(data)\n"
          }
        ]
      },
      "delete": {
        "summary": "Revoke Access Token",
        "description": "Revokes the access token used to make this request. The access token is no longer valid, and subsequent API calls made using the token fail.",
        "operationId": "tokens-delete",
        "tags": [
          "tokens"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "name": "deleteAllForApiClient",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "The client Id and user Id is fetched based on the token that is used to make this API call. A value of true deletes all tokens associated to the given client Id and user Id.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.TokenResources.RevokeAccessToken();\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/token \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.tokenResources().revokeAccessToken();\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.tokens.revokeAccessToken({})\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Token.revoke_access_token()\n"
          }
        ]
      }
    },
    "/users": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "operationId": "list-users",
        "summary": "List Users",
        "description": "Gets a list of users in the organization account. To filter by email, use the optional email query string parameter to specify a list of users' email addresses.\n\n**NOTE:** If the API request is submitted by a system administrator, the following User object attributes are included in the response (else, they are omitted from the response):\n  * **admin**\n  * **groupAdmin**\n  * **licensedSheetCreator**\n  * **resourceViewer**\n  * **sheetCount** (SUNSET) - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`.\n  * **status**\n\n**NOTE:** If the API request is submitted by a system administrator of an Enterprise account, and <a href=\"https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only\" target=\"_blank\" rel=\"noopener noreferrer\">Custom Welcome Screen</a> is enabled, the following [User object](/api/smartsheet/openapi/users/user) attributes are included in the response (else, they are omitted from the response):\n  * **customWelcomeScreenViewed** (omitted if the user has never viewed the <a href=\"https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only\" target=\"_blank\" rel=\"noopener noreferrer\">Custom Welcome Screen</a>)\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_USERS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emailInclude"
          },
          {
            "$ref": "#/components/parameters/lastLoginInclude"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/modifiedSince"
          },
          {
            "$ref": "#/components/parameters/numericDates"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of [User objects](/api/smartsheet/openapi/users/user)\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of User Objects",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'email' parameter and pagination parameters\nPaginatedResult<User> users = smartsheet.UserResources.ListUsers(\n  null,               // IEnumerable<string> emails\n  null                // PaginationParameters\n);\n\n// Sample 2: Specify 'email' parameter with value of \"john.doe@smartsheet.com\" and 'includeAll' parameter with value of 'true'\nPaginatedResult<User> users = smartsheet.UserResources.ListUsers(\n  new string[] { \"john.doe@smartsheet.com\" },\n  new PaginationParameters(\n    true, // includeAll\n    null, // int pageSize\n    null) // int page\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/users?email=john.doe@smartsheet.com&include=lastLogin' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'email' parameter and pagination parameters\nPagedResult<User> users = smartsheet.userResources().listUsers(\n        null,       // Set<String> email\n        null        // PaginationParameters\n        );\n\n// Sample 2: Specify pagination parameter 'includeAll'\nPaginationParameters parameters = new PaginationParameters()\n        .setIncludeAll(true);\n\n// Specify 'email' parameter with value of \"john.doe@smartsheet.com\" and 'includeAll' parameter with value of 'true'\nPagedResult<User> users = smartsheet.userResources().listUsers( new HashSet(Arrays.asList(\"john.doe@smartsheet.com\")), parameters);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.users.listAllUsers()\n  .then(function(userList) {\n    console.log(userList)\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1; List all\nresponse = smartsheet_client.Users.list_users(include_all=True)\nusers = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Users.list_users(\n  page_size=100,\n  page=1)\npages = response.total_pages\nusers = response.data\n"
          }
        ]
      },
      "post": {
        "operationId": "add-user",
        "summary": "Add User",
        "description": "Adds a user to the organization account.\n\n* **_This operation is only available to system administrators_**\n\n* **If successful, and user auto provisioning (UAP) is on, and user matches the auto provisioning rules, user is added to the org. If UAP is off, or user does not match UAP rules, user is invited to the org and must explicitly accept the invitation to join.**\n\n* **In some specific scenarios, supplied attributes such as firstName and lastName may be ignored. For example, if you are inviting an existing Smartsheet user to join your organization account, and the invited user has not yet accepted your invitation, any supplied firstName and lastName are ignored.**\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sendEmail"
          }
        ],
        "requestBody": {
          "description": "The User to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the newly created [User object](/api/smartsheet/openapi/users/user).\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "If an error occurs because the request specified the alternate email address (that is, not the primary email address) of an existing Smartsheet user (to invite the user into the org), the Error object returned contains a detail attribute set to an array of objects, each object in the array having the following attributes:\n\n  * alternateEmailAddress: User's alternate email address that was specified in the request\n  * primaryEmailAddress: User's primary email address that must instead be specified for the operation\n\nFor example:\n```\n{\n  \"errorCode\": 5xxx,\n  \"message\": \"The specified email address (u1+1@smartsheet.com) is an alternate address for a user with the primary email address of u1@smartsheet.com. Please retry using their primary address.\"\n  \"detail\": [\n      {\n        \"alternateEmailAddress\": \"u1+1@smartsheet.com\",\n        \"primaryEmailAddress\": \"u1@smartsheet.com\"\n      }\n  ]\n}\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set user properties\nUser userSpecification = new User\n{\n  Email = \"john.doe@smartsheet.com\",\n  Admin = false,\n  LicensedSheetCreator = true,\n  FirstName = \"John\",\n  LastName = \"Doe\"\n};\n\n// Add user\nUser newUser = smartsheet.UserResources.AddUser(\n  userSpecification,\n  true,                   // Nullable<bool> sendEmail\n  null                    // Nullable<bool> allowInviteAccountAdmin\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/users?sendEmail=true' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"firstName\": \"John\", \"lastName\": \"Doe\", \"email\": \"john.doe@smartsheet.com\", \"admin\": false, \"licensedSheetCreator\": true}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set user properties\nUser userSpecification = new User();\nuserSpecification.setAdmin(false)\n        .setEmail(\"john.doe@smartsheet.com\")\n        .setFirstName(\"John\")\n        .setLastName(\"Doe\")\n        .setLicensedSheetCreator(true);\n\n// Add user\nUser newUser = smartsheet.userResources().addUser(userSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify user properties\nvar user = {\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@smartsheet.com\",\n  \"admin\": false,\n  \"licensedSheetCreator\": true\n};\n\n// Set options\nvar options = {\n  body: user\n};\n\n// Add user\nsmartsheet.users.addUser(options)\n  .then(function(newUser) {\n    console.log(newUser)\n  }).catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "new_user = smartsheet_client.Users.add_user(\n  smartsheet.models.User({\n    'first_name': 'John',\n    'last_name': 'Doe',\n    'email': 'john.doe@smartsheet.com',\n    'admin': False,\n    'licensed_sheet_creator': True\n  })\n)\n"
          }
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "get-current-user",
        "summary": "Get Current User",
        "description": "Gets the current user\n\n**NOTE:** For system administrators, the following UserProfile attributes are included in the response:\n  * **customWelcomeScreenViewed** (only included when an Enterprise user has viewed the <a href=\"https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only\" target=\"_blank\" rel=\"noopener noreferrer\">Custom Welcome Screen</a>)\n  * **lastLogin** (only included if the user has logged in)\n  * **sheetCount** (SUNSET) - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`.\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/userProfileInclude"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResultUnknownPages object containing a UserProfile object.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UserProfile"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Groups",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Group"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "UserProfile userProfile = smartsheet.UserResources.GetCurrentUser();\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/me \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "UserProfile userProfile = smartsheet.userResources().getCurrentUser();\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.users.getCurrentUser()\n  .then(function(userProfile) {\n    console.log(userProfile);\n  })\n  .catch(function(error) {\n      console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get current user\nuser_profile = smartsheet_client.Users.get_current_user()\n\n# Sample 2: Include groups\nuser_profile = smartsheet_client.Users.get_current_user(include=Groups)\n"
          }
        ]
      }
    },
    "/users/sheets": {
      "get": {
        "operationId": "list-org-sheets",
        "summary": "List Org Sheets",
        "description": "Gets a summarized list of all sheets owned by the members of the organization account.\n\n* **_This operation is only available to system administrators_**\n\n* **_You may use the query string parameter numericDates with a value of true to enable strict parsing of dates in numeric format. See [Dates and Times](/api/smartsheet/guides/basics/dates-and-times) for more information._**\n",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/modifiedSince"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResultUnknownPages object containing an array of Sheet objects, limited to the following attributes:\n\n* id\n* name\n* owner: empty string\n* ownerId: (static \"0\")\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResultUnknownPages"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "List of Sheets",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SheetList"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "PaginatedResult<Sheet> sheets = smartsheet.UserResources.SheetResources.ListOrgSheets(\n  null,               // PaginationParameters\n  null                // Nullable<DateTime> modifiedSince\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/sheets \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "PagedResult<Sheet> sheets = smartsheet.userResources().listOrgSheets();\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.sheets.listOrganizationSheets()\n  .then(function(sheetsList) {\n    console.log(sheetsList)\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Sheets.list_org_sheets()\nsheets = response.data\n"
          }
        ]
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "get": {
        "operationId": "get-user",
        "summary": "Get User",
        "description": "Gets the user specified in the URL.\n\n* NOTE: For system administrators, the following UserProfile attributes are included in the response):\n  * **admin**\n  * **customWelcomeScreenViewed** (only returned when an Enterprise user has viewed the <a href=\"https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only\" target=\"_blank\" rel=\"noopener noreferrer\">Custom Welcome Screen</a>)\n  * **groupAdmin**\n  * **lastLogin** (only returned if the user has logged in)\n  * **licensedSheetCreator**\n  * **resourceViewer**\n  * **sheetCount** (SUNSET) - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`.\n  * **status**\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns UserProfile object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "UserProfile userProfile = smartsheet.UserResources.GetUser(\n  48569348493401200           // long userId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "UserProfile userProfile = smartsheet.userResources().getUser(\n        48569348493401200L           // long userId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  id: 48569348493401200\t// Id of user\n};\n\n// Get user\nsmartsheet.users.getUser(options)\n  .then(function(userProfile) {\n    console.log(userProfile)\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "user_profile = smartsheet_client.Users.get_user(\n  48569348493401200)          # user_id\n"
          }
        ]
      },
      "delete": {
        "operationId": "remove-user",
        "summary": "Remove User",
        "description": "Removes the user from your organization or plan, based on the user's relationship with your organization and plan.\n\nIf you have <a href=\"https://help.smartsheet.com/articles/2482433-Enterprise-plan-manager-overview\" target=\"_blank\" rel=\"noopener noreferrer\">Enterprise Plan Manager</a> enabled, this endpoint removes the user from organizations that inherit from your organization.\n\n**Requirement:** You must be a System Admin.\n\n<h3>Context</h3>\n\nThe User Subscription Model associates users with your organization account (organization) and plan. Additionally, it can associate users shared to your plan's assets with your plan only. The Legacy Collaboration Model associates users with your organization only. \n\n- **Users in your organization** have an Active, Pending, or Declined member status. To look up member status, see the **Member status** column on the **Admin Center > User Management** page or the `status` property in the [`GET /users`](/api/smartsheet/openapi/users/list-users) endpoint response.\n\n- **Users in your plan** have the `Member` value in the **User type** column on the **Admin Center > User types and true-up** page. For more details on user types, see <a href=\"https://help.smartsheet.com/articles/520100-user-types\" target=\"_blank\" rel=\"noopener noreferrer\">User types</a>.\n\nThis endpoint has the following capabilities:\n\n- Remove a user from an organization on a User Subscription Model or Legacy Collaboration Model.\n- Remove a user from a plan on a User Subscription Model.\n\n<h3>Logic</h3>\n\nThe logic path this endpoint executes depends on the user's relationship with your organization and plan.\n\n- If the user is in your organization, the operation removes the user from your organization.\n\n- Otherwise, if your plan is on the User Subscription Model, the operation removes the user from your plan.\n\n> **NOTE:** Only users internal to your plan can be removed from your plan. You can check this in the Smartsheet application:\n>\n> 1. Go to the **Admin Center > User types and true-up** page\n> 2. Select the **All users** tab\n> 3. You can filter on internal users by selecting the **User domain > Internal**.\n>\n>    Alternatively, you can select **User domain > All** and examine the user list; the internal users don't have an **External** tag next to their email address. \n\n> **NOTE:** Users managed by an external source, such as an identity provider (IdP) or directory integration (DI) provider, can only be removed via the external source. External source examples include Okta and Azure AD.\n\n> **IMPORTANT:** If your plan is on the User Subscription Model and you want to remove a user from both your organization and your plan, you must call this operation twice.\n>\n> 1. Call this operation to remove the user from your organization.\n> 2. Call this operation to remove the user from your plan.\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "parameters": [
          {
            "name": "removeFromSharing",
            "in": "query",
            "required": false,
            "description": "**If you're removing the user from your organization**, set this to `true` to remove the user's access to all assets in your organization and plan.\n\n**If you're removing the user from your plan**, this parameter is ignored and the user's access to all assets in your organization and plan is removed automatically.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "transferSheets",
            "in": "query",
            "required": false,
            "description": "**If you're removing the user from your organization** and you want to transfer ownership of all the removed user's assets and groups to a qualified user\\*, set this parameter to `true` and set the `transferTo` parameter to the ID of the qualified user. The transfer depends on setting the `transferTo` parameter.\n\n**If you're removing the user from your plan**, this parameter is ignored.\n\n**Warning:** If your asset transfer size exceeds 38k, the transfer fails with a `400` error that prompts you to contact Support for guidance.\n\n\\*The receiving user must be a <a href=\"https://help.smartsheet.com/articles/520100-user-types\" target=\"_blank\" rel=\"noopener noreferrer\">Group Admin</a> of the group(s) to be transferred.\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "transferTo",
            "in": "query",
            "required": false,
            "description": "Set this to the ID of a qualified user\\* to receive ownership of all groups the removed user owns.\n\n**If you're removing the user from your organization** and you set the `transferSheets` parameter to `true`, the operation additionally transfers ownership of all the removed user's assets to the assigned user.\n\n**If you're removing the user from your plan** and you don't set this parameter, the operation transfers group ownership to the respective main contact of each group's organization.\n\n\\*The receiving user must be a <a href=\"https://help.smartsheet.com/articles/520100-user-types\" target=\"_blank\" rel=\"noopener noreferrer\">Group Admin</a> of the groups.\n",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "400": {
            "description": "This can be caused by the following situations:\n\n- You attempted to remove your plan's main contact.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 5687,\n    \"message\": \"This person is the main contact for your plan and can't be removed.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- You cannot remove directory integration-managed users.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 5666,\n    \"message\": \"This person is managed from your directory service. Please delete them through your directory service instead.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- The user owns groups but you didn't set the `transferTo` parameter.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1121,\n    \"message\": \"transferTo must be provided because user being deleted owns one or more groups.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- You cannot transfer to the user to be removed.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1018,\n    \"message\": \"The value '{userId}' was not valid for the parameter 'transferTo'.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- The transfer recipient user cannot be found.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1019,\n    \"message\": \"Cannot transfer to the user specified. User not found.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- You cannot transfer to a user in a different organization.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1021,\n    \"message\": \"Cannot transfer to the user specified. They are not a member of your account.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- The user to be removed owns groups but the transfer recipient is not a <a href=\"https://help.smartsheet.com/articles/520100-user-types\" target=\"_blank\" rel=\"noopener noreferrer\">Group Admin</a>.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1107,\n    \"message\": \"User specified in transferGroupsTo must be a group admin.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- The asset transfer size exceeds the threshold.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 5737,\n    \"message\": \"Sorry we could not complete this transfer ownership request at this time. Contact support@smartsheet.com\",\n    \"refId\": \"abcd1234\"\n  }\n"
          },
          "403": {
            "description": "This can be caused by the following situations:\n\n- You are not a System Admin.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1004,\n    \"message\": \"You are not authorized to perform this action.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- The user is not in your organization and the user is not internal to your User Subscription Model plan.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1004,\n    \"message\": \"You are not authorized to perform this action.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n"
          },
          "404": {
            "description": "This can be caused by the following situations:\n\n- The user is not in your organization and you're on a Legacy Collaborator Model plan.\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1020,\n    \"message\": \"User not found.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n\n- No user account found (invalid user ID).\n\n  Example response:\n\n  ```json\n  {\n    \"errorCode\": 1020,\n    \"message\": \"User not found.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n"
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Transfer ownership of groups and sheets to another user and remove the user from sharing\nsmartsheet.UserResources.RemoveUser(\n  94094820842,                // long userId\n  transferToUserId,           // Nullable<long> transferTo\n  true,                       // Nullable<bool> transferSheets\n  true                        // Nullable<bool> removeFromSharing\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/users/{userId}?transferTo=USER_Id&removeFromSharing=true' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Transfer ownership of groups and sheets to another user and remove the user from sharing\nDeleteUserParameters parameters = new DeleteUserParameters(\n        62123820842L,       // long transferToUserId\n        true,               // Boolean transferSheets\n        true                // Boolean removeFromSharing\n        );\n\nsmartsheet.userResources().deleteUser(\n        94094820842L,        // long userId\n        parameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  id: 94094820842 // Id of User\n};\n\n// Remove user\nsmartsheet.users.removeUser(options)\n  .then(function(results) {\n    console.log(results)\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Users.remove_user(\n  94094820842,                # user_id\n  transfer_to=62123820842,    # ownership of groups and sheets transfer to user_id\n  remove_from_sharing=True)\n"
          }
        ]
      },
      "put": {
        "operationId": "update-user",
        "summary": "Update User",
        "description": "Updates the user specified in the URL.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "requestBody": {
          "description": "User object containing at least one of the following attributes:\n  * admin (required)\n  * licensedSheetCreator (required)\n  * firstName (optional)\n  * groupAdmin (optional)\n  * lastName (optional)\n  * resourceViewer (optional)\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the [User object](/api/smartsheet/openapi/users/user) for the updated user\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "Updated User Properties",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserProfileImageResponse"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify updated user properties\nUser userSpecification = new User\n{\n  Id = 82349925918590,    // userId\n  Admin = true,\n  LicensedSheetCreator = true\n};\n\n// Update user\nUser updatedUser = smartsheet.UserResources.UpdateUser(\n  userSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"admin\": true, \"licensedSheetCreator\": true}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify updated user properties\nUser userSpecification = new User();\nuserSpecification.setLicensedSheetCreator(true)\n        .setAdmin(true)\n        .setId(82349925918590L);        // long userId\n\n// Update user\nUser updatedUser = smartsheet.userResources().updateUser(userSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify updated user properties\nvar user = {\n  \"admin\": true,\n  \"licensedSheetCreator\": true\n};\n\n// Set options\nvar options = {\n  id: 82349925918590, // Id of User\n  body: user\n  };\n\n// Update user\nsmartsheet.users.updateUser(options)\n  .then(function(updatedUser) {\n    console.log(updatedUser)\n  }).catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "updated_user = smartsheet_client.Users.update_user(\n  82349925918590,     # user_id\n  smartsheet.models.User({\n    'licensed_sheet_creator': True,\n    'admin': True\n  })\n)\n"
          }
        ]
      }
    },
    "/users/{userId}/alternateemails": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "get": {
        "operationId": "list-alternate-emails",
        "summary": "List Alternate Emails",
        "description": "Gets a list of the alternate emails for the specified user.",
        "tags": [
          "alternateEmailAddress"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of [AlternateEmail objects](/api/smartsheet/openapi/alternateemailaddress/alternateemail)\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of attachments",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AlternateEmail"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit 'email' parameter and pagination parameters\nPaginatedResult<AlternateEmail> results = smartsheet.UserResources.ListAlternateEmails(\n  123456789012345,        // long userId\n  null                    // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit 'email' parameter and pagination parameters\nPagedResult<AlternateEmail> results = smartsheet.userResources().listAlternateEmails(\n        123456789012345L,        // long userId\n        null                    // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  userId: 123456789012345\n};\n\n// List alternate email addresses\nsmartsheet.users.listAlternateEmails(options)\n  .then(function(emailList) {\n    console.log(emailList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Users.list_alternate_emails(\n  123456789012345)        # user_id\nemails = response.data\n"
          }
        ]
      },
      "post": {
        "operationId": "add-alternate-email",
        "summary": "Add Alternate Emails",
        "description": "Adds one or more alternate email addresses for the specified user.\n\n**_This operation is only available to system administrators._**\n",
        "tags": [
          "alternateEmailAddress"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AddAlternateEmail"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AddAlternateEmail"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing an array of the newly created [AlternateEmail objects](/api/smartsheet/openapi/alternateemailaddress/alternateemail).\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "Updated User Properties",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AlternateEmail"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "If a single email address is specified in the request and an error occurs, the response contains an Error object.\n\nIf multiple email addresses are specified in the request and an error occurs, the Error object returned contains a detail attribute set to an array of objects, each object in the array having the following attributes:\n  * email: Problematic email address specified in the request\n  * errorCode: Smartsheet error code\n  * message: Message that describes the problem with the specified email address\n\nFor example:\n```\n{\n  \"errorCode\": 1160,\n  \"message\": \"Invalid bulk request. See detail for more information.\"\n  \"detail\": [\n      {\n        \"email\": \"altEmail1@smartsheet.com\",\n        \"errorCode\": 1157,\n        \"message\": \"This address is already associated with another Smartsheet account, so it cannot be added as an alternate address for this account.\"\n      }\n  ]\n}\n```\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "List<AlternateEmail> alternateEmails = smartsheet.UserResources.AddAlternateEmail(\n  4495214342629252,                       // userId\n  new AlternateEmail[] {                  // Array of AlternateEmail\n    new AlternateEmail { Email = \"John.Doe@smartsheet.com\" },\n    new AlternateEmail { Email = \"John.Doe.Test@smartsheet.com\" }\n  }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"email\": \"John.Doe@smartsheet.com\"}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "AlternateEmail alias1 = new AlternateEmail();\nalias1.setEmail(\"John.Doe@smartsheet.com\");\nAlternateEmail alias2 = new AlternateEmail();\nalias2.setEmail(\"John.Doe.Test@smartsheet.com\");\n\nsmartsheet.userResources().addAlternateEmail(\n        4495214342629252L,    // long userId\n        Arrays.asList(alias1, alias2)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify email addresses to add\nvar body = [\n  {\n    email: \"John.Doe@smartsheet.com\"\n  }\n];\n\n// Set options\nvar options = {\n  userId: 4495214342629252,\n  body: body\n};\n\n// Add alternate email address\nsmartsheet.users.addAlternateEmail(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Users.add_alternate_email(\n  4495214342629252,          # user_id\n  [\n    smartsheet.models.AlternateEmail({\n        'email': 'John.Doe@smartsheet.com'\n    })\n  ]\n)\n"
          }
        ]
      }
    },
    "/users/{userId}/alternateemails/{alternateEmailId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/userId"
        },
        {
          "$ref": "#/components/parameters/alternateEmailId"
        }
      ],
      "get": {
        "operationId": "get-alternate-email",
        "summary": "Get Alternate Email",
        "description": "Gets the specified alternate email.",
        "tags": [
          "alternateEmailAddress"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns [AlternateEmail object](/api/smartsheet/openapi/alternateemailaddress/alternateemail)\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlternateEmail"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.UserResources.GetAlternateEmail(\n  401090454808452,        // long userId\n  123456789012345         // long altEmailId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternateEmailId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.userResources().getAlternateEmail(\n        401090454808452L,        // long userId\n        123456789012345L         // long altEmailId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  userId: 401090454808452,\n  alternateEmailId: 123456789012345\n};\n\n// Get alternate email address\nsmartsheet.users.getAlternateEmail(options)\n  .then(function(email) {\n    console.log(email);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "alt_email = smartsheet_client.Users.get_alternate_email(\n  401090454808452,        # user_id\n  123456789012345)        # alternate_email_id\n"
          }
        ]
      },
      "delete": {
        "operationId": "delete-alternate-email",
        "summary": "Delete Alternate Email",
        "description": "Deletes the specified alternate email address for the specified user.",
        "tags": [
          "alternateEmailAddress"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.UserResources.DeleteAlternateEmail(\n  401090454808452,        // long userId\n  123456789012345         // long altEmailId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternatEmailId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.userResources().deleteAlternateEmail(\n        401090454808452L,        // long userId\n        123456789012345L         // long altEmailId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  userId: 401090454808452,\n  alternateEmailId: 123456789012345\n};\n\n// Delete alternate email address\nsmartsheet.users.deleteAlternateEmail(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Users.delete_alternate_email(\n  401090454808452,        # user_id\n  123456789012345)        # alternate_email_id\n"
          }
        ]
      }
    },
    "/users/{userId}/alternateemails/{alternateEmailId}/makeprimary": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/userId"
        },
        {
          "$ref": "#/components/parameters/alternateEmailId"
        }
      ],
      "post": {
        "operationId": "promote-alternate-email",
        "summary": "Make Alternate Email Primary",
        "description": "Makes the specified alternate email address to become the primary email\naddress for the specified user.\n\n* **_This operation is only available to system administrators_**\n\n* Only Enterprise plans with this feature activated by Support can use this method. If you want to activate this feature, please contact Support.\n\nThe alternate email address can only be made primary if both conditions are\nmet:\n  * The primary email address domain is validated\n  * The alternate email address is confirmed or the alternate email address domain is validated\n",
        "tags": [
          "alternateEmailAddress"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of alternate email results",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AlternateEmail"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "This can be caused by the following situation:\n\nYou are not on an Enterprise plan and do not have this feature enabled.\n\nExample response:\n\n```json\n{\n    \"errorCode\": 1189,\n    \"message\": \"Only Enterprise or Team accounts with security controls are able to change primary emails.\",\n    \"refId\": \"abcd1234\"\n}\n```\n"
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "AlternateEmail primaryEmail = smartsheet.UserResources.PromoteAlternateEmail(\n  401090454808452,        // userId\n  123456789012345         // altEmailId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId}/alternateemails/{alternatEmailId}/makeprimary \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "AlternateEmail primaryEmail = smartsheet.userResources().promoteAlternateEmail(\n        401090454808452L,    // long userId\n        123456789012345L    // long altEmailId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  userId: 401090454808452,\n  alternateEmailId: 123456789012345\n};\n\n// Make alternate email primary\nsmartsheet.users.makeAlternateEmailPrimary(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "response = smartsheet_client.Users.promote_alternate_email(\n  401090454808452,        # user_id\n  123456789012345)        # alt_id\n"
          }
        ]
      }
    },
    "/users/{userId}/deactivate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "post": {
        "operationId": "deactivate-user",
        "summary": "Deactivate User",
        "description": "Deactivates the user associated with the current Smartsheet plan, blocking the user from using Smartsheet in any way. Deactivating a user does not affect their existing permissions on owned or shared items.\n\nOptionally, with Enterprise Plan Manager (EPM) enabled, you can deactivate a user from child organizations.\n\n> **Who can use this endpoint?**\n> \n> - **Plans:** Business, Enterprise\n> - **Permissions:** System Administrator\n>\n> This operation is unavailable for Smartsheet Gov.\n\nAttempting to deactivate a user that matches any of the following criteria results in an error:\n- The user's primary email address belongs to an ISP domain (e.g., `gmail.com`, `yahoo.com`, `outlook.com`). For example, see the common ISP domains listed below.\n- The user's primary email address is unassociated with the current Smartsheet plan domain(s).\n- The user is managed by an external source, such as an identity provider (IdP) or directory integration (DI) provider. External source examples include Okta and Azure AD. Deactivating such a user can only be done via the external source.\n\nUsers with primary email addresses on the following ISP domains cannot be deactivated:\n- `aol.com`\n- `charter.net`\n- `comcast.net`\n- `duck.com`\n- `email.com`\n- `gmail.com`\n- `hotmail.com`\n- `icloud.com`\n- `live.com`\n- `mail.com`\n- `mail.ru`\n- `outlook.com`\n- `rocketmail.com`\n- `usa.com`\n- `verizon.net`\n- `web.de`\n- `yahoo.com`\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "400": {
            "description": "The user is managed from a directory service.\n\nExample response:\n\n```json\n{\n  \"errorCode\": 5697,\n  \"message\": \"This person is managed from your directory service. Please deactivate them through your directory service instead.\",\n  \"refId\": \"abcd1234\"\n}\n```\n"
          },
          "403": {
            "description": "This can be caused by the following situations:\n\n- User account has a common ISP domain email.\n  ```json\n  {\n    \"errorCode\": 1359,\n    \"message\": \"User account with a common ISP domain email cannot be deactivated. You can only remove them from the Org.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n- User is external: in your org, not in your EPM child org, or has no internal planMembership in your plan.\n  ```json\n  {\n    \"errorCode\": 1004,\n    \"message\": \"You are not authorized to perform this action.\",\n    \"refId\": \"abcd1234\"\n  }\n  ```\n"
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId}/deactivate \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST\n"
          }
        ]
      }
    },
    "/users/{userId}/profileimage": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "post": {
        "operationId": "update-user-profile-image",
        "summary": "Update User Profile Image",
        "description": "Uploads an image to the user profile.\n\nUploading a profile image differs from Adding an Image to a Cell in the following ways:\n  * A **Content-Length** header is not required\n  * Allowable file types are limited to: gif, jpg, and png\n  * Maximum file size is determined by the following rules:\n      * If you have not defined a custom size and the image is larger than 1050 x 1050 pixels, Smartsheet scales the image down to 1050 x 1050\n      * If you have defined a custom size, Smartsheet uses that as the file size max\n  * If the image is not square, Smartsheet uses a solid color to pad the image\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "WRITE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/URLAttachmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Result object\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "Updated User Properties",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserProfileImageResponse"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "User myUser = smartsheet.UserResources.AddProfileImage(\n  3173821341106052,                // userId\n  \"../path/to/mrgoodlookin.jpg\",   // string file\n  \"image/jpeg\"                     // string fileType (MIME)\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/users/{userId}/profileimage' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: image/jpeg\" \\\n-H 'Content-Disposition: attachment; filename=janeroe.jpg' \\\n-X POST \\\n--data-binary @janeroe.jpg\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "try {\n        User myUser = smartsheet.userResources().addProfileImage(\n        3173821341106052L,               // long userId\n        \"../path/to/mrgoodlookin.jpg\",   // String file\n        \"image/jpeg\"                     // String fileType (MIME)\n        );\n        } catch (FileNotFoundException e) {\n        e.printStackTrace();\n        }\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "var options = {\n  userId: 3173821341106052,\n  path: '../path/to/mrgoodlookin.jpg',\n  fileName: 'mrgoodlookin.jpg'\n};\n\nsmartsheet.users.addProfileImage(options)\n  .then(function(result) {\n    console.log(result);\n  }).catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "action = smartsheet_client.Users.add_profile_image(\n  3173821341106052,               # user_id (int)\n  '../path/to/mrgoodlookin.jpg',  # file (string)\n  'image/jpeg'                    # file_type (string)\n)\n"
          }
        ]
      }
    },
    "/users/{userId}/reactivate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/userId"
        }
      ],
      "post": {
        "operationId": "reactivate-user",
        "summary": "Reactivate User",
        "description": "Reactivates the user associated with the current Smartsheet plan, restoring the user's access to Smartsheet, owned items, and shared items.\n\nOptionally, with Enterprise Plan Manager (EPM) enabled, you can specify the ID of a user within your managed plan hierarchy.\n\n**Important:** You can reactivate the user only if that user has been deactivated for less than thirty (30) days.\n\n> **Who can use this endpoint?**\n> \n> - **Plans:** Business, Enterprise\n> - **Permissions:** System Administrator\n>\n> This operation is unavailable for Smartsheet Gov.\n\nAttempting to reactivate a user that matches any of the following criteria results in an error:\n- The user's primary email address belongs to an ISP domain (e.g., `gmail.com`, `yahoo.com`, `outlook.com`). For example, see the common ISP domains listed below.\n- The user's primary email address is unassociated with the current Smartsheet plan domain(s).\n- The user is not in the plan's organization.\n\nUsers with primary email addresses on the following ISP domains cannot be reactivated:\n- `aol.com`\n- `charter.net`\n- `comcast.net`\n- `duck.com`\n- `email.com`\n- `gmail.com`\n- `hotmail.com`\n- `icloud.com`\n- `live.com`\n- `mail.com`\n- `mail.ru`\n- `outlook.com`\n- `rocketmail.com`\n- `usa.com`\n- `verizon.net`\n- `web.de`\n- `yahoo.com`\n",
        "tags": [
          "users"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_USERS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "400": {
            "description": "The user is managed from a directory service.\n\nExample response:\n\n```json\n{\n  \"errorCode\": 5717,\n  \"message\": \"This person is managed from your directory service. Please reactivate them through your directory service instead.\",\n  \"refId\": \"abcd1234\"\n}\n```\n"
          },
          "403": {
            "description": "The user is external: in your org, not in your EPM child org, or has no internal planMembership in your plan.\n\nExample response:\n\n```json\n{\n  \"errorCode\": 1004,\n  \"message\": \"You are not authorized to perform this action.\",\n  \"refId\": \"abcd1234\"\n}\n```\n"
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/users/{userId}/reactivate \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST\n"
          }
        ]
      }
    },
    "/webhooks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "operationId": "list-webhooks",
        "summary": "List Webhooks",
        "description": "DEPRECATED sorting webhooks by name as of Jun-10-2025 and will sort by creation date (most recent first) as early as Jul-10-2025. See the [changelog entry](/api/smartsheet/changelog#2025-06-10) for migration instructions and details.\n\nGets the list of all *webhooks* that the user owns (if a user-generated\ntoken was used to make the request) or the list of all webhooks associated\nwith the third-party app (if a third-party app made the request). Items in\nthe response are ordered by API cient name > webhook name > creation date.\n",
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WEBHOOKS"
            ]
          }
        ],
        "parameters": [
          {
            "name": "includeAll",
            "in": "query",
            "deprecated": true,
            "required": false,
            "description": "DEPRECATED as of Jun-10-2025 and will be discontinued (\"sunset\") as early as Jul-10-2025 to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks. See the [changelog entry](/api/smartsheet/changelog#2025-06-10) for migration instructions and details.\n\nIf true, include all results, that is, do not paginate. Mutually exclusive\nwith page and pageSize (they are ignored if includeAll=true is specified).\n",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "name": "pageSize",
            "in": "query",
            "deprecated": true,
            "required": false,
            "description": "DEPRECATED the unlimited value range as of Jun-10-2025 and will set a `10000` value maximum as early as Jul-10-2025 to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks. See the [changelog entry](/api/smartsheet/changelog#2025-06-10) for migration instructions and details.\n\nThe maximum number of items to return per page. Unless otherwise stated for a\nspecific endpoint, defaults to 100. If only page is specified, defaults to a\npage size of 100. For reports, the default is 100 rows. If you need larger\nsets of data from your report, returns a maximum of 10,000 rows per request.\n",
            "schema": {
              "type": "number",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The List of Webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "pageNumber": {
                          "description": "The current page in the full result set that the data array represents.\nNOTE when a page number greater than totalPages is requested, the last\npage is instead returned.\n",
                          "type": "number",
                          "example": 1,
                          "readOnly": true
                        },
                        "pageSize": {
                          "description": "The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints.",
                          "type": "number",
                          "example": 50,
                          "nullable": true,
                          "readOnly": true
                        },
                        "totalPages": {
                          "description": "DEPRECATED as of Jun-11-2025 and will return `-1` as early as the Jul-10-2025 sunset date to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks. See the [changelog](/api/smartsheet/changelog#2025-06-11) for details.\n\nThe total number of pages in the full result set.\n",
                          "type": "number",
                          "deprecated": true,
                          "example": 25,
                          "readOnly": true
                        },
                        "totalCount": {
                          "description": "DEPRECATED as of Jun-11-2025 and will return `-1` as early as the Jul-10-2025 sunset date to reduce latency, mitigate performance issues, and add stability, especially for users with many webhooks. See the [changelog](/api/smartsheet/changelog#2025-06-11) for details.\n\nThe total number of items in the full result set.\n",
                          "type": "number",
                          "deprecated": true,
                          "example": 136,
                          "readOnly": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "list of Webhooks",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Webhook"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Webhook> webhooks = smartsheet.WebhookResources.ListWebhooks(\n    null            // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/webhooks \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Webhook> webhooks = smartsheet.webhookResources().listWebhooks(\n    null            // PaginationParameters\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n};\n\n// List webhooks\nsmartsheet.webhooks.listWebhooks(options)\n    .then(function(webhookList) {\n        console.log(webhookList);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "IndexResult = smartsheet_client.Webhooks.list_webhooks(\n  page_size=100,\n  page=1,\n  include_all=False\n)\n"
          }
        ]
      },
      "post": {
        "summary": "Create Webhook",
        "description": "Creates a new Webhook.\n\nA webhook is not enabled by default when it is created.\nOnce you've created a webhook, you can enable it by using the Update Webhook operation to set **enabled** to **true**.\n\nWhen a row is deleted on a sheet, even if you are using a **subscope** to monitor columns only\nand the cell in that column for that row is empty, you will receive a \"row.deleted\" event.\n",
        "operationId": "createWebhook",
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WEBHOOKS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Create_Webhook_Request"
                  },
                  {
                    "type": "object",
                    "required": [
                      "callbackUrl",
                      "events",
                      "name",
                      "scope",
                      "scopeObjectId",
                      "version"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object, containing a Webhook object for the newly created webhook",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Webhook"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Webhook specification\nWebhook webhook = new Webhook\n{\n    Name = \"Webhook #4\",\n    CallbackUrl = \"https://www.myApp.com/webhooks\",\n    Scope = \"sheet\",\n    ScopeObjectId = 3285357287499652,\n    Events = new string[] { \"*.*\" },\n    Version = 1\n};\n\n// Create Webhook\nWebhook newWebhook = smartsheet.WebhookResources.CreateWebhook(\n    webhook\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/webhooks \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{   \"name\": \"Webhook #4\", \"callbackUrl\": \"https://www.myApp.com/webhooks\", \"scope\": \"sheet\", \"scopeObjectId\": 3285357287499652, \"events\": [\"*.*\"], \"version\": 1, \"subscope\": {\"columnIds\": [7318427511613316, 7318427511613123]}}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Webhook specification\nWebhook webhook = new Webhook();\nwebhook.setCallbackUrl(\"https://www.myApp.com/webhooks\")\n    .setScope(\"sheet\")\n    .setScopeObjectId(3285357287499652L)\n    .setEvents(Arrays.asList(\"*.*\"))\n    .setVersion(1)\n    .setName(\"Webhook #4\");\n\n// Create Webhook\nWebhook newWebhook = smartsheet.webhookResources().createWebhook(\n    webhook\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify webhook details\nvar body = {\n  name: \"Webhook #4\",\n  callbackUrl: \"https://www.myApp.com/webhooks\",\n  scope: \"sheet\",\n  scopeObjectId: 3285357287499652,\n  events: [\"*.*\"],\n  version: 1,\n};\n\n// Set options\nvar options = {\n  body: body,\n};\n\n// Create webhook\nsmartsheet.webhooks.createWebhook(options)\n    .then(function(newWebhook) {\n      console.log(newWebhook);\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "Webhook = smartsheet_client.Webhooks.create_webhook(\n  smartsheet.models.Webhook({\n    'name': 'Webhook #4',\n    'callbackUrl': 'https://www.myApp.com/webhooks',\n    'scope': 'sheet',\n    'scopeObjectId': 3285357287499652,\n    'events': ['*.*'],\n    'version': 1}))\n"
          }
        ]
      }
    },
    "/webhooks/{webhookId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/webhookId"
        }
      ],
      "get": {
        "summary": "Get Webhook",
        "description": "Gets a Webhook based on the specified ID",
        "operationId": "getWebhook",
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WEBHOOKS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Webhook webhook = smartsheet.WebhookResources.GetWebhook(\n    401090454808452     // long webhookId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Webhook webhook = smartsheet.webhookResources().getWebhook(\n    401090454808452L     // long webhookId\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n    webhookId: 401090454808452\n};\n\n// Get webhook\nsmartsheet.webhooks.getWebhook(options)\n    .then(function(webhook) {\n        console.log(webhook);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });;\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "Webhook = smartsheet_client.Webhooks.get_webhook(\n  401090454808452)       # webhook_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Webhook",
        "description": "Updates the specified Webhook. The following properties can be updated:\n* callbackUrl (optional)\n* enabled (optional)\n* events (optional)\n* name (optional)\n* version (optional)\n\nWhen setting a webhook's **enabled** to **true** using this operation,\nthe behavior and result depend on the webhook's **status** and may result in a webhook verification being triggered,\nor in some cases, an error being returned. See Webhook Status for more details.\n",
        "operationId": "updateWebhook",
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WEBHOOKS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update_Webhook_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the Webhook object for the updated webhook",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Webhook"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Webhook specification\nWebhook webhook = new Webhook\n{\n    Id = 8444254503626628,\n    CallbackUrl = \"https://www.myApp.com/webhooks\",\n    Version = 1,\n    Enabled = true\n}\n\n// Update Webhook\nWebhook updatedWebhook = smartsheet.WebhookResources.UpdateWebhook(\n    webhook\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{ \"enabled\": true }\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Webhook specification\nWebhook webhook = new Webhook();\n    webhook.setCallbackUrl(\"https://www.myApp.com/webhooks\")\n    .setVersion(1)\n    .setEnabled(true)\n    .setId(8444254503626628L);\n\n// Update Webhook\nWebhook updatedWebhook = smartsheet.webhookResources().updateWebhook(\n    webhook\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify changed values\nvar body = {\n    enabled: true\n};\n\n// Set options\nvar options = {\n    webhookId: 8444254503626628,\n    body: body\n};\n\n// Update webhook\nsmartsheet.webhooks.updateWebhook(options)\n    .then(function(updatedWebhook) {\n        console.log(updatedWebhook);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "Webhook = smartsheet_client.Webhooks.update_webhook(\n  8444254503626628,       # webhook_id\n  smartsheet_client.models.Webhook({\n    'enabled': True}))\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Webhook",
        "description": "Deletes the specified Webhook.\n\nUsing this operation permanently deletes the specified webhook.\nTo temporarily disable a webhook, use the Update Webhook operation to set **enabled** to **false**.\n",
        "operationId": "deleteWebhook",
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WEBHOOKS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Result object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.WebhookResources.DeleteWebhook(\n    401090454808452     // long webhookId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/webhooks/{webhookId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.webhookResources().deleteWebhook(\n    401090454808452L     // long webhookId\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n    webhookId: 401090454808452\n};\n\n// Delete webhook\nsmartsheet.webhooks.deleteWebhook(options)\n    .then(function(results) {\n        console.log(results);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Webhooks.delete_webhook(\n  401090454808452)       # webhook_id\n"
          }
        ]
      }
    },
    "/webhooks/{webhookId}/resetSharedSecret": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/webhookId"
        }
      ],
      "post": {
        "summary": "Reset Shared Secret",
        "description": "Resets the shared secret for the specified webhook. For more information about how a shared secret is used, see Authenticating Callbacks.\nThis operation can be used to rotate an API client's webhooks' shared secrets at periodic intervals to provide additional security.",
        "operationId": "resetSharedSecret",
        "tags": [
          "webhooks"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WEBHOOKS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SharedSecret"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "WebhookSharedSecret newSecret = smartsheet.WebhookResources.ResetSharedSecret(\n    401090454808452     // long webhookId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/webhooks/{webhookId}/resetsharedsecret \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "WebhookSharedSecret newSecret = smartsheet.webhookResources().ResetSharedSecret(\n    401090454808452L     // long webhookId\n);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Get options\nvar options = {\n    webhookId: 401090454808452\n};\n\n// Reset shared secret\nsmartsheet.webhooks.resetSharedSecret(options)\n    .then(function(newSecret) {\n        console.log(newSecret);\n    })\n    .catch(function(error) {\n        console.log(error);\n    });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "Webhook = smartsheet_client.Webhooks.reset_shared_secret(\n  401090454808452)       # webhook_id\n"
          }
        ]
      }
    },
    "/workspaces": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/accessApiLevel"
        }
      ],
      "get": {
        "summary": "List Workspaces",
        "description": "Gets a list of workspaces that the user has access to. The list contains an abbreviated Workspace object for each workspace.\n",
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "list-workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Workspace objects.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/WorkspaceListing"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Workspace> workspaces = smartsheet.WorkspaceResources.ListWorkspaces(\n  null                // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Workspace> workspaces = smartsheet.workspaceResources().listWorkspaces(\n        null        // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "smartsheet.workspaces.listWorkspaces()\n  .then(function(workspaceList) {\n    console.log(workspaceList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Workspaces.list_workspaces(include_all=True)\nworkspaces = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Workspaces.list_workspaces(\n  page_size=20,\n  page=1)\npages = response.total_pages\nworkspaces = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create Workspace",
        "description": "Creates a new workspace.\n",
        "operationId": "create-workspace",
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/workspaceCreateInclude"
          },
          {
            "$ref": "#/components/parameters/skipRemap"
          }
        ],
        "requestBody": {
          "description": "Workspace to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/WorkspaceListing"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Workspace object for newly created workspace.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/WorkspaceListing"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify workspace name\nWorkspace workspaceSpecification = new Workspace { Name = \"New workspace\" };\n\n// Create workspace\nWorkspace newWorkspace = smartsheet.WorkspaceResources.CreateWorkspace(workspaceSpecification);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\": \"New workspace\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify workspace name\nWorkspace workspaceSpecification = new Workspace();\nworkspaceSpecification.setName(\"New workspace\");\n\n// Create workspace\nWorkspace newWorkspace = smartsheet.workspaceResources().createWorkspace(workspaceSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify workspace name\nvar workspace = {\"name\": \"New workspace\"};\n\n// Set options\nvar options = {\n  body: workspace\n};\n\n// Create workspace\nsmartsheet.workspaces.createWorkspace(options)\n  .then(function(newWorkspace) {\n    console.log(newWorkspace);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Create workspace\nworkspace = smartsheet_client.Workspaces.create_workspace(\n  smartsheet.models.Workspace({\n    'name': 'New workspace'\n  })\n)\n\n# Sample 2: Include attachments\nworkspace = smartsheet_client.Workspaces.create_workspace(\n  include=attachments,\n  smartsheet.models.Workspace({\n      'name': 'New workspace'\n  })\n)\n"
          }
        ]
      }
    },
    "/workspaces/{workspaceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/workspaceId"
        }
      ],
      "get": {
        "summary": "Get Workspace",
        "description": "Gets a Workspace object.",
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "get-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/folderWorkspaceInclude"
          },
          {
            "in": "query",
            "name": "loadAll",
            "description": "If set to `true`, the workspace's entire hierarchy of items and folders is returned.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "A single Workspace object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Omit 'include' parameter\nWorkspace workspace = smartsheet.WorkspaceResources.GetWorkspace(\n  6621332407379844,           // long workspaceId\n  null                        // IEnumerable<WorkspaceInclusion> include\n);\n\n// Sample 2: Specify 'include' parameter with value of \"source\"\nWorkspace workspace = smartsheet.WorkspaceResources.GetWorkspace(\n  6621332407379844,           // long workspaceId\n  new WorkspaceInclusion[] { WorkspaceInclusion.SOURCE }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/{workspaceid} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Omit 'include' parameter\nWorkspace workspace = smartsheet.workspaceResources().getWorkspace(\n        6621332407379844L,      // long workspaceId\n        null                    // EnumSet<SourceInclusion> includes\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"source\"\nWorkspace workspace = smartsheet.workspaceResources().getWorkspace(\n        6621332407379844L,      // long workspaceId\n        EnumSet.of(SourceInclusion.SOURCE)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  workspaceId: 7116448184199044\n};\n\n// Get workspace\nsmartsheet.workspaces.getWorkspace(options)\n  .then(function(workspace) {\n    console.log(workspace);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get workspace\nworkspace = smartsheet_client.Workspaces.get_workspace(\n  6621332407379844)       # workspace_id\n\n# Sample 2: Include owner info and sheet version\nworkspace = smartsheet_client.Workspaces.get_workspace(\n  6621332407379844,       # workspace_id\n  include='ownerInfo,sheetVersion'\n  )\nworkspace = response.data\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Workspace",
        "description": "Deletes a workspace.",
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "operationId": "delete-workspace",
        "responses": {
          "200": {
            "description": "Returns Result object\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericResult"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.WorkspaceResources.DeleteWorkspace(\n  6621332407379844                // long workspaceId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/7960873114331012 \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.workspaceResources().deleteWorkspace(\n        6621332407379844L        // long workspaceId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  workspaceId: 6621332407379844\n};\n\n// Delete workspace\nsmartsheet.workspaces.deleteWorkspace(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Workspaces.delete_workspace(\n  6621332407379844)       # workspace_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Workspace",
        "description": "Updates a workspace.",
        "operationId": "update-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          }
        ],
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Workspace name.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the modified Workspace object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/Workspace"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify updated workspace name\nWorkspace workspaceSpecification = new Workspace\n{\n  Id = 7960873114331012,      // workspaceId\n  Name = \"Updated Workspace\"\n};\n\n// Update workspace\nWorkspace updatedWorkspace = smartsheet.WorkspaceResources.UpdateWorkspace(\n  workspaceSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/7960873114331012 \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"name\": \"Updated workspace\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify updated workspace properties\nWorkspace workspaceSpecification = new Workspace();\nworkspaceSpecification.setName(\"Updated workspace\")\n        .setId(7960873114331012L);    // long workspaceId\n\n// Update workspace\nWorkspace updatedWorkspace = smartsheet.workspaceResources().updateWorkspace(workspaceSpecification);\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify updated workspace properties\nvar workspace = {\"name\": \"Updated workspace\"};\n\n// Set options\nvar options = {\n  workspaceId: 7960873114331012,\n  body: workspace\n  };\n\n// Update workspace\nsmartsheet.workspaces.updateWorkspace(options)\n  .then(function(updatedWorkspace) {\n    console.log(updatedWorkspace);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Update workspace\nupdated_workspace = smartsheet_client.Workspaces.update_workspace(\n  7960873114331012,       # workspace_id\n  smartsheet.models.Workspace({\n    'name': 'Updated workspace'\n  })\n)\n\n# Sample 2: Allow Commenter access\nupdated_workspace = smartsheet_client.Workspaces.update_workspace(\n  7960873114331012,       # workspace_id\n  accessApiLevel=1,\n  smartsheet.models.Workspace({\n    'name': 'Updated workspace'\n  })\n)\n"
          }
        ]
      }
    },
    "/workspaces/{workspaceId}/copy": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/workspaceId"
        }
      ],
      "post": {
        "summary": "Copy Workspace",
        "description": "Copies a workspace.",
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "operationId": "copy-workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/workspaceCreateInclude"
          },
          {
            "$ref": "#/components/parameters/skipRemap"
          }
        ],
        "requestBody": {
          "description": "New workspace name.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ContainerDestinationForCopy"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Workspace object for the new workspace destination.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerDestinationForCopy"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify name for the new workspace\nContainerDestination destination = new ContainerDestination {\n  NewName = \"newWorkspaceName\"\n};\n\n// Sample 1: Omit 'include' and 'skipRemap' parameters\nWorkspace workspace = smartsheet.WorkspaceResources.CopyWorkspace(\n  7116448184199044,          // long workspaceId\n  destination,\n  null,                      // IEnumerable<WorkspaceCopyInclusion> include\n  null                       // IEnumerable<WorkspaceRemapExclusion> skipRemap\n);\n\n// Sample 2: Specify 'include' parameter with value of \"DATA\", and 'skipRemap' parameter with value of \"CELL_LINKS\"\nWorkspace workspace = smartsheet.WorkspaceResources.CopyWorkspace(\n  7116448184199044,           // long workspaceId\n  destination,\n  new WorkspaceCopyInclusion[] { WorkspaceCopyInclusion.DATA },\n  new WorkspaceRemapExclusion[] { WorkspaceRemapExclusion.CELL_LINKS }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/workspaces/{workspaceId}/copy?include=data' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"newName\": \"newWorkspaceName\"}' \\\n-X POST\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify name for the new workspace\nContainerDestination destination = new ContainerDestination();\ndestination.setNewName(\"newWorkspaceName\");\n\n// Sample 1: Omit 'include' and 'skipRemap' parameters\nWorkspace workspace = smartsheet.workspaceResources().copyWorkspace(\n        7116448184199044L,          // long workspaceId\n        destination,\n        null,                       // EnumSet<WorkspaceCopyInclusion> includes\n        null                        // EnumSet<WorkspaceRemapExclusion> skipRemap\n        );\n\n// Sample 2: Specify 'include' parameter with value of \"DATA\", and 'skipRemap' parameter with value of \"CELLLINKS\"\nWorkspace workspace = smartsheet.workspaceResources().copyWorkspace(\n        7116448184199044L,          // long workspaceId\n        destination,\n        EnumSet.of(WorkspaceCopyInclusion.DATA),\n        EnumSet.of(WorkspaceRemapExclusion.CELLLINKS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify new workspace name\nvar body = {\n  newName: \"newWorkspaceName\"\n};\n\n// Set elements to copy\nvar params = {\n  include: \"data,discussions\",\n  skipRemap: \"cellLinks\"\n};\n\n// Set options\nvar options = {\n  workspaceId: 7116448184199044,\n  body: body,\n  queryParameters: params\n};\n\n// Copy workspace\nsmartsheet.workspaces.copyWorkspace(options)\n  .then(function(copiedWorkspace) {\n    console.log(copiedWorkspace);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Copy workspace\nnew_workspace = smartsheet_client.Workspaces.copy_workspace(\n  7116448184199044,           # workspace_id\n  smartsheet.models.ContainerDestination({\n    'new_name': 'newWorkspaceName'\n  })\n)\n\n# Sample 2: Include attachments and discussions\nnew_workspace = smartsheet_client.Workspaces.copy_workspace(\n  7116448184199044,           # workspace_id\n  include='attachments,discussions',\n  smartsheet.models.ContainerDestination({\n    'new_name': 'newWorkspaceName'\n  })\n)\n"
          }
        ]
      }
    },
    "/workspaces/{workspaceId}/folders": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/workspaceId"
        }
      ],
      "get": {
        "summary": "List Workspace Folders",
        "description": "Lists a workspace's folders.",
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "operationId": "get-workspace-folders",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeAll"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Folder references.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "description": "Array of all the workspace folders, referenced by their ID, name, and URL.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "description": "The folder's unique identifier.",
                                "example": 987654321
                              },
                              "name": {
                                "type": "string",
                                "description": "The folder's name.",
                                "example": "Upcoming Campaigns"
                              },
                              "permalink": {
                                "type": "string",
                                "description": "URL to the folder in Smartsheet.",
                                "example": "https://app.smartsheet.com/folders/c8gJxw87cXpRCvCC5PPw6jFhFRrf5r8PxCrxvW21"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Folder> folders = smartsheet.WorkspaceResources.FolderResources.ListFolders(\n  1656220827314052,               // long workspaceId\n  null                            // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/folders \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Folder> folders = smartsheet.workspaceResources().folderResources().listFolders(\n        1656220827314052L,                   // long workspaceId\n        null                                 // PaginationParameters\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  workspaceId: 1656220827314052\n};\n\n// List folders in workspace\nsmartsheet.workspaces.listWorkspaceFolders(options)\n  .then(function(folderList) {\n    console.log(folderList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Workspaces.list_folders(\n  1656220827314052,       # workspace_id\n  include_all=True)\nfolders = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Workspaces.list_folders(\n  1656220827314052,       # workspace_id\n  page_size=5,\n  page=1)\npages = response.total_pages\nfolders = response.data\n"
          }
        ]
      },
      "post": {
        "summary": "Create a Folder",
        "description": "Creates a new folder.\n",
        "operationId": "create-workspace-folder",
        "tags": [
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Type"
          }
        ],
        "requestBody": {
          "description": "Folder to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderNameOnly"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Folder object for newly created folder.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/FolderSimpleResponse"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set folder name\nFolder folderSpecification = new Folder { Name = \"New folder\" };\n\n// Create folder in a workspace\nFolder newFolder = smartsheet.WorkspaceResources.FolderResources.CreateFolder(\n  1656220827314052,               // long workspaceId\n  folderSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/{workspaceid}/folders \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\": \"New folder\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set folder name\nFolder folderSpecification = new Folder();\nfolderSpecification.setName(\"New Folder\");\n\n// Create folder in a workspace\nFolder newFolder = smartsheet.workspaceResources().folderResources().createFolder(\n        1656220827314052L,       // long workspaceId\n        folderSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set folder name\nvar folder = {\n  \"name\": \"New folder\"\n};\n\n// Set options\nvar options = {\n  workspaceId: 1656220827314052,\n  body: folder\n  };\n\n// Create folder in a workspace\nsmartsheet.workspaces.createFolder(options)\n  .then(function(newFolder) {\n    console.log(newFolder);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "new_workspace = smartsheet_client.Workspaces.create_folder_in_workspace(\n  1656220827314052,       # workspace_id\n  'New folder')\n"
          }
        ]
      }
    },
    "/workspaces/{workspaceId}/shares": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/accessApiLevel"
        },
        {
          "$ref": "#/components/parameters/workspaceId"
        }
      ],
      "post": {
        "summary": "Share Workspace",
        "description": "Shares a Workspace with the specified users and groups. This operation supports both single-object and bulk semantics.\n\n**_This operation is only available to system administrators._**\n",
        "operationId": "share-workspace",
        "tags": [
          "sharing",
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/sendEmail"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Share"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Share"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This operation supports both single-object and bulk semantics. For more information, see Optional Bulk Operations.\n",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/Share"
                            },
                            {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Share"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "If called with a single Share object, and that user or group share already exists, error code 1025 is returned.\nIf called with an array of Share objects, and one or more user or group shares in the array already exist,\nthey are ignored and omitted from the response.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Specify share (to one user as Editor)\nShare[] shareSpecification = new Share[] { new Share\n  {\n    Email = \"jane.doe@smartsheet.com\",\n    AccessLevel = AccessLevel.EDITOR\n  }\n};\n\n// Share workspace\nIList<Share> addressList = smartsheet.WorkspaceResources.ShareResources.ShareTo(\n  7960873114331012,               // long workspaceId\n  shareSpecification,\n  true                            // Nullable<bool> sendEmail\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl 'https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares?sendEmail=true' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '[{\"email\": \"jane.doe@smartsheet.com\", \"accessLevel\": \"EDITOR\"}]'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Specify share (to one user as Editor)\nShare shareSpecification = new Share()\n        .setEmail(\"jane.doe@smartsheet.com\")\n        .setAccessLevel(AccessLevel.EDITOR);\n\n// Share workspace\nList<Share> addressList = smartsheet.workspaceResources().shareResources().shareTo(\n        7960873114331012L,                    // long workspaceId\n        (Arrays.asList(shareSpecification)),\n        true                                  // Boolean sendEmail\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Specify share (to one user as Editor)\nvar shares = [\n  {\n    \"email\": \"john.doe@smartsheet.com\",\n    \"accessLevel\": \"EDITOR\"\n  }\n];\n\n// Set options\nvar options = {\n  workspaceId: 7960873114331012,\n  body: shares\n};\n\n// Share workspace\nsmartsheet.workspaces.share(options)\n  .then(function(addressList) {\n    console.log(addressList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Share workspace\nresponse = smartsheet_client.Workspaces.share_workspace(\n  1656220827314052,       # workspace_id\n  smartsheet.models.Share({\n    'access_level': 'EDITOR',\n    'email': 'jane.doe@smartsheet.com'\n  })\n)\n\n# Sample 2: Allow Commenter access\nresponse = smartsheet_client.Workspaces.share_workspace(\n  1656220827314052,       # workspace_id\n  accessApiLevel=1,       # enables functionality\n  smartsheet.models.Share({\n    'access_level': 'COMMENTER',     # declares access level\n    'email': 'jane.doe@smartsheet.com'\n  })\n)\n"
          }
        ]
      },
      "get": {
        "summary": "List Workspace Shares",
        "description": "Gets a list of all users and groups to whom the specified Workspace is shared, and their access level.",
        "operationId": "list-workspace-shares",
        "tags": [
          "sharing",
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/includeAll"
          }
        ],
        "responses": {
          "200": {
            "description": "IndexResult object containing an array of Share objects.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/IndexResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Omit pagination parameters\nPaginatedResult<Share> shares = smartsheet.WorkspaceResources.ShareResources.ListShares(\n  1656220827314052,               // long workspaceId\n  null                            // PaginationParameters\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Omit pagination parameters\nPagedResult<Share> shares = smartsheet.workspaceResources().shareResources().listShares(\n        1656220827314052L,       // long workspaceId\n        null,                    // PaginationParameters\n        true                     // Boolean includeWorkspaceShares\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  workspaceId: 1656220827314052\n};\n\n// List workspace shares\nsmartsheet.workspaces.listShares(options)\n  .then(function(shareList) {\n    console.log(shareList);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: List all\nresponse = smartsheet_client.Workspaces.list_shares(\n  1656220827314052,       # workspace_id\n  include_all=True)\nshares = response.data\n\n# Sample 2: Paginate the list\nresponse = smartsheet_client.Workspaces.list_shares(\n  1656220827314052,       # workspace_id\n  page_size=10,\n  page=1)\npages = response.total_pages\nshares = response.data\n"
          }
        ]
      }
    },
    "/workspaces/{workspaceId}/shares/{shareId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/workspaceId"
        },
        {
          "$ref": "#/components/parameters/shareId"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Workspace Share",
        "description": "Gets the share specified in the URL.",
        "operationId": "share-workspace-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          }
        ],
        "tags": [
          "sharing",
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "READ_SHEETS"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Share object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Share"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Share share = smartsheet.WorkspaceResources.ShareResources.GetShare(\n  1656220827314052,           // long workspaceId\n  \"AQAISF82FOeE\"              // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\"\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Share share = smartsheet.workspaceResources().shareResources().getShare(\n        1656220827314052L,       // long workspaceId\n        \"AQAISF82FOeE\"           // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  workspaceId: 1656220827314052,\n  shareId: \"AQAISF82FOeE\"\n};\n\n// Get workspace share\nsmartsheet.workspaces.getShare(options)\n  .then(function(share) {\n    console.log(share);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Get workspace share\nshare = smartsheet_client.Sheets.get_share(\n  1656220827314052,           # workspace_id\n  'AAAEQesWFOeE')             # share_id\n\n# Sample 2: Enable Commenter access\nshare = smartsheet_client.Sheets.get_share(\n  1656220827314052,           # workspace_id\n  accessApiLevel=1,\n  'AAAEQesWFOeE')             # share_id\n"
          }
        ]
      },
      "delete": {
        "summary": "Delete Workspace Share",
        "description": "Deletes the share specified in the URL.\n\n**_This operation is only available to system administrators._**\n",
        "operationId": "delete-workspace-share",
        "tags": [
          "sharing",
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Result object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "smartsheet.WorkspaceResources.ShareResources.DeleteShare(\n  1656220827314052,               // long workspaceId\n  \"AAAEQesWFOeE\"                  // string shareId\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-X DELETE\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "smartsheet.workspaceResources().shareResources().deleteShare(\n        1656220827314052L,       // long workspaceId\n        \"AAAEQesWFOeE\"           // string shareId\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set options\nvar options = {\n  workspaceId: 1656220827314052,\n  shareId: \"AAAEQesWFOeE\"\n};\n\n// Delete workspace share\nsmartsheet.workspaces.deleteShare(options)\n  .then(function(results) {\n    console.log(results);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "smartsheet_client.Workspaces.delete_share(\n  1656220827314052,           # workspace_id\n  'AAAEQesWFOeE')             # share_id\n"
          }
        ]
      },
      "put": {
        "summary": "Update Workspace Share",
        "description": "Updates the access level of a user or group for the specified workspace.\n\n**_This operation is only available to system administrators._**\n",
        "operationId": "update-workspace-share",
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          }
        ],
        "tags": [
          "sharing",
          "workspaces"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "ADMIN_WORKSPACES"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accessLevel": {
                    "$ref": "#/components/schemas/AccessLevel"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing the modified Share object.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Result"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "object",
                          "items": {
                            "$ref": "#/components/schemas/Share"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Set the access level to Viewer\nShare shareSpecification = new Share\n{\n  Id = \"AAAFeF82FOeE\",\n  AccessLevel = AccessLevel.VIEWER\n};\n\n// Update workspace share\nShare updatedShare = smartsheet.WorkspaceResources.ShareResources.UpdateShare(\n  1656220827314052,             // long workspaceId\n  shareSpecification\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/shares/{shareId} \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X PUT \\\n-d '{\"accessLevel\": \"VIEWER\"}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Set the access level to Viewer\nShare shareSpecification = new Share();\n        shareSpecification.setAccessLevel(AccessLevel.VIEWER)\n        .setId(\"AAAFeF82FOeE\");   // string shareId\n\n// Update workspace share\nShare updatedShare = smartsheet.workspaceResources().shareResources().updateShare(\n        1656220827314052L,   // long workspaceId\n        shareSpecification\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Set access level to Viewer\nvar share = {\"accessLevel\": \"VIEWER\"};\n\n// Set options\nvar options = {\n  workspaceId: 1656220827314052,\n  shareId: \"AAAFeF82FOeE\",\n  body: share\n  };\n\n// Update workspace share\nsmartsheet.workspaces.updateShare(options)\n  .then(function(updatedShare) {\n    console.log(updatedShare);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Update workspace share\nupdated_share = smartsheet_client.Workspaces.update_share(\n  1656220827314052,       # workspace_id\n  'AAAFeF82FOeE',         # share_id\n  smartsheet.models.Share({\n    'access_level': 'VIEWER'\n  })\n)\n\n# Sample 2: Enable Commenter access\nupdated_share = smartsheet_client.Workspaces.update_share(\n  1656220827314052,       # workspace_id\n  'AAAFeF82FOeE',         # share_id\n  accessApiLevel=1,       # enables functionality\n  smartsheet.models.Share({\n    'access_level': 'COMMENTER'   # declares access level\n  })\n)\n"
          }
        ]
      }
    },
    "/workspaces/{workspaceId}/sheets": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/workspaceId"
        }
      ],
      "post": {
        "summary": "Create Sheet in Workspace",
        "description": "Creates a sheet from scratch or from the specified template at the top-level of the specified workspace.\nFor subfolders, use Create Sheet in Folder.\n",
        "operationId": "create-sheet-in-workspace",
        "tags": [
          "sheets"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accessApiLevel"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "requestBody": {
          "description": "Sheet to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SheetToCreate"
                  },
                  {
                    "$ref": "#/components/schemas/SheetToCreateFromTemplate"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Sheet object for newly created sheet, corresponding to what was specified in the request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/SheetCreated"
                            },
                            {
                              "$ref": "#/components/schemas/SheetCreatedFromTemplate"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "// Sample 1: Create sheet in workspace\n// Specify properties of the first column\nColumn columnA = new Column\n{\n  Title = \"Favorite\",\n  Primary = false,\n  Type = ColumnType.CHECKBOX,\n  Symbol = Symbol.STAR\n};\n\n// Specify properties of the second column\nColumn columnB = new Column\n{\n  Title = \"Primary Column\",\n  Primary = true,\n  Type = ColumnType.TEXT_NUMBER\n};\n\n// Create sheet in workspace (specifying the 2 columns to include in the sheet)\nSheet newSheet = smartsheet.WorkspaceResources.SheetResources.CreateSheet(\n  3734419270854532,                   // long workspaceId\n  new Sheet\n    {\n      Name = \"new sheet title\",\n      Columns = new Column[] { columnA, columnB }\n    }\n);\n\n// Sample 2: Create sheet in workspace from template\n// Specify name for the sheet and Id of the template\nSheet sheetSpecification = new Sheet\n{\n  Name = \"new sheet title\",\n  FromId = 7679398137620356     // template Id\n};\n\n// Option 1: Omit 'include' parameter\nSheet newSheet = smartsheet.WorkspaceResources.SheetResources.CreateSheetFromTemplate(\n  1656220827314052,               // long workspaceId\n  sheetSpecification,\n  null                            // IEnumerable<TemplateInclusion> include\n);\n\n// Option 2: Include ATTACHMENTS, DATA, and DISCUSSIONS\nSheet newSheet = smartsheet.WorkspaceResources.SheetResources.CreateSheetFromTemplate(\n  1656220827314052,               // long workspaceId\n  sheetSpecification,\n  new TemplateInclusion[] {\n    TemplateInclusion.ATTACHMENTS,\n    TemplateInclusion.DATA,\n    TemplateInclusion.DISCUSSIONS }\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "// Sample 1: Create sheet in workspace\ncurl https://api.smartsheet.com/2.0/workspaces/{workspaceId}/sheets \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\":\"newsheet\",\"columns\":[{\"title\":\"Favorite\",\"type\":\"CHECKBOX\",\"symbol\":\"STAR\"}, {\"title\":\"Primary Column\", \"primary\":true,\"type\":\"TEXT_NUMBER\"}]}'\n\n// Sample 2: Create sheet in workspace from template\ncurl 'https://api.smartsheet.com/2.0/workspaces/{workspaceId}/sheets?include=data,attachments,discussions' \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d '{\"name\":\"newsheet\", \"fromId\": 7679398137620356}'\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "// Sample 1: Create sheet in workspace\n// Specify properties of the first column\nColumn columnA = new Column()\n        .setTitle(\"Favorite\")\n        .setType(ColumnType.CHECKBOX)\n        .setSymbol(Symbol.STAR);\n\n// Specify properties of the second column\nColumn columnB = new Column()\n        .setTitle(\"Primary Column\")\n        .setType(ColumnType.TEXT_NUMBER)\n        .setPrimary(true);\n\n// Create sheet in workspace (specifying the 2 columns to include in the sheet)\nSheet newSheet = new Sheet();\n        newSheet.setName(\"new sheet title\");\n        newSheet.setColumns(Arrays.asList(columnA, columnB));\n\nsmartsheet.sheetResources().createSheetInWorkspace(\n        3734419270854532L,    // long workspaceId\n        newSheet\n        );\n\n// Sample 2: Create sheet in workspace from template\n// Specify name for the sheet and Id of the template\nSheet sheet = new Sheet();\nsheet.setFromId(7679398137620356L);     // long templateId\nsheet.setName(\"newsheet\");\n\n// Option 1: Omit 'include' parameter\nSheet newSheet = smartsheet.sheetResources().createSheetInWorkspaceFromTemplate(\n        1656220827314052L,                  // long workspaceId\n        sheetSpecification,\n        null                                // EnumSet<SheetTemplateInclusion> includes\n        );\n\n// Option 2: Include ATTACHMENTS, DATA, and DISCUSSIONS\nSheet newSheet = smartsheet.sheetResources().createSheetInWorkspaceFromTemplate(\n        1656220827314052L,                 // long workspaceId\n        sheetSpecification,\n        EnumSet.of(\n            SheetTemplateInclusion.ATTACHMENTS,\n            SheetTemplateInclusion.DATA,\n            SheetTemplateInclusion.DISCUSSIONS)\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Create sheet in workspace\n// Specify sheet properties\nvar sheet = {\n  \"name\": \"newsheet\",\n  \"columns\": [\n    {\n      \"title\": \"Favorite\",\n      \"type\": \"CHECKBOX\",\n      \"symbol\": \"STAR\"\n    },\n    {\n      \"title\": \"Primary Column\",\n      \"primary\": true,\n      \"type\": \"TEXT_NUMBER\"\n    }\n  ]\n};\n\n// Set options\nvar options = {\n  workspaceId: 1656220827314052,\n  body: sheet\n};\n\n// Create sheet in workspace\nsmartsheet.sheets.createSheetInWorkspace(options)\n  .then(function(newSheet) {\n    console.log(newSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 2: Create sheet in workspace from template\n// Specify the directive\nvar sheet = {\n  \"fromId\": 7679398137620356,\n  \"name\": \"newsheet\"\n  };\n\n// Set options\nvar options = {\n  workspaceId: 1656220827314052,\n  body: sheet\n  };\n\n// Create sheet from template in the specified workspace\nsmartsheet.sheets.createSheetFromExisting(options)\n  .then(function(newSheet) {\n    console.log(newSheet);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "# Sample 1: Create sheet in workspace\nsheet_spec = smartsheet.models.Sheet({\n  'name': 'newsheet',\n  'columns': [{\n      'title': 'Favorite',\n      'type': 'CHECKBOX',\n      'symbol': 'STAR'\n    }, {\n      'title': 'Primary Column',\n      'primary': True,\n      'type': 'TEXT_NUMBER'\n    }\n  ]\n})\n\nresponse = smartsheet_client.Workspaces.create_sheet_in_workspace(\n  3734419270854532,           # workspace_id\n  sheet_spec)\nnew_sheet = response.result\n\n# Sample 2: Create sheet in workspace from template\nresponse = smartsheet_client.Workspaces.create_sheet_in_workspace_from_template(\n  1656220827314052,                   # workspace_id\n  smartsheet.models.Sheet({\n    'name': 'newsheet',\n    'from_id': 7679398137620356     # template_id\n  })\n)\n"
          }
        ]
      }
    },
    "/workspaces/{workspaceId}/sheets/import": {
      "parameters": [
        {
          "$ref": "#/components/parameters/Authorization"
        },
        {
          "$ref": "#/components/parameters/workspaceId"
        }
      ],
      "post": {
        "summary": "Import Sheet into Workspace",
        "description": "Imports CSV or XLSX data into a new sheet in the specified workspace.\n\nNote the following:\n* Both sheetName and the file name must use ASCII characters.\n* The source data must be basic text. To include rich formula data, import and create a sheet first, and then use Update Rows. To work with images, see Cell Images.\n* XLS is not supported. You must use XLSX.\n* Hierarchical relationships between rows in an external file won't import.\n",
        "operationId": "import-sheet-into-workspace",
        "tags": [
          "imports"
        ],
        "security": [
          {
            "APIToken": []
          },
          {
            "OAuth2": [
              "CREATE_SHEETS"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Disposition"
          },
          {
            "$ref": "#/components/parameters/parameters-Content-Type"
          },
          {
            "$ref": "#/components/parameters/sheetName"
          },
          {
            "$ref": "#/components/parameters/headerRowIndex"
          },
          {
            "$ref": "#/components/parameters/primaryColumnIndex"
          }
        ],
        "requestBody": {
          "description": "Binary content for the CSV / XLSX file.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result object containing a Sheet object for imported sheet.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GenericResult"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "result": {
                          "$ref": "#/components/schemas/SheetImported"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Generic Error Payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "label": "C#",
            "source": "Sheet sheet = smartsheet.WorkspaceResources.SheetResources.ImportXlsSheet(\n  4124946017347460,       // workspaceId\n  \"D:/ProgressReport.xlsx\",\n  null,                   // sheetName defaults to file name unless specified\n  0,                      // headerRowIndex\n  null                    // primaryColumnIndex\n);\n"
          },
          {
            "lang": "cURL",
            "label": "cURL",
            "source": "curl  https://api.smartsheet.com/2.0/workspaces/{workspaceId}/sheets/import?sheetName=MarketingProgressReport&headerRowIndex=0&primaryColumnIndex=0 \\\n-H \"Authorization: Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789\" \\\n-H \"Content-Disposition: attachment\" \\\n-H \"Content-Type: text/csv\" \\\n-X POST \\\n--data-binary @ProgressReport.csv\n"
          },
          {
            "lang": "Java",
            "label": "Java",
            "source": "Sheet sheet = smartsheet.sheetResources().importXlsxInWorkspace(\n        4124946017347460L,           // long workspaceId\n        \"D:/ProgressReport.xlsx\",\n        \"MarketingProgressReport\",\n        0,                          // headerRowIndex\n        0                           // primaryColumnIndex\n        );\n"
          },
          {
            "lang": "Node.js",
            "label": "Node.js",
            "source": "// Sample 1: Import CSV into workspace\n// Set options\nvar options = {\n  workspaceId: 4124946017347460,\n  queryParameters: {\n    sheetName: 'MarketingProgressReport'\n  },\n  path: \"D:/ProgressReport.csv\"\n};\n\n// Import CSV as sheet into workspace\nsmartsheet.sheets.importCsvSheetIntoWorkspace(options)\n  .then(function(attachment) {\n    console.log(attachment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n// Sample 2: Import XLSX into workspace\n// Set options\nvar options = {\n  workspaceId: 4124946017347460,\n  queryParameters: {\n    sheetName: 'MarketingProgressReport'\n  },\n  path: \"D:/ProgressReport.xlsx\"\n};\n\n// Import XLSX as sheet into workspace\nsmartsheet.sheets.importXlsxSheetIntoWorkspace(options)\n  .then(function(attachment) {\n    console.log(attachment);\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n"
          },
          {
            "lang": "Python",
            "label": "Python",
            "source": "imported_sheet = smartsheet_client.Workspaces.import_xlsx_sheet(\n  4124946017347460,           # workspace_id\n  'D:/ProgressReport.xlsx',\n  'MarketingProgressReport',  # sheet_name\n  header_row_index=0\n)\n"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccessLevel": {
        "type": "string",
        "enum": [
          "ADMIN",
          "COMMENTER",
          "EDITOR",
          "EDITOR_SHARE",
          "OWNER",
          "VIEWER"
        ]
      },
      "Account": {
        "type": "object",
        "x-tags": [
          "users"
        ],
        "properties": {
          "id": {
            "description": "Account Id.",
            "type": "number",
            "example": 122454719915908
          },
          "name": {
            "description": "Account name.",
            "type": "string",
            "example": "Smartsheet Org"
          }
        }
      },
      "AlternateEmail": {
        "type": "object",
        "x-tags": [
          "alternateEmailAddress"
        ],
        "properties": {
          "id": {
            "description": "AlternateEmail Id.",
            "type": "number",
            "example": 8150532427671428
          },
          "confirmed": {
            "description": "Indicates whether the alternate email address has been confirmed.",
            "type": "boolean",
            "example": true
          },
          "email": {
            "description": "User's alternate email address.",
            "type": "string",
            "example": "johnathan.doe@smartsheet.com"
          }
        }
      },
      "Attachment": {
        "description": "Attachment Object",
        "type": "object",
        "x-tags": [
          "attachments"
        ],
        "properties": {
          "id": {
            "description": "Attachment Id.",
            "type": "number"
          },
          "parentId": {
            "description": "The Id of the parent.",
            "type": "number"
          },
          "attachmentType": {
            "description": "Attachment type. Note--Dropbox, Egnyte, and Evernote are not supported for Smartsheet.gov accounts.",
            "type": "string",
            "enum": [
              "BOX_COM",
              "DROPBOX",
              "EGNYTE",
              "EVERNOTE",
              "FILE",
              "GOOGLE_DRIVE",
              "LINK",
              "ONEDRIVE",
              "TRELLO"
            ]
          },
          "attachmentSubType": {
            "description": "Attachment sub type. Note--Folder type is for EGNYTE values and the rest are GOOGLE_DRIVE values.",
            "type": "string",
            "enum": [
              "DOCUMENT",
              "DRAWING",
              "FOLDER",
              "PDF",
              "PRESENTATION",
              "SPREADSHEET"
            ]
          },
          "mimeType": {
            "description": "Attachment MIME type.",
            "type": "string",
            "example": "PNG"
          },
          "parentType": {
            "description": "The type of object the attachment belongs to.",
            "type": "string",
            "enum": [
              "COMMENT",
              "PROOF",
              "ROW",
              "SHEET"
            ]
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "createdBy": {
            "description": "`User` object containing `name` and `email` of the user who created this attachment.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "name": {
            "description": "Attachment name.",
            "type": "string"
          },
          "sizeInKb": {
            "description": "The size of the file, if the attachmentType is FILE.",
            "type": "number"
          },
          "url": {
            "description": "Attachment temporary URL (files only).",
            "type": "string"
          },
          "urlExpiresInMillis": {
            "description": "Attachment temporary URL time to live (files only).",
            "type": "number"
          }
        }
      },
      "AutomationAction": {
        "type": "object",
        "x-tags": [
          "automationRules"
        ],
        "properties": {
          "includedColumnIds": {
            "description": "Specifies which columns to include in message.",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "APPROVAL_REQUEST_ACTION",
              "NOTIFICATION_ACTION",
              "UPDATE_REQUEST_ACTION"
            ]
          },
          "frequency": {
            "type": "string",
            "enum": [
              "DAILY",
              "HOURLY",
              "IMMEDIATELY",
              "WEEKLY"
            ]
          },
          "includeAllColumns": {
            "description": "If true, all columns are included in email contents.",
            "type": "boolean",
            "default": true
          },
          "includeAttachments": {
            "description": "If true, all attachments are included in email contents.",
            "type": "string"
          },
          "includeDiscussions": {
            "description": "If true, all discussions are included in email contents.",
            "type": "boolean"
          },
          "message": {
            "description": "Email body.",
            "type": "string"
          },
          "subject": {
            "description": "Email subject line.",
            "type": "string"
          }
        },
        "oneOf": [
          {
            "properties": {
              "notifyAllSharedUsers": {
                "description": "If true, notifications are sent to all users shared to the sheet.",
                "type": "boolean"
              }
            }
          },
          {
            "properties": {
              "recipients": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Recipient"
                }
              }
            }
          },
          {
            "properties": {
              "recipientColumnIds": {
                "description": "Array of column Ids from which to collect email recipients.",
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      },
      "AutomationRule": {
        "type": "object",
        "x-tags": [
          "automationRules"
        ],
        "properties": {
          "id": {
            "description": "AutomationRule Id.",
            "type": "number"
          },
          "action": {
            "description": "An [AutomationAction object](/api/smartsheet/openapi/automationrules/automationaction) containing information for this rule, such as type, recipients, and frequency."
          },
          "createdAt": {
            "description": "A timestamp of when the rule was originally added.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "createdBy": {
            "description": "`User` object containing `name` and `email` of the creator of this rule.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "disabledReason": {
            "description": "Machine-readable reason a rule is disabled:\n* `APPROVAL_COLUMN_MISSING` This rule's approval status column has been deleted.\n\n* `APPROVAL_COLUMN_WRONG_TYPE` The approval column must be a dropdown column.\n\n* `AUTOMATION_NOT_ENABLED_FOR_ORG` To create or edit automated actions,\nyou need to upgrade your organization account to a Business or Enterprise plan.\n\n* `COLUMN_MISSING` A column referenced by this rule has been deleted.\n\n* `COLUMN_TYPE_INCOMPATIBLE` A column referenced by this rule has been changed to an incompatible column type.\n\n* `NO_POTENTIAL_RECIPIENTS` This rule has no recipients that will be able to receive\nnotifications based on this sheet's permission settings or this account's approved domain sharing list.\n\n* `NO_VALID_SELECTED_COLUMNS` All selected columns for this rule have been deleted.\n",
            "type": "string",
            "enum": [
              "APPROVAL_COLUMN_MISSING",
              "APPROVAL_COLUMN_WRONG_TYPE",
              "AUTOMATION_NOT_ENABLED_FOR_ORG",
              "COLUMN_MISSING",
              "COLUMN_TYPE_INCOMPATIBLE",
              "NO_POTENTIAL_RECIPIENTS",
              "NO_VALID_SELECTED_COLUMNS"
            ]
          },
          "disabledReasonText": {
            "description": "Descriptive reason a rule is disabled.",
            "type": "string"
          },
          "enabled": {
            "description": "If true, indicates that the rule is active.",
            "type": "boolean"
          },
          "modifiedAt": {
            "description": "The datetime for when the change was made to the rule.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "modifiedBy": {
            "description": "`User` object containing the `name` and `email` of the user that made the change.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "name": {
            "description": "Rule name as shown in the UI.",
            "type": "string"
          },
          "userCanModify": {
            "description": "If true, indicates that the current user can modify the rule.",
            "type": "boolean"
          }
        }
      },
      "AutoNumberFormat": {
        "type": "object",
        "description": "Object that describes how the the System Column type of \"AUTO_NUMBER\" is auto-generated.",
        "properties": {
          "fill": {
            "description": "Indicates zero-padding. Must be between 0 and 10 \"0\" (zero) characters.",
            "type": "string"
          },
          "prefix": {
            "description": "The prefix. Can include the date tokens:\n  * {DD}\n  * {MM}\n  * {YY}\n  * {YYYY}\n",
            "type": "string"
          },
          "startingNumber": {
            "description": "The starting number for the auto-id.",
            "type": "number"
          },
          "suffix": {
            "description": "The suffix. Can include the date tokens:\n  * {DD}\n  * {MM}\n  * {YY}\n  * {YYYY}\n",
            "type": "string"
          }
        }
      },
      "BulkItemFailure": {
        "type": "object",
        "properties": {
          "rowId": {
            "description": "The Id of the row that failed. Applicable only to bulk row operations.",
            "type": "number",
            "nullable": true
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          },
          "index": {
            "description": "The index of the failed item in the bulk request array.",
            "type": "number"
          }
        }
      },
      "Callback": {
        "type": "object",
        "x-tags": [
          "webhooks"
        ],
        "properties": {
          "scopeObjectId": {
            "type": "number",
            "description": "Id of the object that corresponds to scope.",
            "example": 3285357287499652,
            "readOnly": true
          },
          "webhookId": {
            "type": "number",
            "description": "Id of the corresponding webhook.",
            "example": 8444254503626628
          },
          "events": {
            "$ref": "#/components/schemas/CallbackEvents"
          },
          "newWebhookStatus": {
            "type": "string",
            "description": "New status of the corresponding webhook. Only returned for webhook status change callbacks (null for event callbacks).",
            "example": "ENABLED"
          },
          "nonce": {
            "type": "string",
            "description": "Random value that is distinct for each callback."
          },
          "scope": {
            "type": "string",
            "description": "Scope of the webhook. Currently, the only supported value is sheet.",
            "enum": [
              "sheet"
            ],
            "example": "sheet"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Time that the callback was generated."
          }
        }
      },
      "CallbackEvent": {
        "type": "object",
        "x-tags": [
          "webhooks"
        ],
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of the object that corresponds to objectType. Omitted if objectType is cell.",
            "example": 3285357287499652
          },
          "columnId": {
            "type": "number",
            "description": "Only present if objectType is cell. The Id of the column where the cell is located.",
            "nullable": true
          },
          "rowId": {
            "type": "number",
            "description": "Only present if objectType is cell. The Id of the row where the cell is located.",
            "nullable": true
          },
          "userId": {
            "type": "number",
            "description": "The user Id of the person who caused this event.",
            "example": 48569348493401210
          },
          "objectType": {
            "description": "Type of object for which event occurred.",
            "type": "string",
            "enum": [
              "attachment",
              "cell",
              "column",
              "comment",
              "discussion",
              "row",
              "sheet"
            ],
            "example": "sheet"
          },
          "changeAgent": {
            "type": "string",
            "description": "A comma-delimited list of values that uniquely identify the agents responsible for making the changes that caused the callback to occur. Only present if the change agent included the Smartsheet-Change-Agent header in the API request that changed data in Smartsheet. For more information, see [Preventing Infinite Loops](/api/smartsheet/openapi/webhooks)."
          },
          "eventType": {
            "type": "string",
            "description": "Type of Event that occurred.",
            "enum": [
              "created",
              "deleted",
              "updated"
            ],
            "example": "created"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Time that this event occurred. A callback may contain events with different timestamps, as multiple separate events may be aggregated into a single callback request."
          }
        }
      },
      "Cell": {
        "type": "object",
        "x-tags": [
          "cells"
        ],
        "properties": {
          "columnId": {
            "type": "number",
            "description": "The Id of the column that the cell is located in."
          },
          "columnType": {
            "type": "string",
            "description": "Only returned if the include query string parameter contains **columnType**."
          },
          "conditionalFormat": {
            "type": "string",
            "description": "The format descriptor describing this cell's conditional format. Only returned if the include query string parameter contains **format** and this cell has a conditional format applied."
          },
          "displayValue": {
            "type": "string",
            "description": "Visual representation of cell contents, as presented to the user in the UI."
          },
          "format": {
            "type": "string",
            "description": "The format descriptor. Only returned if the include query string parameter contains **format** and this cell has a non-default format applied."
          },
          "formula": {
            "type": "string",
            "description": "The formula for a cell, if set, for instance **=COUNTM([Assigned To]3)**. Note that calculation errors or problems with a formula do not cause the API call to return an error code. Instead, the response contains the same value as in the UI, such as **cell.value = \"#CIRCULAR REFERENCE\"**."
          },
          "hyperlink": {
            "$ref": "#/components/schemas/Hyperlink"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "linkInFromCell": {
            "$ref": "#/components/schemas/CellLink"
          },
          "linksOutToCells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CellLink"
            }
          },
          "objectValue": {
            "$ref": "#/components/schemas/ObjectValue"
          },
          "overrideValidation": {
            "type": "boolean",
            "description": "(Admin only) Indicates whether the cell value can contain a value outside of the validation limits (value = **true**). When using this parameter, you must also set **strict** to **false** to bypass value type checking. This property is honored for POST or PUT actions that update rows."
          },
          "strict": {
            "type": "boolean",
            "description": "Set to **false** to enable lenient parsing. Defaults to **true**. You can specify this attribute in a request, but it is never present in a response."
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "A string, number, or a Boolean value -- depending on the cell type and the data in the cell. Cell values larger than 4000 characters are silently truncated. An empty cell returns no value."
          }
        }
      },
      "CellDataItem": {
        "type": "object",
        "properties": {
          "columnId": {
            "description": "Column Id for each item.",
            "type": "number"
          },
          "rowId": {
            "description": "Row Id for each item.",
            "type": "number"
          },
          "sheetId": {
            "description": "Sheet Id for each item.",
            "type": "number"
          },
          "objectValue": {
            "description": "The type of data returned depends on the cell type and the data in the cell.",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "cell": {
            "$ref": "#/components/schemas/Cell"
          },
          "dataSource": {
            "type": "string",
            "enum": [
              "CELL",
              "SUMMARY_FIELD"
            ]
          },
          "inheritCellValue": {
            "description": "Specifies if valueFormat is inherited from the underlying cell value",
            "type": "boolean"
          },
          "label": {
            "description": "Label for the data point. This is either the column name or a user-provided string.",
            "type": "string"
          },
          "labelFormat": {
            "description": "Format description for label.",
            "type": "string",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "labelFont": {
            "$ref": "#/components/schemas/DashboardFont"
          },
          "order": {
            "description": "The display order for the CellDataItem.",
            "type": "number"
          },
          "profileField": {
            "$ref": "#/components/schemas/SummaryField"
          },
          "valueFormat": {
            "description": "Format description for value.",
            "type": "string",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "valueFont": {
            "$ref": "#/components/schemas/DashboardFont"
          }
        }
      },
      "CellHistory": {
        "type": "object",
        "x-tags": [
          "cells"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          }
        ],
        "properties": {
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedBy": {
            "description": "User object containing the name and email of the user that made the change.",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          }
        }
      },
      "CellLink": {
        "type": "object",
        "properties": {
          "columnId": {
            "type": "number",
            "description": "Column Id of the linked cell."
          },
          "rowId": {
            "type": "number",
            "description": "Row Id of the linked cell."
          },
          "sheetId": {
            "type": "number",
            "description": "Sheet Id of the sheet that the linked cell belongs to."
          },
          "sheetName": {
            "type": "string",
            "description": "Sheet name of the linked cell."
          },
          "status": {
            "type": "string",
            "enum": [
              "BLOCKED",
              "BROKEN",
              "CIRCULAR",
              "DISABLED",
              "INACCESSIBLE",
              "INVALID",
              "NOT_SHARED",
              "OK"
            ],
            "description": "* `BLOCKED` One of several other values indicating unusual error conditions.\n* `BROKEN` The row or sheet linked to was deleted.\n* `CIRCULAR` One of several other values indicating unusual error conditions.\n* `DISABLED` One of several other values indicating unusual error conditions.\n* `INACCESSIBLE` The sheet linked to cannot be viewed by this user.\n* `INVALID` One of several other values indicating unusual error conditions.\n* `NOT_SHARED` One of several other values indicating unusual error conditions.\n* `OK` The link is in a good state.\n"
          }
        }
      },
      "CellLinkWidgetContent": {
        "type": "object",
        "title": "Metric",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "METRIC",
              "SHEETSUMMARY"
            ]
          },
          "sheetId": {
            "description": "Sheet Id from which the cell data originates.",
            "type": "number"
          },
          "cellData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CellDataItem"
            }
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "hyperlink": {
            "$ref": "#/components/schemas/WidgetHyperlink"
          }
        }
      },
      "ChartWidgetContent": {
        "type": "object",
        "title": "Chart",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CHART"
            ]
          },
          "reportId": {
            "description": "Report Id denoting container source, if applicable.",
            "type": "number"
          },
          "sheetId": {
            "description": "Sheet Id denoting container source, if applicable.",
            "type": "number"
          },
          "axes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Axes"
            }
          },
          "hyperlink": {
            "$ref": "#/components/schemas/WidgetHyperlink"
          },
          "includedColumnIds": {
            "description": "Array of column Ids if the range was selected through the UI.",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "legend": {
            "$ref": "#/components/schemas/Legend"
          },
          "selectionRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectionRange"
            }
          },
          "series": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series"
            }
          },
          "verticalGridLines": {
            "$ref": "#/components/schemas/WidgetChartGridLine"
          },
          "horizontalGridLines": {
            "$ref": "#/components/schemas/WidgetChartGridLine"
          }
        }
      },
      "Column": {
        "type": "object",
        "x-tags": [
          "columns"
        ],
        "properties": {
          "autoNumberFormat": {
            "$ref": "#/components/schemas/AutoNumberFormat"
          },
          "contactOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactOption"
            },
            "description": "Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**."
          },
          "description": {
            "type": "string",
            "description": "Column description."
          },
          "format": {
            "type": "string",
            "description": "The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it."
          },
          "formula": {
            "description": "The formula for the column, if set.",
            "type": "string"
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the column is hidden."
          },
          "id": {
            "type": "number",
            "description": "Column Id."
          },
          "index": {
            "type": "number",
            "description": "Column index or position. This number is zero-based."
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin."
          },
          "lockedForUser": {
            "type": "boolean",
            "description": "Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request."
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of the options available for the column."
          },
          "primary": {
            "type": "boolean",
            "description": "Returned only if the column is the Primary Column (value = **true**)."
          },
          "symbol": {
            "type": "string",
            "description": "When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)."
          },
          "systemColumnType": {
            "type": "string",
            "enum": [
              "AUTO_NUMBER",
              "CREATED_BY",
              "CREATED_DATE",
              "MODIFIED_BY",
              "MODIFIED_DATE"
            ],
            "description": "See [System Columns](/api/smartsheet/openapi/columns)."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CALENDAR_END_DATE",
                "CALENDAR_START_DATE",
                "CARD_DONE",
                "GANTT_ALLOCATION",
                "GANTT_ASSIGNED_RESOURCE",
                "GANTT_DISPLAY_LABEL",
                "GANTT_DURATION",
                "GANTT_END_DATE",
                "GANTT_PERCENT_COMPLETE",
                "GANTT_PREDECESSOR",
                "GANTT_START_DATE",
                "BASELINE_START_DATE",
                "BASELINE_END_DATE",
                "BASELINE_VARIANCE"
              ]
            },
            "description": "Set of tags to indicate special columns. Each element in the array is set to one of the listed enum values."
          },
          "title": {
            "type": "string",
            "description": "Column title."
          },
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATETIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ],
            "description": "See [Column Types](/api/smartsheet/openapi/columns)"
          },
          "validation": {
            "type": "boolean",
            "description": "Indicates whether validation has been enabled for the column (value = **true**)."
          },
          "version": {
            "type": "number",
            "enum": [
              0,
              1,
              2
            ],
            "description": "* `0`: CONTACT_LIST, PICKLIST, or TEXT_NUMBER.\n* `1`: MULTI_CONTACT_LIST.\n* `2`: MULTI_PICKLIST.\n"
          },
          "width": {
            "type": "number",
            "description": "Display width of the column in pixels."
          }
        }
      },
      "ColumnObject": {
        "$ref": "#/components/schemas/ColumnObjectAttributes"
      },
      "Comment": {
        "type": "object",
        "x-tags": [
          "comments"
        ],
        "properties": {
          "attachments": {
            "description": "Array of attachments on comments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "createdBy": {
            "description": "User object containing name and email of the creator of this comment.",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "discussionId": {
            "description": "Discussion Id of discussion that contains comment.",
            "type": "number"
          },
          "id": {
            "description": "Comment Id.",
            "type": "number"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "text": {
            "description": "Comment body.",
            "type": "string"
          }
        }
      },
      "Contact": {
        "type": "object",
        "x-tags": [
          "contacts"
        ],
        "properties": {
          "id": {
            "description": "Contact Id.",
            "type": "string",
            "example": "AAAAATYU54QAD7_fNhTnhA"
          },
          "name": {
            "description": "Contact's full name.",
            "type": "string",
            "example": "Jane Doe"
          },
          "email": {
            "description": "Contact's email address.",
            "type": "string",
            "format": "email",
            "example": "jane.doe@smartsheet.com"
          }
        }
      },
      "ContactOption": {
        "type": "object",
        "properties": {
          "email": {
            "description": "A parsable email address.",
            "type": "string"
          },
          "name": {
            "description": "Can be a user's name, display name, or free text.",
            "type": "string"
          }
        }
      },
      "ContainerDestination": {
        "$ref": "#/components/schemas/ContainerDestinationForCopy"
      },
      "ContainerDestinationForMove": {
        "type": "object",
        "title": "Container destination for move",
        "properties": {
          "destinationId": {
            "description": "The ID of the destination container.\n",
            "type": "number"
          },
          "destinationType": {
            "description": "Type of destination container.\n\nThe `\"home\"` enum is **Deprecated** since March 25, 2025, and will be removed.\n",
            "type": "string",
            "nullable": true,
            "enum": [
              "folder",
              "home",
              "workspace"
            ]
          }
        },
        "required": [
          "destinationId"
        ]
      },
      "CopyOrMoveRowDestination": {
        "type": "object",
        "x-tags": [
          "rows"
        ],
        "properties": {
          "sheetId": {
            "description": "The Id of the destination sheet.",
            "type": "number"
          }
        }
      },
      "CopyOrMoveRowDirective": {
        "type": "object",
        "x-tags": [
          "rows"
        ],
        "properties": {
          "rowIds": {
            "description": "The Ids of the rows to move or copy from the source sheet.",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "to": {
            "$ref": "#/components/schemas/CopyOrMoveRowDestination"
          }
        }
      },
      "CopyOrMoveRowResult": {
        "type": "object",
        "x-tags": [
          "rows"
        ],
        "properties": {
          "destinationSheetId": {
            "description": "The Id of the destination sheet.",
            "type": "number"
          },
          "rowMappings": {
            "description": "Array of rowMapping objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowMapping"
            }
          }
        }
      },
      "Criteria": {
        "type": "object",
        "properties": {
          "columnId": {
            "description": "Column Id.",
            "type": "number",
            "example": 293452983475
          },
          "operator": {
            "description": "Operator used to filter column values.",
            "type": "string",
            "enum": [
              "BETWEEN",
              "CONTAINS",
              "EQUAL",
              "FUTURE",
              "GREATER_THAN",
              "HAS_ATTACHMENTS",
              "HAS_COMMENTS",
              "IS_BLANK",
              "IS_CHECKED",
              "IS_DATE",
              "IS_LOCKED",
              "IS_NUMBER",
              "IS_NOT_BLANK",
              "IS_NOT_CHECKED",
              "IS_NOT_DATE",
              "IS_NOT_NUMBER",
              "IS_ONE_OF",
              "LAST_N_DAYS",
              "LESS_THAN",
              "NEXT_N_DAYS",
              "NO_ATTACHMENTS",
              "NO_COMMENTS",
              "NOT_EQUAL",
              "NOT_LOCKED",
              "NOT_ON_CRITICAL_PATH",
              "ON_CRITICAL_PATH",
              "PAST",
              "TODAY"
            ],
            "example": "IS_ONE_OF"
          },
          "values": {
            "description": "Present if a custom filter criteria's operator has one or more arguments.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Complete",
              "In progress"
            ]
          }
        }
      },
      "CrossSheetReference": {
        "type": "object",
        "x-tags": [
          "crossSheetReferences"
        ],
        "properties": {
          "endColumnId": {
            "description": "Defines ending edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters.",
            "type": "number"
          },
          "endRowId": {
            "description": "Defines ending edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters.",
            "type": "number"
          },
          "id": {
            "description": "Cross-sheet reference Id, guaranteed unique within referencing sheet.",
            "type": "number"
          },
          "name": {
            "description": "Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References.",
            "type": "string"
          },
          "startColumnId": {
            "description": "Defines beginning edge of range when specifying one or more columns. To specify an entire column, omit the startRowId and endRowId parameters.",
            "type": "number"
          },
          "startRowId": {
            "description": "Defines beginning edge of range when specifying one or more rows. To specify an entire row, omit the startColumnId and endColumnId parameters.",
            "type": "number"
          },
          "status": {
            "description": "Status of request:\n * 'BLOCKED' - A reference is downstream of a circular issue.\n * 'BROKEN' - The data source location (column, row or sheet) was deleted.\n * 'CIRCULAR' - The formula reference is self referencing and cannot be resolved.\n * 'DISABLED' - Updating the reference is temporarily disabled due to maintenance.\n * 'INVALID/UNKNOWN' - The reference is new and had not been validated.\n * 'NOT_SHARED' - No common shared users.\n * 'OK' - The reference is in a good state.\n",
            "type": "string",
            "enum": [
              "BLOCKED",
              "BROKEN",
              "CIRCULAR",
              "DISABLED",
              "INVALID/UNKNOWN",
              "NOT-SHARED",
              "OK"
            ]
          },
          "sourceSheetId": {
            "description": "Sheet Id of source sheet.",
            "type": "number"
          }
        }
      },
      "Currency": {
        "type": "object",
        "properties": {
          "code": {
            "description": "The ISO 4217 currency code.",
            "example": "EUR",
            "type": "string"
          },
          "symbol": {
            "description": "The currency symbol.",
            "type": "string",
            "example": "€"
          }
        }
      },
      "Discussion": {
        "type": "object",
        "x-tags": [
          "discussions"
        ],
        "properties": {
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "id": {
            "description": "Discussion Id.",
            "type": "number"
          },
          "comments": {
            "description": "Array of comments in discussion. Only returned if the include query string parameter contains comments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "commentAttachments": {
            "description": "Array of attachments on discussion comments. Only returned if the include query string parameter contains attachments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "commentCount": {
            "description": "Number of comments in the discussion.",
            "type": "number"
          },
          "createdBy": {
            "description": "`User` object containing `name` and `email` of the user who created the discussion.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "lastCommentedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "lastCommentedUser": {
            "description": "`User` object containing `name` and `email` of the user who last commented on the discussion.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "parentId": {
            "description": "The Id of the associated row or sheet.",
            "type": "number"
          },
          "parentType": {
            "description": "Type of parent object.",
            "type": "string",
            "enum": [
              "ROW",
              "SHEET"
            ]
          },
          "readOnly": {
            "description": "Indicates whether the user can modify the discussion.",
            "type": "boolean"
          },
          "title": {
            "description": "Title automatically created by duplicating the first 100 characters of top-level comment.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Duration": {
        "description": "In a project sheet, represents a value in a duration cell, or a lag value of a predecessor.",
        "type": "object",
        "properties": {
          "days": {
            "description": "The number of days for this duration.",
            "type": "number"
          },
          "elapsed": {
            "description": "If true, indicates this duration represents elapsed time, which ignores non-working time.",
            "type": "boolean"
          },
          "hours": {
            "description": "The number of hours for this duration.",
            "type": "number"
          },
          "milliseconds": {
            "description": "The number of milliseconds for this duration.",
            "type": "number"
          },
          "minutes": {
            "description": "The number of minutes for this duration.",
            "type": "number"
          },
          "negative": {
            "description": "When used as a predecessor's lag value, indicates whether the lag is negative (if true), or positive (false). The individual duration values themselves (for example, days, hours, or minutes) is always positive.",
            "type": "boolean"
          },
          "objectType": {
            "type": "string",
            "enum": [
              "DURATION"
            ]
          },
          "seconds": {
            "description": "The number of seconds for this duration.",
            "type": "number"
          },
          "weeks": {
            "description": "The number of weeks for this duration.",
            "type": "number"
          }
        }
      },
      "Email": {
        "type": "object",
        "properties": {
          "ccMe": {
            "description": "Indicates whether to send a copy of the email to the sender.",
            "type": "boolean"
          },
          "message": {
            "description": "The message of the email.",
            "type": "string"
          },
          "sendTo": {
            "description": "Array of recipients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recipient"
            }
          },
          "subject": {
            "description": "The subject of the email.",
            "type": "string"
          }
        }
      },
      "Error": {
        "description": "The error caused by the failed item.",
        "type": "object",
        "properties": {
          "refId": {
            "description": "The Id of the specific error occurrence. Please include this information when contacting Smartsheet support.",
            "type": "string"
          },
          "errorCode": {
            "description": "Custom error code from Smartsheet. See the complete [Error Code List](/api/smartsheet/error-codes).",
            "type": "number"
          },
          "message": {
            "description": "Descriptive error message.",
            "type": "string"
          }
        }
      },
      "Event": {
        "description": "An Event object for event reporting.",
        "type": "object",
        "x-tags": [
          "events"
        ],
        "properties": {
          "eventId": {
            "description": "Unique event identifier.",
            "type": "string",
            "example": "2.1.iI9WIpaEAhjz-0hV0eGw2lOEoKDqoRUP00NJv2RvAyKoOvyws63zsfpTBqda5tb33ylcz2JdGVC9Rfa2FRJKQg"
          },
          "objectType": {
            "description": "The Smartsheet resource impacted by the event, such as, SHEET or WORKSPACE.",
            "type": "string",
            "enum": [
              "ACCESS_TOKEN",
              "ACCOUNT",
              "ATTACHMENT",
              "DASHBOARD",
              "DISCUSSION",
              "FOLDER",
              "FORM",
              "GROUP",
              "REPORT",
              "SHEET",
              "UPDATE_REQUEST",
              "USER",
              "WORKSPACE"
            ],
            "example": "SHEET"
          },
          "action": {
            "description": "The action applied to the specified object, such as CREATE or DELETE.",
            "type": "string",
            "example": "UPDATE"
          },
          "objectId": {
            "description": "The identifier of the object impacted by the event.",
            "type": "string",
            "example": "345678901234"
          },
          "eventTimestamp": {
            "description": "Date and time of the event. Defaults to ISO-8601 format. See dates and times for more information.",
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "description": "User assumed as the one who initiated the event. Usually the userId property and the requestUserId property (below) have the same value. However, if the request is an API call with Assume-User header then the userId property identifies the user whose email matches the value in the Assume-User header.",
            "type": "number",
            "example": 123457654321
          },
          "requestUserId": {
            "description": "User whose authentication credential is embedded in the request that initiated the event. For example, if the request is an API call with an access token then requestUserId identifies the user whose data can be accessed via the access token (i.e., the user who authorized the creation of the access token). On the other hand, if the request comes from a UI session, then requestUserId identifies the user logged-in to the UI.",
            "type": "number",
            "example": 133445566778
          },
          "accessTokenName": {
            "description": "Name of the access token embedded in the request. This property is omitted if there's no access token in the request (i.e., it isn't an API call) or if the access token wasn't given a name when created (only access tokens generated via the Smartsheet desktop UI can be given a name at creation time).",
            "type": "string",
            "nullable": false
          },
          "source": {
            "description": "Identifies the client or user agent used to initiate the action.",
            "type": "string",
            "enum": [
              "WEB_APP",
              "MOBILE_IOS",
              "MOBILE_ANDROID",
              "API_UNDEFINED_APP",
              "API_INTEGRATED_APP",
              "API_ODBC_DRIVER"
            ],
            "example": "WEB_APP"
          },
          "additionalDetails": {
            "description": "Container object for additional event-specific properties. Properties depend upon the event type, but all events include an `emailaddress` property, representing the user responsible for the activity. See <a href=\"https://smartsheet-platform.github.io/event-reporting-docs/\" target=\"_blank\" rel=\"noopener noreferrer\">Event Reporting</a> reference documentation for details on each event type.",
            "type": "object",
            "properties": {
              "emailAddress": {
                "description": "Email address of the user responsible for the activity.",
                "type": "string",
                "example": "jane.doe@smartsheet.com"
              }
            },
            "additionalProperties": true,
            "required": [
              "emailAddress"
            ]
          }
        }
      },
      "Favorite": {
        "type": "object",
        "x-tags": [
          "favorites"
        ],
        "properties": {
          "objectId": {
            "description": "The Id of the favorited item. If type is template, only private sheet-type template Id is allowed.",
            "type": "number"
          },
          "type": {
            "type": "string",
            "enum": [
              "folder",
              "report",
              "sheet",
              "sight",
              "template",
              "workspace"
            ]
          }
        }
      },
      "FilteredEventsRequest": {
        "type": "object",
        "properties": {
          "sheetIds": {
            "description": "Array of sheet Ids used to filter events. Only events related to the specified sheet Ids are returned.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "workspaceIds": {
            "description": "Array of workspace Ids used to filter events. Only events related to the specified workspace Ids are returned.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "since": {
            "description": "The earliest time from which events are included in the response. Events before this time are excluded. This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).\n\nYou must pass in a value for either `since` or `streamPosition` and never both.",
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "description": "The latest time up to which events are included in the response. Events after this time are excluded. The `to` field requires using the `since` body field (above). This field is intended for use when backfilling data at client startup or recovery--don't use it for fine-grained date-based queries. Therefore, resolution is limited to the nearest hour. The value is interpreted as ISO-8601 format, unless `numericDates` is specified (see details about `numericDates` below).\n\nIf `to` is a future time, the current time is used. If `to` equals the `since` time, an empty data value is returned. If `to` is before the `since` time, an error is returned.",
            "type": "string",
            "format": "date-time"
          },
          "streamPosition": {
            "description": "Indicates next set of events to return. Use value of `nextStreamPosition` returned from the previous call.\nYou must pass in a value for either `since` or `streamPosition` and never both.",
            "type": "string",
            "example": "XyzAb1234cdefghijklmnofpq"
          },
          "maxCount": {
            "description": "Maximum number of events to return as response to this call.\nMust be between 1 through 10,000 (inclusive).\nDefaults to 1,000 if not specified.",
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "default": 1000
          },
          "numericDates": {
            "description": "If true, dates are accepted and returned in Unix epoch time (milliseconds since midnight on January 1, 1970 in UTC time).\nDefault is false, which means ISO-8601 format.",
            "type": "boolean",
            "default": false
          },
          "managedPlanId": {
            "description": "The target managed plan for which to list events. Authorized if the caller is a licensed user on either the target managed plan or the main plan in EPM hierarchy.",
            "type": "number"
          }
        }
      },
      "Filters": {
        "description": "Smartsheet users can define and save personal column filters on sheets they can view.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Filters Id.",
            "type": "number",
            "example": 52739485234
          },
          "excludeSelected": {
            "description": "If true, rows containing cells matching the values or criteria items are excluded instead of included.",
            "type": "boolean",
            "example": false
          },
          "filterType": {
            "type": "string",
            "enum": [
              "PERSONAL",
              "SHARED"
            ],
            "example": "PERSONAL"
          },
          "query": {
            "$ref": "#/components/schemas/Query"
          }
        }
      },
      "Folder": {
        "description": "Can contain dashboards, folders, reports, sheets, or templates.",
        "type": "object",
        "x-tags": [
          "folders"
        ],
        "properties": {
          "id": {
            "description": "Folder Id.",
            "type": "number"
          },
          "favorite": {
            "deprecated": true,
            "description": "**Deprecated** Returned only if the user has marked the folder as a favorite in their \"Home\" tab (value = true).",
            "type": "boolean"
          },
          "folders": {
            "description": "Folders contained in folder.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            }
          },
          "name": {
            "description": "Folder name.",
            "type": "string"
          },
          "permalink": {
            "description": "URL that represents a direct link to the folder in Smartsheet.",
            "type": "string"
          },
          "reports": {
            "description": "Reports contained in folder.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridListing"
            }
          },
          "sheets": {
            "description": "Sheets contained in folder.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridListing"
            }
          },
          "sights": {
            "description": "Dashboards contained in folder.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardListing"
            }
          },
          "templates": {
            "description": "Templates contained in folder.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridListing"
            }
          }
        }
      },
      "FontFamily": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the font family.",
            "example": "Arial",
            "type": "string"
          },
          "traits": {
            "description": "Platform-independent traits of the font family. Contains one of the listed enum values.",
            "example": [
              "sans-serif"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "sans-serif",
                "serif"
              ]
            }
          }
        }
      },
      "FormatDetails": {
        "type": "object",
        "properties": {
          "paperSize": {
            "description": "Specifies paper size.",
            "type": "string",
            "example": "LETTER",
            "enum": [
              "A0",
              "A1",
              "A2",
              "A3",
              "A4",
              "ARCHID",
              "LEGAL",
              "LETTER",
              "WIDE"
            ]
          }
        }
      },
      "FormatTables": {
        "description": "Contains all of the lookup tables that the format descriptor indexes refer to. Here the examples show the formatting options, the default value is used to denote each option. NOTE -- Indexes and their values are guaranteed never to change or be removed for a given major API version.  However, new values could potentially be added to the ends of lookup tables. Because of this possibility, your code should handle the case where a cell might contain a format index value greater than the size of a lookup table your app has loaded. Your application should check for that case and reload the format tables if necessary.",
        "type": "object",
        "properties": {
          "defaults": {
            "description": "A format descriptor where each element describes the formats the Smartsheet Web app displays for format values that have not been set. Each value refers to an index of the following options.",
            "type": "string",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "bold": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "on"
            ]
          },
          "color": {
            "description": "The default setting is \"none\". Typically this is black text and a white background.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "transparent",
              "#000000",
              "#0B347D",
              "#1061C3",
              "#237F2E",
              "#40B14B",
              "#592C00",
              "#5FB3F9",
              "#61058B",
              "#757575",
              "#7ED085",
              "#9210AD",
              "#974C00",
              "#991310",
              "#B9DDFC",
              "#BDBDBD",
              "#C6E7C8",
              "#D0AF8F",
              "#D190DA",
              "#E2F2FE",
              "#E5E5E5",
              "#E7F5E9",
              "#EA352E",
              "#EA5000",
              "#EBC700",
              "#EBC7EF",
              "#EEDCCA",
              "#F2E8DE",
              "#F4E4F5",
              "#F87E7D",
              "#FEFF00",
              "#FEFF85",
              "#FF8D00",
              "#FFCCD2",
              "#FFCD7A",
              "#FFE1AF",
              "#FFEBEE",
              "#FFED00",
              "#FFF3DF",
              "#FFFEE6",
              "#FFFFFF"
            ]
          },
          "currency": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            },
            "example": [
              {
                "code": "none",
                "symbol": "none"
              },
              {
                "code": "ARS",
                "symbol": "$"
              },
              {
                "code": "AUD",
                "symbol": "$"
              },
              {
                "code": "BRL",
                "symbol": "R$"
              },
              {
                "code": "CAD",
                "symbol": "$"
              },
              {
                "code": "CHF",
                "symbol": "CHF"
              },
              {
                "code": "CLP",
                "symbol": "$"
              },
              {
                "code": "CNY",
                "symbol": "¥"
              },
              {
                "code": "DKK",
                "symbol": "kr."
              },
              {
                "code": "EUR",
                "symbol": "€"
              },
              {
                "code": "GBP",
                "symbol": "£"
              },
              {
                "code": "HKD",
                "symbol": "$"
              },
              {
                "code": "ILS",
                "symbol": "₪"
              },
              {
                "code": "INR",
                "symbol": "₹"
              },
              {
                "code": "JPY",
                "symbol": "¥"
              },
              {
                "code": "KRW",
                "symbol": "₩"
              },
              {
                "code": "MXN",
                "symbol": "$"
              },
              {
                "code": "NOK",
                "symbol": "kr"
              },
              {
                "code": "NZD",
                "symbol": "$"
              },
              {
                "code": "RUB",
                "symbol": "₽"
              },
              {
                "code": "SEK",
                "symbol": "kr"
              },
              {
                "code": "SGD",
                "symbol": "$"
              },
              {
                "code": "USD",
                "symbol": "$"
              },
              {
                "code": "ZAR",
                "symbol": "R"
              }
            ]
          },
          "dateFormat": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "LOCALE_BASED",
              "MMMM_D_YYYY",
              "MMM_D_YYYY",
              "D_MMM_YYYY",
              "YYYY_MM_DD_HYPHEN",
              "YYYY_MM_DD_DOT",
              "DWWWW_MMMM_D_YYYY",
              "DWWW_DD_MMM_YYYY",
              "DWWW_MM_DD_YYYY",
              "MMMM_D",
              "D_MMMM"
            ]
          },
          "decimalCount": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5"
            ]
          },
          "fontFamily": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FontFamily"
            },
            "example": [
              {
                "name": "Arial",
                "traits": [
                  "sans-serif"
                ]
              },
              {
                "name": "Roboto",
                "traits": [
                  "sans-serif"
                ]
              },
              {
                "name": "Tahoma",
                "traits": [
                  "sans-serif"
                ]
              },
              {
                "name": "Times New Roman",
                "traits": [
                  "serif"
                ]
              },
              {
                "name": "Verdana",
                "traits": [
                  "sans-serif"
                ]
              }
            ]
          },
          "fontSize": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "8",
              "9",
              "10",
              "12",
              "14",
              "16",
              "18",
              "20",
              "24",
              "28",
              "32",
              "36"
            ]
          },
          "horizontalAlign": {
            "description": "The default setting is \"default\" which is equivalent to \"left\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default",
              "left",
              "center",
              "right"
            ]
          },
          "italic": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "on"
            ]
          },
          "numberFormat": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "NUMBER",
              "CURRENCY",
              "PERCENT"
            ]
          },
          "strikethrough": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "on"
            ]
          },
          "textWrap": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "on"
            ]
          },
          "thousandsSeparator": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "on"
            ]
          },
          "underline": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "none",
              "on"
            ]
          },
          "verticalAlign": {
            "description": "The default setting is \"default\" which is equivalent to \"top\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default",
              "top",
              "middle",
              "bottom"
            ]
          }
        }
      },
      "Group": {
        "type": "object",
        "x-tags": [
          "groups"
        ],
        "properties": {
          "id": {
            "description": "Group Id.",
            "type": "number",
            "example": 4583173393803140
          },
          "name": {
            "description": "Group name.",
            "type": "string",
            "example": "Group 1"
          },
          "description": {
            "description": "Group description.",
            "type": "string",
            "example": "My group"
          },
          "owner": {
            "description": "Group owner’s email address.",
            "type": "string",
            "format": "email",
            "example": "john.doe@smartsheet.com"
          },
          "ownerId": {
            "description": "Group owner's user Id.",
            "type": "number",
            "example": 2331373580117892
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "GroupMember": {
        "type": "object",
        "x-tags": [
          "groupMembers"
        ],
        "properties": {
          "id": {
            "description": "Group member's user Id.",
            "type": "number",
            "example": 2331373580117892
          },
          "email": {
            "description": "Group member's email address.",
            "type": "string",
            "format": "email",
            "example": "john.doe@smartsheet.com"
          },
          "firstName": {
            "description": "Group member's first name.",
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "description": "Group member's last name.",
            "type": "string",
            "example": "Doe"
          },
          "name": {
            "description": "Group member's full name.",
            "type": "string",
            "example": "John Doe"
          }
        }
      },
      "Home": {
        "description": "All objects a user has access to, including dashboards, folders, reports, sheets, and templates.",
        "type": "object",
        "properties": {
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            }
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "sheets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sheet"
            }
          },
          "sights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sight"
            }
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template"
            }
          }
        }
      },
      "Hyperlink": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "number",
            "description": "If non-null, this hyperlink is a link to the report with this Id."
          },
          "sheetId": {
            "type": "number",
            "description": "If non-null, this hyperlink is a link to the sheet with this Id."
          },
          "sightId": {
            "type": "number",
            "description": "If non-null, this hyperlink is a link to the dashboard with this Id."
          },
          "url": {
            "type": "string",
            "description": "When the hyperlink is a URL link, this property contains the URL value. When the hyperlink is a dashboard/report/sheet link (that is, dashboardId, reportId, or sheetId is non-null), this property contains the permalink to the dashboard, report, or sheet."
          }
        }
      },
      "Image": {
        "type": "object",
        "x-tags": [
          "cellImages"
        ],
        "properties": {
          "altText": {
            "type": "string",
            "description": "Alternate text for the image."
          },
          "height": {
            "type": "number",
            "description": "Original height (in pixels) of the uploaded image."
          },
          "id": {
            "type": "string",
            "description": "Image Id."
          },
          "width": {
            "type": "number",
            "description": "Original width (in pixels) of the uploaded image."
          }
        }
      },
      "ImageUrl": {
        "type": "object",
        "x-tags": [
          "cellImages"
        ],
        "properties": {
          "imageId": {
            "description": "Image Id.",
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          },
          "height": {
            "description": "Image height in pixels.",
            "type": "number"
          },
          "url": {
            "description": "Temporary URL that can be used to retrieve the image. This attribute can be present in a response but is never specified in a request.",
            "type": "string"
          },
          "width": {
            "description": "Image width in pixels.",
            "type": "number"
          }
        }
      },
      "ImageUrlMap": {
        "type": "object",
        "x-tags": [
          "cellImages"
        ],
        "properties": {
          "imageUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageUrl"
            }
          },
          "urlExpiresInMillis": {
            "description": "Milliseconds before the URLs within imageUrls expire.",
            "type": "number"
          }
        }
      },
      "ImageWidgetContent": {
        "type": "object",
        "title": "Image Widget Content",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "IMAGE"
            ]
          },
          "privateId": {
            "description": "The image private Id.",
            "type": "string"
          },
          "fileName": {
            "description": "Name of the image file.",
            "type": "string"
          },
          "fit": {
            "description": "Describes how the image occupies the available space of its widget.\n * ACTUAL_SIZE - Uses the original image width and height dimensions.\n * FILL - Scales the image to maintain its aspect ratio while filling its entire widget. If the image aspect \nratio does not match the aspect ratio of its widget, then the image will be clipped to fit.\n * FIT - Scales the image to maintain its aspect ratio while fitting within its widget. The image will be \n\"letterboxed\" if its aspect ratio does not match the aspect ratio of its widget. Default value for new  image widgets and for existing image widgets where this property has not been explicitly set.\n",
            "enum": [
              "ACTUAL_SIZE",
              "FILL",
              "FIT"
            ],
            "type": "string"
          },
          "format": {
            "description": "Format descriptor. Follows the pattern in FormatTables.",
            "type": "string",
            "example": ",7,1,,,,2,2,1,3,,,,,,1,"
          },
          "height": {
            "type": "number"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/WidgetHyperlink"
          },
          "margin": {
            "description": "Indicates whether there is margin between the image and its widget borders.\n * MARGIN - Default value for existing image widgets where this property has not been explicitly set.\n * NO_MARGIN - Default value for new image widgets.\n",
            "enum": [
              "MARGIN",
              "NO_MARGIN"
            ],
            "type": "string"
          },
          "width": {
            "description": "Original width of the image in pixels.",
            "type": "number"
          }
        }
      },
      "IndexResult": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "description": "The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned.",
            "type": "number",
            "example": 1,
            "readOnly": true
          },
          "pageSize": {
            "description": "The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints.",
            "type": "number",
            "example": 50,
            "nullable": true,
            "readOnly": true
          },
          "totalPages": {
            "description": "The total number of pages in the full result set.",
            "type": "number",
            "example": 25,
            "readOnly": true
          },
          "totalCount": {
            "description": "The total number of items in the full result set.",
            "type": "number",
            "example": 136,
            "readOnly": true
          }
        }
      },
      "IndexResultUnknownPages": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "description": "The current page in the full result set that the data array represents. NOTE when a page number greater than totalPages is requested, the last page is instead returned.",
            "type": "number",
            "example": 1,
            "readOnly": true
          },
          "pageSize": {
            "description": "The number of items in a page. Omitted if there is no limit to page size (and hence, all results are included). Unless otherwise specified, this defaults to 100 for most endpoints.",
            "type": "number",
            "example": 50,
            "nullable": true,
            "readOnly": true
          },
          "totalPages": {
            "description": "If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”.",
            "type": "number",
            "example": -1,
            "readOnly": true
          },
          "totalCount": {
            "description": "If the data field value is not empty, returns a static value of -1. When you reach the first empty page after the end of the result set, then all four fields are set with a static value of “0”.",
            "type": "number",
            "example": -1,
            "readOnly": true
          }
        }
      },
      "MiniUser": {
        "description": "MiniUser Object",
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "jane.doe@smartsheet.com"
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "Jane Doe"
          }
        }
      },
      "MultiRowEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RowEmail"
          }
        ],
        "type": "object",
        "x-tags": [
          "sendViaEmail"
        ],
        "properties": {
          "rowIds": {
            "description": "The Ids of rows to be included.",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "ObjectValue": {
        "description": "The base object for values found in the **Cell.objectValue** attribute. Its **objectType** attribute indicates the type of the object. This object itself is not used directly.",
        "required": [
          "objectType"
        ],
        "x-tags": [
          "cells"
        ],
        "properties": {
          "objectType": {
            "type": "string"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AbstractDatetimeObjectValue"
          },
          {
            "$ref": "#/components/schemas/CheckboxObjectValue"
          },
          {
            "$ref": "#/components/schemas/ContactObjectValue"
          },
          {
            "$ref": "#/components/schemas/DateObjectValue"
          },
          {
            "$ref": "#/components/schemas/DatetimeObjectValue"
          },
          {
            "$ref": "#/components/schemas/DurationObjectValue"
          },
          {
            "$ref": "#/components/schemas/MultiContactObjectValue"
          },
          {
            "$ref": "#/components/schemas/MultiPicklistObjectValue"
          },
          {
            "$ref": "#/components/schemas/PredecessorList"
          }
        ]
      },
      "Predecessor": {
        "type": "object",
        "properties": {
          "rowId": {
            "description": "The Id of the predecessor row.",
            "type": "number"
          },
          "type": {
            "description": "Type of the predecessor:\n * FF (Finish-to-Finish) - finish at the same time the predecessor finishes.\n * FS (Finish-to-Start) - start after the predecessor finishes.\n * SF (Start-to-Finish) - finish before the predecessor starts.\n * SS (Start-to-Start) - start at the same time the predecessor starts.\n",
            "type": "string",
            "enum": [
              "FF",
              "FS",
              "SF",
              "SS"
            ]
          },
          "inCriticalPath": {
            "description": "True if this predecessor is in the critical path.",
            "type": "boolean",
            "readOnly": true
          },
          "invalid": {
            "description": "True if the row referenced by rowId is not a valid row in this sheet, or there is a circular reference (displayed in the Smartsheet app as \"#REF\") Omitted if false.",
            "type": "boolean",
            "readOnly": true
          },
          "lag": {
            "$ref": "#/components/schemas/Duration"
          },
          "rowNumber": {
            "description": "The row number of the predecessor row. Omitted if invalid is true.",
            "type": "number",
            "readOnly": true
          }
        },
        "example": {
          "rowId": 1234567890123456,
          "rowNumber": 2,
          "type": "FS",
          "inCriticalPath": true
        }
      },
      "PredecessorList": {
        "description": "Object containing a list of references to rows on which the current row depends",
        "type": "object",
        "title": "PredecessorListObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "PREDECESSOR_LIST"
            ]
          },
          "predecessors": {
            "description": "List of references to rows on which the current row depends",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Predecessor"
            }
          }
        }
      },
      "ProjectSettings": {
        "description": "Represents the project settings dependencies for a specific sheet. Project settings may be updated on sheets that the user has editor access.",
        "type": "object",
        "properties": {
          "lengthOfDay": {
            "description": "Length of a workday for a project sheet.",
            "type": "number",
            "minimum": 1,
            "maximum": 24
          },
          "nonWorkingDays": {
            "description": "Non-working days for a project sheet.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "date"
            }
          },
          "workingDays": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          }
        }
      },
      "Proof": {
        "description": "Object containing zero or more media items, including images, videos, and documents, for review, editing, or approval.",
        "type": "object",
        "x-tags": [
          "proofs"
        ],
        "properties": {
          "id": {
            "description": "Proof Id of the proof version.",
            "type": "number"
          },
          "originalId": {
            "description": "Proof Id of the original proof version.",
            "type": "number"
          },
          "name": {
            "description": "Proof name. This is the same as primary column value. If the primary column value is empty, name is empty.",
            "type": "string"
          },
          "proofType": {
            "description": "File type for the proof version.",
            "type": "string",
            "enum": [
              "DOCUMENT",
              "IMAGE",
              "MIXED",
              "NONE",
              "VIDEO"
            ]
          },
          "proofRequestUrl": {
            "description": "URL to review a proofing request.",
            "type": "string"
          },
          "version": {
            "description": "The version number of the proof.",
            "type": "number"
          },
          "lastUpdatedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "lastUpdatedBy": {
            "description": "`User` object containing `name` and `email` of the user who last updated the proof.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "isCompleted": {
            "description": "Indicates whether the proof is completed.",
            "type": "boolean"
          },
          "attachments": {
            "description": "Array of Attachment objects. Only returned if the include query string parameter contains attachments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "discussions": {
            "description": "Array of Discussion objects. Only returned if the include query string parameter contains discussions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Discussion"
            }
          }
        }
      },
      "ProofRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProofRequestBody"
          }
        ],
        "type": "object",
        "x-tags": [
          "proofs"
        ],
        "properties": {
          "id": {
            "description": "Proof request Id.",
            "type": "number"
          },
          "proofId": {
            "description": "Proof Id of the original proof.",
            "type": "number"
          },
          "sentBy": {
            "description": "`User` object containing `name` and `email` of the sender.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "sentAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "isDownloadable": {
            "description": "Indicates whether the description is downloadable.",
            "type": "boolean"
          },
          "status": {
            "description": "Proof request status.",
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "PROOF_DELETED"
            ]
          }
        }
      },
      "ProofRequestAction": {
        "type": "object",
        "x-tags": [
          "proofs"
        ],
        "properties": {
          "user": {
            "description": "`User` object containing `name` and `email` of the user performing the action.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "actionStatus": {
            "description": "Proof request action status.",
            "type": "string",
            "enum": [
              "APPROVED",
              "PENDING",
              "REJECTED"
            ]
          }
        }
      },
      "ProofRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          }
        ],
        "type": "object",
        "properties": {
          "isDownloadable": {
            "description": "Whether the description is downloadable.",
            "type": "boolean"
          }
        }
      },
      "Query": {
        "properties": {
          "operator": {
            "type": "string",
            "enum": [
              "AND",
              "OR"
            ]
          },
          "criteria": {
            "description": "Criteria objects specifying custom criteria against which to match cell values.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Criteria"
            }
          },
          "includeParent": {
            "description": "If true, indicates that \"show parent rows\" is enabled for the filters.",
            "type": "boolean"
          }
        },
        "example": {
          "operator": "OR",
          "criteria": [
            {
              "operator": "IS_ONE_OF",
              "values": [
                "Complete",
                "In Progress"
              ],
              "columnId": 52793485233
            }
          ],
          "includeParent": false
        }
      },
      "Recipient": {
        "description": "Specifies the recipient of an email. The recipient may be either an individual or a group. To specify an individual, set the email attribute; to specify a group, set the groupId attribute. Either email and groupId may be set, but not both.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Recipient_Individual"
          },
          {
            "$ref": "#/components/schemas/Recipient_Group"
          }
        ]
      },
      "Report": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Sheet"
          }
        ],
        "type": "object",
        "x-tags": [
          "reports"
        ],
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "sourceSheets": {
            "type": "array",
            "description": "An array of Sheet objects (without rows), representing the sheets that rows in the report originated from. Only included in the Get Report response if the include parameter specifies sourceSheets.",
            "items": {
              "$ref": "#/components/schemas/Sheet"
            }
          },
          "isSummaryReport": {
            "type": "boolean",
            "description": "A boolean to represent whether the report is a sheet summary report or not. If this property is false, it is a row report."
          }
        }
      },
      "ReportCell": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          }
        ],
        "type": "object",
        "x-tags": [
          "reports"
        ],
        "properties": {
          "virtualColumnId": {
            "type": "number",
            "description": "This property refers to the cell's parent column in the report, while the columnId property refers to the cell's parent column in its originating source sheet."
          }
        }
      },
      "ReportColumn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Column"
          }
        ],
        "type": "object",
        "x-tags": [
          "reports"
        ],
        "properties": {
          "virtualId": {
            "description": "The virtual Id of this report column.",
            "type": "number"
          },
          "sheetNameColumn": {
            "description": "Returns true only for the special \"Sheet Name\" report column.",
            "type": "boolean"
          }
        }
      },
      "ReportPublish": {
        "type": "object",
        "x-tags": [
          "reports"
        ],
        "properties": {
          "readOnlyFullAccessibleBy": {
            "description": "Indicates who can access the 'Read-Only Full' view of the published report:\n* If **ALL**, it is available to anyone who has the link.\n* If **ORG**, it is available only to members of the report owner's Smartsheet organization account.\n* If **SHARED**, it is available only to users shared to the item.\n\nOnly returned in a response if **readOnlyFullEnabled** = **true**.\n",
            "type": "string"
          },
          "readOnlyFullDefaultView": {
            "description": "Indicates which view the user has set for a read-only, default view of the published report. Must be one of\nthe following values: **CALENDAR**, **CARD**, or **GRID**.\n",
            "type": "string"
          },
          "readOnlyFullEnabled": {
            "description": "(Required) If **true**, a rich version of the report is published with the ability to download row\nattachments and discussions.\n",
            "type": "boolean"
          },
          "readOnlyFullShowToolbar": {
            "deprecated": true,
            "description": "**Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar.\nIf **false**, hides the toolbar.\n",
            "type": "boolean"
          },
          "readOnlyFullUrl": {
            "description": "URL for 'Read-Only Full' view of the published report.\n\nOnly returned in a response if **readOnlyFullEnabled** = **true**.\n",
            "type": "string"
          }
        }
      },
      "ReportRow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Row"
          }
        ],
        "type": "object",
        "x-tags": [
          "reports"
        ],
        "properties": {
          "sheetId": {
            "type": "number",
            "description": "The Id of the sheet from which the row originates."
          }
        }
      },
      "ReportWidgetContent": {
        "type": "object",
        "title": "Report",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "GRIDGANTT"
            ]
          },
          "reportId": {
            "description": "Report Id denoting container source.",
            "type": "number"
          },
          "htmlContent": {
            "description": "HTMl snippet to render report.",
            "type": "string"
          },
          "backgroundColor": {
            "description": "The hex color.",
            "example": "#E6F5FE",
            "type": "string"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/WidgetHyperlink"
          }
        }
      },
      "Result": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemResult"
          }
        ],
        "properties": {
          "version": {
            "description": "New version of the sheet. Applicable only for operations which update sheet data.",
            "type": "number",
            "nullable": true
          }
        }
      },
      "RichTextWidgetContent": {
        "type": "object",
        "title": "Rich Text",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "RICHTEXT"
            ]
          },
          "htmlContent": {
            "description": "The widget contents as HTML. The Rich Text widget supports the following subset of HTML tags and CSS Styles:\n\nHTML\n  * a - hyperlink\n  * br - line break\n  * li - list item\n  * ol - ordered list\n  * p - paragraph\n  * span - section of the document\n  * ul - unordered list\n\nCSS\n  * color\n  * font-family\n  * font-size\n  * font-style\n  * font-weight\n  * text-align\n  * text-decoration\n",
            "type": "string"
          }
        }
      },
      "Row": {
        "type": "object",
        "x-tags": [
          "rows"
        ],
        "properties": {
          "id": {
            "description": "Row Id.",
            "type": "number"
          },
          "sheetId": {
            "description": "Parent sheet Id.",
            "type": "number"
          },
          "siblingId": {
            "description": "Sibling Id.",
            "type": "number"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "attachments": {
            "description": "Attachments on row. Only returned if the include query string parameter contains attachments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "cells": {
            "description": "Cells belonging to the row.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cell"
            }
          },
          "columns": {
            "description": "Columns of row. Only returned if the include query string parameter contains columns.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "conditionalFormat": {
            "description": "Describes this row's conditional format. Only returned if the include query string parameter contains format and this row has a conditional format applied.",
            "type": "string",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "createdBy": {
            "description": "User object containing name and email of the creator of this row.",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "discussions": {
            "description": "Discussions on the row. Only returned if the include query string parameter contains discussions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Discussion"
            }
          },
          "proof": {
            "$ref": "#/components/schemas/Proof"
          },
          "expanded": {
            "description": "Indicates whether the row is expanded or collapsed.",
            "type": "boolean"
          },
          "filteredOut": {
            "description": "Indicates if the row is filtered out by a column filter. Only returned if the include query string parameter contains filters.",
            "type": "boolean"
          },
          "format": {
            "description": "Format descriptor. Only returned if the include query string parameter contains format and this row has a non-default format applied.",
            "type": "string",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "inCriticalPath": {
            "description": "Only returned, with a value of true, if the sheet is a project sheet with dependencies enabled and this row is in the critical path.",
            "type": "boolean"
          },
          "locked": {
            "description": "Indicates whether the row is locked.",
            "type": "boolean"
          },
          "lockedForUser": {
            "description": "Indicates whether the row is locked for the requesting user.",
            "type": "boolean"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedBy": {
            "description": "User object containing name and email of the last person to modify this row.",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "permaLink": {
            "description": "URL that represents a direct link to the row in Smartsheet. Only returned if the include query string parameter contains rowPermalink.",
            "type": "string"
          },
          "rowNumber": {
            "description": "Row number within the sheet.",
            "type": "number",
            "minimum": 1
          },
          "version": {
            "description": "Sheet version number that is incremented every time a sheet is modified.",
            "type": "number"
          }
        }
      },
      "RowEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          }
        ],
        "type": "object",
        "x-tags": [
          "sendViaEmail"
        ],
        "properties": {
          "columnIds": {
            "description": "The Id of the columns to be included.",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "includeAttachments": {
            "description": "Indicates whether to include attachments in the email.",
            "type": "boolean"
          },
          "includeDiscussions": {
            "description": "Indicates whether to include discussions in the email.",
            "type": "boolean"
          },
          "layout": {
            "description": "One of the following values: **HORIZONTAL** or **VERTICAL**. Optional, defaults to **HORIZONTAL** when multiple rows are being sent and to **VERTICAL** when a single row is being sent. **HORIZONTAL** formats the rows being sent as a grid, whereas **VERTICAL** formats the rows being sent as separate cards.\n",
            "type": "boolean"
          }
        }
      },
      "RowMapping": {
        "type": "object",
        "x-tags": [
          "rows"
        ],
        "properties": {
          "from": {
            "description": "Row Id in the source sheet.",
            "type": "number"
          },
          "to": {
            "description": "Row Id in the destination sheet.",
            "type": "number"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of schedule.",
            "type": "string",
            "enum": [
              "ONCE",
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY"
            ]
          },
          "dayDescriptors": {
            "description": "A string array consists of one or more of the following values:\n* **DAY**, **WEEKDAY**, **WEEKEND**\n* **SUNDAY**, **MONDAY**, **TUESDAY**, **WEDNESDAY**, **THURSDAY**, **FRIDAY**, **SATURDAY**\n\nThe subset of values applicable to the schedule type are as followed:\n\n| Value         | Daily schedule | Weekly schedule | Monthly schedule |\n|---------------|----------------|-----------------|------------------|\n| **DAY**       |                |                 |       **✓**      |\n| **WEEKDAY**   |      **✓**     |                 |       **✓**      |\n| **WEEKEND**   |                |                 |       **✓**      |\n| **SUNDAY**    |                |      **✓**      |       **✓**      |\n| **MONDAY**    |                |      **✓**      |       **✓**      |\n| **TUESDAY**   |                |      **✓**      |       **✓**      |\n| **WEDNESDAY** |                |      **✓**      |       **✓**      |\n| **THURSDAY**  |                |      **✓**      |       **✓**      |\n| **FRIDAY**    |                |      **✓**      |       **✓**      |\n| **SATURDAY**  |                |      **✓**      |       **✓**      |\n\nFor more details, refer to the Table of Schedule Object’s Attributes below.\n",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DAY",
                "WEEKDAY",
                "WEEKEND",
                "SUNDAY",
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY"
              ]
            }
          },
          "dayOfMonth": {
            "description": "The day within the month.\n\nValid range is 1 to 28.\n\nThis attribute is applicable to the following schedule type:\n * **MONTHLY**\n\nFor more details, refer to the Table of Schedule Object’s Attributes below.\n",
            "type": "number",
            "minimum": 1,
            "maximum": 31
          },
          "dayOrdinal": {
            "description": "Must be one of the following values:\n  * **FIRST** or **LAST**\n  * **SECOND**, **THIRD**, or **FOURTH**\n\nThis attribute is applicable to the following schedule type:\n  * **MONTHLY**\n\n  For more details, refer to the Table of Schedule Object’s Attributes below.\n",
            "type": "string",
            "enum": [
              "FIRST",
              "LAST",
              "SECOND",
              "THIRD",
              "FOURTH"
            ]
          },
          "repeatEvery": {
            "description": "Frequency on which the request is delivered. The unit is a function of the **type** attribute. For example,\nfor **MONTHLY** schedule, **repeatEvery=1** means every month.\n\nValid range is 1 to 99.\n\nThis attribute is applicable to the following schedule types: **DAILY**, **WEEKLY**, **MONTHLY**, or **YEARLY**.\nFor more details, refer to the Table of Schedule Object’s Attributes below.\n",
            "type": "number",
            "minimum": 1,
            "maximum": 99
          },
          "endAt": {
            "allOf": [
              {
                "description": "The date, time, and time zone at which the delivery schedule ends.\n\nThe value is either in a string format or a numeric format:\n\n* When the value is a string, it must be a valid ISO-8601 date and time with an offset (YYYY-MM-DDThh:mm:ssTZD).\n* When the value is a number, it represents a date and time with no offset (UTC time zone). See Dates and Times for more information.\n\nThe value must be later than startAt and the current date and time.\n\nThe value must contain zero hours, zero minutes, and zero seconds.\n\nThe offset (time zone) value must be the same as the offset (time zone) value in startAt.\n\nThis attribute is applicable to the following schedule types: DAILY, WEEKLY, MONTHLY, YEARLY. For more details, refer to the Table of Schedule Object’s Attributes below.\n"
              },
              {
                "$ref": "#/components/schemas/Timestamp_Writeable"
              }
            ]
          },
          "lastSentAt": {
            "allOf": [
              {
                "description": "The date and time for when the last request was sent."
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "nextSendAt": {
            "allOf": [
              {
                "description": "The date and time for when the next request is scheduled to send."
              },
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "startAt": {
            "allOf": [
              {
                "description": "The date, time, and time zone at which the first delivery starts.\n\nThe value is either in a string format or a numeric format:\n\n *   When the value is a string, it must be a valid ISO-8601 date and time with an offset (YYYY-MM-DDThh:mm:ssTZD).\n *   When the value is a number, it represents a date and time with no offset (UTC time zone). See [Dates and times](/api/smartsheet/guides/basics/dates-and-times) for more information.\n\nFor ONCE schedule type, it must be later than the current date time.\n\nFor all other schedule types, it must be later than “2000-01-01T00:00:00Z” in string format or 946684800000 in numeric format.\n\nThe value must contain zero minutes and zero seconds.\n\nThis attribute is applicable to all schedule types.\n\nFor more details, refer to the Table of Schedule Object’s Attributes below.\n"
              },
              {
                "$ref": "#/components/schemas/Timestamp_Writeable"
              }
            ]
          }
        }
      },
      "Scope": {
        "type": "object",
        "properties": {
          "sheets": {
            "description": "Array of Sheet objects (containing just the sheet Id) of any sheets that the requester has access to that make up the report.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sheet"
            }
          },
          "workspaces": {
            "description": "Array of Workspace objects (containing just the workspace Id) that the requester has access to that make up the report.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkspaceListing"
            }
          }
        }
      },
      "SearchResult": {
        "x-tags": [
          "search"
        ],
        "properties": {
          "results": {
            "description": "Array of SearchResultItem objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultItem"
            }
          },
          "totalCount": {
            "description": "Total number of search results.",
            "type": "number"
          }
        }
      },
      "SearchResultItem": {
        "type": "object",
        "x-tags": [
          "search"
        ],
        "properties": {
          "objectId": {
            "description": "Search result object Id.",
            "type": "number"
          },
          "parentObjectId": {
            "description": "Search result parent object Id.",
            "type": "number"
          },
          "contextData": {
            "description": "Additional info about the search result item. If the item has a discussion or attachment belonging to a proof, the context data includes the URL of that proof (e.g., \"proofUrl: https://app.smartsheet.com/b/proofs/sheets/abc123/proofs/def456\").",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "objectType": {
            "description": "Search result object type (attachment, dashboard, discussion, folder, report, row, sheet, summaryField, template, or workspace).",
            "type": "string"
          },
          "parentObjectName": {
            "description": "Search result parent object name.",
            "type": "string"
          },
          "parentObjectType": {
            "description": "Search result parent object type (dashboard, folder, report, sheet, template, or workspace).",
            "type": "string"
          },
          "text": {
            "description": "Search result text excerpt.",
            "type": "string"
          }
        }
      },
      "SelectionRange": {
        "description": "Defines a block of cells in a sheet.",
        "type": "object",
        "properties": {
          "sourceColumnId1": {
            "description": "Defines beginning edge of range when specifying one or more columns.",
            "type": "number"
          },
          "sourceColumnId2": {
            "description": "Defines ending edge of range when specifying one or more columns.",
            "type": "number"
          },
          "sourceRowId1": {
            "description": "Defines beginning edge of range when specifying one or more rows.",
            "type": "number"
          },
          "sourceRowId2": {
            "description": "Defines ending edge of range when specifying one or more rows.",
            "type": "number"
          }
        }
      },
      "SentUpdateRequest": {
        "type": "object",
        "x-tags": [
          "updateRequests"
        ],
        "properties": {
          "id": {
            "description": "The Id of the sent update request.",
            "type": "number"
          },
          "columnIds": {
            "description": "The Ids of columns included in the request.",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "rowIds": {
            "description": "The Ids of rows where an update is requested.",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "updateRequestId": {
            "description": "The Id of the originating update request.",
            "type": "number"
          },
          "includeAttachments": {
            "description": "Indicates whether the attachments were included in the email.",
            "type": "boolean"
          },
          "includeDiscussions": {
            "description": "Indicates whether the discussions were included in the email.",
            "type": "boolean"
          },
          "message": {
            "description": "The message of the email. Max 10000 characters.",
            "type": "string"
          },
          "sentAt": {
            "description": "The date and time for when the sent update request was sent to the recipient.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              }
            ]
          },
          "sentBy": {
            "description": "`User` object containing `name` and `email` of the sender.\n",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "sentTo": {
            "description": "Recipient object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Recipient"
              }
            ]
          },
          "status": {
            "description": "The status of the sent update request.",
            "type": "string",
            "enum": [
              "CANCELED",
              "COMPLETE",
              "PENDING"
            ]
          },
          "subject": {
            "description": "The subject of the email.",
            "type": "string"
          }
        }
      },
      "ServerInfo": {
        "type": "object",
        "x-tags": [
          "serverInfo"
        ],
        "properties": {
          "formats": {
            "$ref": "#/components/schemas/FormatTables"
          },
          "supportedLocales": {
            "description": "Array of strings representing all Smartsheet-supported locales.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Share": {
        "type": "object",
        "x-tags": [
          "sharing"
        ],
        "properties": {
          "id": {
            "description": "Share Id.\n\n**NOTE**: unlike other Smartsheet object Ids, this Id is an alphanumeric string.\n",
            "type": "string"
          },
          "groupId": {
            "description": "Group Id if the share is a group share, else null.",
            "type": "number"
          },
          "userId": {
            "description": "User Id if the share is a user share, else null.",
            "type": "number"
          },
          "type": {
            "description": "The type of this share. One of the following values: GROUP or USER.\n",
            "type": "string"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "ccMe": {
            "description": "Indicates whether to send a copy of the email to the sharer of the sheet. You can specify this attribute\nin a request, but it is never present in a response.\n",
            "type": "boolean"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "email": {
            "description": "User's primary email address for user shares; null for group shares.",
            "type": "string"
          },
          "message": {
            "description": "The message included in the body of the email that is optionally sent to the recipient. You can specify\nthis attribute in a request, but it is never present in a response.\n",
            "type": "string"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "name": {
            "description": "If a user share and user is also a contact, the user's full name. If a group share, the group's name.",
            "type": "string"
          },
          "scope": {
            "description": "The scope of this share. One of the following values:\n  * **ITEM**: an item-level share (that is, the specific object to which the share applies is shared with\n    the user or group).\n  * **WORKSPACE**: a workspace-level share (that is, the workspace that contains the object to which the\n    share applies is shared with the user or group).\n",
            "type": "string"
          },
          "subject": {
            "description": "The subject of the email that is optionally sent to notify the recipient. You can specify this attribute\nin a request, but it is never present in a response.\n",
            "type": "string"
          }
        }
      },
      "SharedSecret": {
        "type": "object",
        "properties": {
          "sharedSecret": {
            "description": "Value for the shared secret.",
            "type": "string"
          }
        }
      },
      "Sheet": {
        "type": "object",
        "x-tags": [
          "sheets"
        ],
        "properties": {
          "id": {
            "description": "Sheet Id.",
            "type": "number"
          },
          "fromId": {
            "description": "The Id of the template from which to create the sheet. This attribute can be specified in a request, but is never present in a response.",
            "type": "number"
          },
          "ownerId": {
            "description": "User Id of the sheet owner.",
            "type": "number"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "attachments": {
            "description": "Array of Attachment objects.\nOnly returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **attachments**.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "cellImageUploadEnabled": {
            "description": "The sheet is enabled for cell images to be uploaded.\n",
            "type": "boolean"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "crossSheetReferences": {
            "description": "Array of CrossSheetReference objects.\nOnly returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **crossSheetReferences**.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossSheetReference"
            }
          },
          "dependenciesEnabled": {
            "description": "Indicates whether dependencies are enabled.",
            "type": "boolean"
          },
          "discussions": {
            "description": "Array of Discussion objects\nOnly returned if the [include](/api/smartsheet/openapi/sheets/getsheet) query string parameter contains **discussions**.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Discussion"
            }
          },
          "effectiveAttachmentOptions": {
            "description": "Array of enum strings (see [Attachment.attachmentType](/api/smartsheet/openapi/attachments) indicating the allowable attachment options for the current user and sheet.\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "favorite": {
            "deprecated": true,
            "description": "**Deprecated** Returned only if the user has marked this sheet as a favorite in their Home tab (value = **true**).",
            "type": "boolean"
          },
          "ganttEnabled": {
            "description": "Indicates whether \"Gantt View\" is enabled.",
            "type": "boolean"
          },
          "hasSummaryFields": {
            "description": "Indicates whether a sheet summary is present.",
            "type": "boolean"
          },
          "isMultiPicklistEnabled": {
            "description": "Indicates whether multi-select is enabled.",
            "type": "boolean"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "name": {
            "description": "Sheet name.",
            "type": "string"
          },
          "owner": {
            "description": "Email address of the sheet owner.",
            "type": "string"
          },
          "permalink": {
            "description": "URL that represents a direct link to the sheet in Smartsheet.",
            "type": "string"
          },
          "projectSettings": {
            "$ref": "#/components/schemas/ProjectSettings"
          },
          "readOnly": {
            "description": "Returned only if the sheet belongs to an expired trial (value = **true**).",
            "type": "boolean"
          },
          "resourceManagementEnabled": {
            "description": "Indicates that resource management is enabled.",
            "type": "boolean"
          },
          "resourceManagementType": {
            "description": "Resource Management type. Indicates the type of RM that is enabled.",
            "type": "string",
            "enum": [
              "NONE",
              "LEGACY_RESOURCE_MANAGEMENT",
              "RESOURCE_MANAGEMENT_BY_SMARTSHEET"
            ]
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Row"
            }
          },
          "showParentRowsForFilters": {
            "description": "Returned only if there are column filters on the sheet. Value = **true** if \"show parent rows\" is enabled for the filters.",
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "summary": {
            "$ref": "#/components/schemas/SheetSummary"
          },
          "totalRowCount": {
            "description": "The total number of rows in the sheet.",
            "type": "number"
          },
          "userPermissions": {
            "$ref": "#/components/schemas/SheetUserPermissions"
          },
          "userSettings": {
            "$ref": "#/components/schemas/SheetUserSettings"
          },
          "version": {
            "description": "A number that is incremented every time a sheet is modified.",
            "type": "number"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceListing"
          }
        }
      },
      "SheetEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          }
        ],
        "type": "object",
        "x-tags": [
          "sendViaEmail"
        ],
        "properties": {
          "format": {
            "description": "One of the following values: **EXCEL**, **PDF**, or **PDF_GANTT**.\n",
            "type": "string"
          },
          "formatDetails": {
            "$ref": "#/components/schemas/FormatDetails"
          }
        }
      },
      "SheetPublish": {
        "description": "Describes the sheet's publish settings.",
        "type": "object",
        "properties": {
          "icalEnabled": {
            "description": "If **true**, a webcal is available for the calendar in the sheet.",
            "type": "boolean"
          },
          "icalUrl": {
            "description": "URL for **iCal** view of the published sheet. Only returned in a response if **icalEnabled = true**.\n"
          },
          "readOnlyFullAccessibleBy": {
            "description": "Indicates who can access the 'Read-Only Full' view of the published sheet:\n  * ALL - available to anyone who has the link.\n  * ORG - available only to members of the sheet owner's Smartsheet organization account.\n  * SHARED - available only to users shared to the item.\n\nOnly returned in the response if **readOnlyFullEnabled = true**.\n",
            "type": "string",
            "enum": [
              "ALL",
              "ORG",
              "SHARED"
            ]
          },
          "readOnlyFullDefaultView": {
            "description": "Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values.\n",
            "type": "string",
            "enum": [
              "CALENDAR",
              "CARD",
              "GRID"
            ]
          },
          "readOnlyFullEnabled": {
            "description": "If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions.",
            "type": "boolean"
          },
          "readOnlyFullShowToolbar": {
            "description": "**Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.",
            "type": "boolean",
            "deprecated": true
          },
          "readOnlyFullUrl": {
            "description": "URL for 'Read-Only Full' view of the published sheet. Only returned in a response if **readOnlyFullEnabled = true.",
            "type": "string"
          },
          "readOnlyLiteEnabled": {
            "description": "If **true**, a lightweight version of the sheet is published without row attachments and discussions.",
            "type": "boolean"
          },
          "readOnlyLiteSslUrl": {
            "description": "URL for 'Read-Only' view of the published sheet when SSL is enabled.",
            "type": "string"
          },
          "readOnlyLiteUrl": {
            "description": "URL for 'Read-Only HTML' view of the published sheet. Only returned in a response if **readOnlyLiteEnabled = true**.",
            "type": "string"
          },
          "readWriteAccessibleBy": {
            "description": "Indicates who can access the 'Edit by Anyone' view of the published sheet:\n  * ALL - available to anyone who has the link.\n  * ORG - available only to members of the sheet owner's Smartsheet organization account.\n  * SHARED - available only to users shared to the item.\n\nOnly returned in the response if **readWriteEnabled = true**.\n",
            "type": "string",
            "enum": [
              "ALL",
              "ORG",
              "SHARED"
            ]
          },
          "readWriteDefaultView": {
            "description": "Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values.\n",
            "type": "string",
            "enum": [
              "CALENDAR",
              "CARD",
              "GRID"
            ]
          },
          "readWriteEnabled": {
            "description": "If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions.",
            "type": "boolean"
          },
          "readWriteShowToolbar": {
            "description": "**Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.",
            "type": "boolean",
            "deprecated": true
          },
          "readWriteUrl": {
            "description": "URL for 'Edit by Anyone' view of the published sheet. Only returned in a response if **readWriteEnabled = true**.",
            "type": "string"
          }
        }
      },
      "SheetSummary": {
        "type": "object",
        "x-tags": [
          "sheetSummary"
        ],
        "description": "Represents the entire summary, or a list of defined fields and values, for a specific sheet.",
        "properties": {
          "fields": {
            "description": "Array of summary (or metadata) fields defined on the sheet.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SummaryField"
            }
          }
        }
      },
      "SheetUserPermissions": {
        "type": "object",
        "description": "Describes the current user's editing permissions for a specific sheet.",
        "properties": {
          "summaryPermissions": {
            "description": "One of:\n  * ADMIN: full control over fields.\n  * READ_DELETE: sheet is owned by an individual account that doesn't have summary capabilities. If a summary exists, the only possible operations are GET and DELETE fields.\n  * READ_ONLY.\n  * READ_WRITE: can edit values of existing fields, but not create or delete fields, nor modify field type.\n",
            "type": "string",
            "enum": [
              "ADMIN",
              "READ_DELETE",
              "READ_ONLY",
              "READ_WRITE"
            ]
          }
        }
      },
      "SheetUserSettings": {
        "type": "object",
        "description": "Represents individual user settings for a specific sheet. User settings may be updated even on sheets where the current user only has read access (for example, viewer permissions or a read-only sheet).",
        "properties": {
          "criticalPathEnabled": {
            "description": "Does this user have \"Show Critical Path\" turned on for this sheet? **NOTE**: This setting only has an effect on project sheets with dependencies enabled.\n",
            "type": "boolean"
          },
          "displaySummaryTasks": {
            "description": "Does this user have \"Display Summary Tasks\" turned on for this sheet? Applies only to sheets where \"Calendar View\" has been configured.",
            "type": "boolean"
          }
        }
      },
      "ShortcutDataItem": {
        "type": "object",
        "properties": {
          "attachmentType": {
            "type": "string",
            "enum": [
              "BOX_COM",
              "DROPBOX",
              "EGNYTE",
              "EVERNOTE",
              "FILE",
              "GOOGLE_DRIVE",
              "LINK",
              "ONEDRIVE",
              "SMARTSHEET"
            ]
          },
          "hyperlink": {
            "$ref": "#/components/schemas/Hyperlink"
          },
          "label": {
            "description": "Label for the data point.",
            "type": "string"
          },
          "labelFormat": {
            "description": "Format description of label.",
            "type": "string",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "labelFont": {
            "$ref": "#/components/schemas/DashboardFont"
          },
          "mimeType": {
            "type": "string"
          },
          "order": {
            "description": "The display order for the ShortcutWidgetItem object.",
            "type": "number"
          }
        }
      },
      "ShortcutWidgetContent": {
        "type": "object",
        "title": "Shortcut",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SHORTCUT",
              "SHORTCUTICON",
              "SHORTCUTLIST"
            ]
          },
          "shortcutData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortcutDataItem"
            }
          }
        }
      },
      "Sight": {
        "type": "object",
        "x-tags": [
          "dashboards"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SightListItem"
          }
        ],
        "properties": {
          "backgroundColor": {
            "description": "The hex color, for instance `#E6F5FE`.",
            "type": "string",
            "readOnly": true
          },
          "defaultWidgetBackgroundColor": {
            "description": "The hex color of the background color for all widgets except for title widgets on the dashboard, for instance `#E6F5FEF4` or `#E6F5FE`.",
            "type": "string",
            "readOnly": true
          },
          "columnCount": {
            "description": "Number of columns that the dashboard contains.",
            "type": "number",
            "readOnly": true
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "widgets": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Widget"
            }
          },
          "workspace": {
            "description": "A reference to the dashboard's workspace, if the dashboard is in a workspace; otherwise an empty value.",
            "type": "object",
            "properties": {
              "id": {
                "description": "Workspace Id.",
                "type": "number"
              },
              "name": {
                "description": "Workspace name.",
                "type": "string"
              }
            },
            "example": {
              "id": 1234567890,
              "name": "Some Workspace"
            }
          }
        }
      },
      "SightPublish": {
        "description": "Describes the dashboard's publish settings.",
        "type": "object",
        "x-tags": [
          "dashboards"
        ],
        "properties": {
          "readOnlyFullAccessibleBy": {
            "description": "Indicates who can access the 'Read-Only Full' view of the published dashboard. Only returned in the response if **readOnlyFullEnabled = true**.\n  * **ALL** - available to anyone who has the link.\n  * **ORG** - available only to members of the dashboard owner's Smartsheet organization account.\n  * **SHARED** - available only to users shared to the item.\n\n---\nIf **readOnlyFullEnabled** is set to true in the request, but **readOnlyFullAccessibleBy** is not specified, the value of **readOnlyFullAccessibleBy** defaults to the organization-level 'Dashboard Publishing' setting (if the dashboard owner belongs to an organization account) or to **ALL** (if the dashboard owner does not belong to an organization account).\n",
            "type": "string",
            "enum": [
              "ALL",
              "ORG"
            ]
          },
          "readOnlyFullEnabled": {
            "description": "If true, a rich version of the dashboard is published with the ability to use shortcuts and widget interactions.",
            "type": "boolean"
          },
          "readOnlyFullUrl": {
            "description": "URL for 'Read-Only Full' view of the published dashboard. Only returned in a response if readOnlyFullEnabled = true.",
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "readOnlyFullEnabled"
        ]
      },
      "SortCriterion": {
        "type": "object",
        "properties": {
          "columnId": {
            "type": "number"
          },
          "direction": {
            "description": "Direction of the sort.",
            "type": "string",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ],
            "default": "ASCENDING"
          }
        }
      },
      "SortSpecifier": {
        "type": "object",
        "properties": {
          "sortCriteria": {
            "description": "Specifies sort order. Array is in priority order.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortCriterion"
            }
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The Id of the dashboard, report, sheet, or template from which the enclosing dashboard, report, sheet, or template was created.\n",
            "type": "number"
          },
          "type": {
            "description": "**report**, **sheet**, **sight** (aka dashboard), or **template**.\n",
            "type": "string"
          }
        }
      },
      "StreamResult": {
        "description": "StreamResult Object",
        "type": "object",
        "x-tags": [
          "events"
        ],
        "properties": {
          "nextStreamPosition": {
            "description": "This string should be passed back to the next GET events call to obtain subsequent events.",
            "type": "string",
            "example": "XyzAb1234cdefghijklmnofpq"
          },
          "moreAvailable": {
            "description": "True if more results are available. This is typically due to event counts exceeding the maxCount parameter passed in.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "Subscope": {
        "description": "An object that contains an array of column Ids if you want to limit the subscription to a subscope. Specified when a webhook is created and cannot be changed.",
        "type": "object",
        "properties": {
          "columnIds": {
            "description": "A column Id or Ids",
            "type": "array",
            "items": {
              "type": "number"
            },
            "example": [
              7318427511613316,
              7318427511613123
            ]
          }
        }
      },
      "SummaryField": {
        "type": "object",
        "x-tags": [
          "sheetSummary"
        ],
        "properties": {
          "id": {
            "description": "SummaryField Id.",
            "type": "number"
          },
          "contactOptions": {
            "description": "Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactOption"
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "createdBy": {
            "description": "User object containing name and email of the creator of this summary field.",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "displayValue": {
            "description": "Visual representation of cell contents, as presented to the user in the UI.",
            "type": "string"
          },
          "format": {
            "description": "The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it.",
            "type": "string"
          },
          "formula": {
            "description": "The formula for a cell, if set.",
            "type": "string"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/Hyperlink"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "index": {
            "description": "Field index or position. This number is zero-based.",
            "type": "number"
          },
          "locked": {
            "description": "Indicates whether the field is locked.",
            "type": "boolean"
          },
          "lockedForUser": {
            "description": "Indicates whether the field is locked for the requesting user.",
            "type": "boolean"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedBy": {
            "description": "User object containing name and email of the user who most recently modified this summary field.",
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiniUser"
              }
            ]
          },
          "objectValue": {
            "$ref": "#/components/schemas/ObjectValue"
          },
          "options": {
            "description": "When applicable for PICKLIST column type. Array of the options available for the field.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "symbol": {
            "description": "When applicable for PICKLIST column type.",
            "type": "string"
          },
          "title": {
            "description": "Arbitrary name, must be unique within summary.",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATETIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ]
          },
          "validation": {
            "description": "Indicates whether summary field values are restricted to the type.",
            "type": "boolean"
          }
        }
      },
      "Template": {
        "description": "A template can be used to create a sheet.",
        "type": "object",
        "x-tags": [
          "templates"
        ],
        "properties": {
          "id": {
            "description": "Template Id.",
            "type": "number"
          },
          "type": {
            "description": "Type of template. Only applicable to public templates.",
            "type": "string",
            "enum": [
              "report",
              "sheet"
            ]
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "blank": {
            "description": "Indicates whether the template is blank. Only applicable to public templates.",
            "type": "boolean"
          },
          "categories": {
            "description": "Indicates whether the template is blank. Only applicable to public templates.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "description": "Template description.",
            "type": "string"
          },
          "globalTemplate": {
            "description": "Type of global template. Only applicable to blank public templates.",
            "type": "string",
            "enum": [
              "BLANK_SHEET",
              "PROJECT_SHEET",
              "TASK_LIST"
            ]
          },
          "image": {
            "description": "URL to the small preview image for this template. Only applicable to non-blank public templates.",
            "type": "string"
          },
          "largeImage": {
            "description": "URL to the large preview image for this template. Only applicable to non-blank public templates.",
            "type": "string"
          },
          "locale": {
            "description": "Locale of the template. Only applicable to public templates.",
            "type": "string",
            "enum": [
              "ar_AE",
              "ar_BH",
              "ar_DZ",
              "ar_EG",
              "ar_IQ",
              "ar_JO",
              "ar_KW",
              "ar_LB",
              "ar_LY",
              "ar_MA",
              "ar_OM",
              "ar_QA",
              "ar_SA",
              "ar_SD",
              "ar_SY",
              "ar_TN",
              "ar_YE",
              "be_BY",
              "bg_BG",
              "ca_ES",
              "cs_CZ",
              "da_DK",
              "de_AT",
              "de_CH",
              "de_DE",
              "de_LU",
              "el_CY",
              "el_GR",
              "en_AU",
              "en_CA",
              "en_GB",
              "en_IE",
              "en_IN",
              "en_MT",
              "en_NZ",
              "en_PH",
              "en_SG",
              "en_US",
              "en_ZA",
              "es_AR",
              "es_BO",
              "es_CL",
              "es_CO",
              "es_CR",
              "es_DO",
              "es_EC",
              "es_ES",
              "es_GT",
              "es_HN",
              "es_MX",
              "es_NI",
              "es_PA",
              "es_PE",
              "es_PR",
              "es_PY",
              "es_SV",
              "es_US",
              "es_UY",
              "es_VE",
              "et_EE",
              "fi_FI",
              "fr_BE",
              "fr_CA",
              "fr_CH",
              "fr_FR",
              "fr_LU",
              "ga_IE",
              "hi_US",
              "hr_HR",
              "hu_HU",
              "in_ID",
              "is_IS",
              "it_CH",
              "it_IT",
              "iw_IL",
              "ja_JP",
              "ko_KR",
              "lt_LT",
              "lv_LV",
              "mk_MK",
              "ms_MY",
              "mt_MT",
              "nl_BE",
              "nl_NL",
              "no_NO",
              "pl_PL",
              "pt_BR",
              "pt_PT",
              "ro_RO",
              "ru_RU",
              "sk_SK",
              "sl_SI",
              "sq_AL",
              "sr_BA",
              "sr_CS",
              "sv_SE",
              "th_US",
              "tr_TR",
              "uk_UA",
              "vi_VN",
              "zh_CN",
              "zh_HK",
              "zh_SG",
              "zh_TW"
            ]
          },
          "name": {
            "type": "string",
            "description": "Type of global template.",
            "example": "Awesome Project Template"
          },
          "tags": {
            "description": "List of search tags for this template. Only applicable to non-blank public templates.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Timestamp": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Timestamp_date-time"
          },
          {
            "$ref": "#/components/schemas/Timestamp_number"
          }
        ],
        "readOnly": true
      },
      "TitleWidgetContent": {
        "type": "object",
        "title": "Title",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "RICHTEXT"
            ]
          },
          "backgroundColor": {
            "type": "string"
          },
          "htmlContent": {
            "type": "string",
            "description": "The widget contents as HTML. The Title widget supports the following subset of HTML tags and CSS Styles:\n\nHTML\n  * br - line break\n  * p - paragraph\n  * span - section of the document\n\nCSS\n  * color\n  * font-family\n  * font-size\n  * font-style\n  * font-weight\n  * text-align\n  * text-decoration\n",
            "example": "<p style=\"text-align:center\"><span class=\"clsDbFt\">HI!</span></p>"
          }
        }
      },
      "Token": {
        "type": "object",
        "x-tags": [
          "tokens"
        ],
        "properties": {
          "access_token": {
            "description": "A credential that can be used by a client to access the Smartsheet API.",
            "type": "string",
            "readOnly": true
          },
          "token_type": {
            "description": "How an access token will be generated and presented. Smartsheet uses the bearer parameter, which means essentially give access to the bearer of this token.",
            "type": "string",
            "readOnly": true
          },
          "expires_in": {
            "description": "Number of seconds token is valid once issued.",
            "type": "number",
            "default": 604799,
            "readOnly": true
          },
          "refresh_token": {
            "description": "A credential tied to the access token that can be used to obtain a fresh access token with the same permissions, without further involvement from a user.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "UpdateProofStatusRequest": {
        "type": "object",
        "properties": {
          "isCompleted": {
            "type": "boolean"
          }
        }
      },
      "UpdateRequest": {
        "type": "object",
        "x-tags": [
          "updateRequests"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/MultiRowEmail"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Id of the update request.",
                "type": "number"
              },
              "createdAt": {
                "description": "The date and time for when this request was originally created. Read-only.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Timestamp"
                  }
                ]
              },
              "modifiedAt": {
                "description": "The date and time for when the last change was made to this request. Read-only.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Timestamp"
                  }
                ]
              },
              "schedule": {
                "description": "The schedule for which update requests are sent out.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Schedule"
                  }
                ]
              },
              "sentBy": {
                "description": "`User` object containing `name` and `email` of the sender.\n",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MiniUser"
                  }
                ]
              }
            }
          }
        ]
      },
      "URLAttachmentRequest": {
        "type": "object",
        "x-tags": [
          "attachments"
        ],
        "properties": {
          "attachmentSubType": {
            "description": "Attachment sub type. Note--Folder type is for EGNYTE values and the rest are GOOGLE_DRIVE values.",
            "type": "string",
            "enum": [
              "DOCUMENT",
              "DRAWING",
              "FOLDER",
              "PDF",
              "PRESENTATION",
              "SPREADSHEET"
            ]
          },
          "attachmentType": {
            "description": "Attachment type. Note--Dropbox, Egnyte, and Evernote are not supported for Smartsheet.gov accounts.",
            "type": "string",
            "enum": [
              "BOX_COM",
              "DROPBOX",
              "EGNYTE",
              "EVERNOTE",
              "FILE",
              "GOOGLE_DRIVE",
              "LINK",
              "ONEDRIVE",
              "TRELLO"
            ]
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "User": {
        "description": "User Object",
        "type": "object",
        "x-tags": [
          "users"
        ],
        "properties": {
          "id": {
            "description": "User Id.",
            "type": "number",
            "readOnly": true,
            "example": 48569348493401200
          },
          "admin": {
            "description": "Indicates whether the user is a system admin (can manage user accounts and organization account).",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "customWelcomeScreenViewed": {
            "description": "Timestamp of viewing an <a href=\"https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only\" target=\"_blank\" rel=\"noopener noreferrer\">Enterprise Custom Welcome Screen</a> by the current user.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-08-25T12:15:47Z"
          },
          "email": {
            "description": "User's primary email address.",
            "type": "string",
            "format": "email",
            "example": "jane.doe@smartsheet.com"
          },
          "firstName": {
            "description": "User's first name.",
            "type": "string",
            "example": "Jane"
          },
          "groupAdmin": {
            "description": "Indicates whether the user is a group admin (can create and edit groups).",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "lastLogin": {
            "description": "Last login time of the current user.",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-10-04T18:32:47Z"
          },
          "lastName": {
            "description": "User's last name.",
            "type": "string",
            "example": "Doe"
          },
          "licensedSheetCreator": {
            "description": "Indicates whether the user is a licensed user (can create and own sheets).",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "name": {
            "description": "User's full name (read-only).",
            "type": "string",
            "readOnly": true,
            "example": "Jane Doe"
          },
          "profileImage": {
            "$ref": "#/components/schemas/ProfileImage"
          },
          "resourceViewer": {
            "description": "Indicates whether the user is a resource viewer (can access resource views).",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "sheetCount": {
            "description": "**SUNSET** - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`.\n",
            "type": "number",
            "readOnly": true,
            "example": -1,
            "default": -1,
            "minimum": -1,
            "maximum": -1,
            "deprecated": true
          },
          "status": {
            "description": "User status, set to one of the listed enum values.",
            "type": "string",
            "enum": [
              "ACTIVE",
              "DECLINED",
              "PENDING",
              "DEACTIVATED"
            ],
            "example": "ACTIVE"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "x-tags": [
          "users"
        ],
        "properties": {
          "id": {
            "description": "Current user's Id.",
            "type": "number",
            "example": 48569348493401200
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "admin": {
            "description": "Indicates whether the user is a system admin (can manage user accounts and organization account).",
            "type": "boolean",
            "example": true
          },
          "alternateEmails": {
            "$ref": "#/components/schemas/AlternateEmail"
          },
          "company": {
            "description": "User's company.",
            "type": "string",
            "example": "Smartsheet"
          },
          "customWelcomeScreenViewed": {
            "description": "Timestamp of viewing an <a href=\"https://help.smartsheet.com/articles/1392225-customizing-a-welcome-message-upgrade-screen-enterprise-only\" target=\"_blank\" rel=\"noopener noreferrer\">Enterprise Custom Welcome Screen</a> by the current user.",
            "type": "string",
            "format": "date-time",
            "example": "2020-08-25T12:15:47Z"
          },
          "department": {
            "description": "User's department.",
            "type": "string",
            "example": "Engineering"
          },
          "email": {
            "description": "Current user's primary email address.",
            "type": "string",
            "example": "john.doe@smartsheet.com"
          },
          "firstName": {
            "description": "Current user's first name.",
            "type": "string",
            "example": "John"
          },
          "groupAdmin": {
            "description": "Indicates whether the user is a group admin (can create and edit groups).",
            "type": "boolean",
            "example": true
          },
          "jiraAdmin": {
            "description": "Indicates whether the user is a JIRA admin.",
            "type": "boolean",
            "example": true
          },
          "lastLogin": {
            "description": "Last login time of the current user.",
            "type": "string",
            "format": "date-time",
            "example": "2020-10-31T12:15:47Z"
          },
          "lastName": {
            "description": "Current user's last name.",
            "type": "string",
            "example": "Doe"
          },
          "licensedSheetCreator": {
            "description": "Indicates whether the user is a licensed user (can create and own sheets).",
            "type": "boolean",
            "example": true
          },
          "locale": {
            "description": "Current user's locale (see [ServerInfo](/api/smartsheet/openapi/serverinfo/serverinfo)).",
            "type": "string",
            "example": "en_US"
          },
          "mobilePhone": {
            "description": "User's mobile phone number.",
            "type": "string",
            "example": "555-867-5309"
          },
          "profileImage": {
            "$ref": "#/components/schemas/ProfileImage"
          },
          "resourceViewer": {
            "description": "Indicates whether the user is a resource viewer (can access resource views).",
            "type": "boolean",
            "example": true
          },
          "role": {
            "description": "User's role.",
            "type": "string",
            "example": "Software Developer"
          },
          "salesforceAdmin": {
            "description": "Indicates whether the user is a Salesforce admin.",
            "type": "boolean",
            "example": false
          },
          "salesforceUser": {
            "description": "Indicates whether the user is a registered Salesforce user.",
            "type": "boolean",
            "example": false
          },
          "sheetCount": {
            "description": "**SUNSET** - The `sheetCount` attribute now holds the value `-1` and is included only if the retrieved user's `status` is `ACTIVE`.\n",
            "type": "number",
            "example": -1,
            "default": -1,
            "minimum": -1,
            "maximum": -1,
            "deprecated": true
          },
          "timeZone": {
            "description": "Current user's time zone Id.",
            "type": "string",
            "example": "US/Pacific"
          },
          "title": {
            "description": "User's title.",
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "workPhone": {
            "description": "User's work phone number.",
            "type": "string",
            "example": "844-324-2360"
          }
        }
      },
      "WebContentWidgetContent": {
        "type": "object",
        "title": "Web Content",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "WidgetWebContent"
            ]
          },
          "url": {
            "description": "The URL for the web content.",
            "type": "string",
            "example": "https://www.youtube.com/embed/quGpnXiCUms"
          }
        }
      },
      "Webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Update_Webhook_Request"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Webhook Id.",
                "type": "number",
                "readOnly": true,
                "example": 8444254503626628
              },
              "apiClientId": {
                "type": "string",
                "description": "API client Id corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app.",
                "readOnly": true,
                "example": "555555"
              },
              "scopeObjectId": {
                "type": "number",
                "description": "Id of the object that is subscribed to. Specified when a webhook is created and cannot be changed.",
                "example": 3285357287499652
              },
              "apiClientName": {
                "type": "string",
                "description": "API client name corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app.",
                "readOnly": true,
                "example": "Awesome Smartsheet Application"
              },
              "createdAt": {
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Timestamp"
                  }
                ]
              },
              "disabledDetails": {
                "description": "Details about the reason the webhook was disabled. Read-only. Only present when enabled=false.",
                "type": "string",
                "readOnly": true
              },
              "modifiedAt": {
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Timestamp"
                  }
                ]
              },
              "scope": {
                "description": "Scope of the subscription. Currently, the only supported value is sheet. Specified when a webhook is created and cannot be changed.",
                "type": "string",
                "example": "sheet"
              },
              "sharedSecret": {
                "description": "Shared secret for this Webhook, randomly generated by Smartsheet. Read-only. See [Authenticating Callbacks](/api/smartsheet/openapi/webhooks) for details about how this value can be used.",
                "type": "string",
                "readOnly": true,
                "example": "216ejjzdnq17mq1q8xs7d4hu8b"
              },
              "stats": {
                "type": "object",
                "readOnly": true,
                "properties": {
                  "lastCallbackAttempt": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When this webhook last made a callback attempt."
                  },
                  "lastCallbackAttemptRetryCount": {
                    "type": "number",
                    "readOnly": true,
                    "description": "The number of retries the webhook had performed as of the last callback attempt."
                  },
                  "lastSuccessfulCallback": {
                    "type": "string",
                    "format": "date-time",
                    "readOnly": true,
                    "description": "When this webhook last made a successful callback."
                  }
                }
              },
              "status": {
                "description": "Webhook status. Read-only. See Webhook Status for list of possible values.",
                "type": "string",
                "readOnly": true,
                "enum": [
                  "DISABLED_ADMINISTRATIVE",
                  "DISABLED_APP_REVOKED",
                  "DISABLED_BY_OWNER",
                  "DISABLED_CALLBACK_FAILED",
                  "DISABLED_SCOPE_INACCESSIBLE",
                  "DISABLED_VERIFICATION_FAILED",
                  "ENABLED",
                  "NEW_NOT_VERIFIED"
                ],
                "example": "ENABLED"
              },
              "subscope": {
                "$ref": "#/components/schemas/Subscope"
              }
            }
          }
        ],
        "x-tags": [
          "webhooks"
        ]
      },
      "Widget": {
        "type": "object",
        "x-tags": [
          "dashboards"
        ],
        "readOnly": true,
        "properties": {
          "id": {
            "description": "Widget Id.",
            "type": "number"
          },
          "type": {
            "description": "Type of widget.",
            "type": "string",
            "enum": [
              "CHART",
              "GRIDGANTT",
              "IMAGE",
              "METRIC",
              "RICHTEXT",
              "SHEETSUMMARY",
              "SHORTCUT",
              "SHORTCUTICON",
              "SHORTCUTLIST",
              "TITLE",
              "WEBCONTENT"
            ]
          },
          "contents": {
            "description": "The type of widget content depends on the value of widget.type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChartWidgetContent"
              },
              {
                "$ref": "#/components/schemas/CellLinkWidgetContent"
              },
              {
                "$ref": "#/components/schemas/ImageWidgetContent"
              },
              {
                "$ref": "#/components/schemas/ReportWidgetContent"
              },
              {
                "$ref": "#/components/schemas/RichTextWidgetContent"
              },
              {
                "$ref": "#/components/schemas/ShortcutWidgetContent"
              },
              {
                "$ref": "#/components/schemas/TitleWidgetContent"
              },
              {
                "$ref": "#/components/schemas/WebContentWidgetContent"
              }
            ]
          },
          "height": {
            "description": "Number of rows that the widget occupies on the dashboard.",
            "type": "number"
          },
          "showTitle": {
            "description": "True indicates that the client should display the widget title. This is independent of the title string which may be null or empty.",
            "type": "boolean"
          },
          "showTitleIcon": {
            "description": "True indicates that the client should display the sheet icon in the widget title.",
            "type": "boolean"
          },
          "title": {
            "description": "Title of the widget.",
            "type": "string"
          },
          "titleFormat": {
            "description": "Title format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)).",
            "type": "string",
            "example": ",,1,,,,,,,3,,,,,,1,"
          },
          "titleFont": {
            "$ref": "#/components/schemas/DashboardFont"
          },
          "version": {
            "description": "Widget version number.",
            "type": "number"
          },
          "viewMode": {
            "description": "Indicates the content layout. Must use a query parameter of level=2 to see this information.\n * 1 - centered\n * 2 - left aligned\n",
            "type": "number",
            "enum": [
              1,
              2
            ]
          },
          "width": {
            "description": "Number of columns that the widget occupies on the dashboard.",
            "type": "number"
          },
          "xPosition": {
            "description": "X-coordinate of widget's position on the dashboard.",
            "type": "number"
          },
          "yPosition": {
            "description": "Y-coordinate of widget's position on the dashboard.",
            "type": "number"
          }
        }
      },
      "WidgetHyperlink": {
        "type": "object",
        "properties": {
          "interactionType": {
            "description": "Specifies what happens when a user clicks the widget. The type will determine what other properties are needed.\n * DISTI_COPY - a distribution link, only available if org has distribution links enabled.\n * NONE - do nothing, no other attribute required.\n * SMARTSHEET_ITEM - open a Smartsheet item that is not the SOURCE_SHEET, must also have one of the following attributes:\n    * dashboardId\n    * folderId\n    * reportId\n    * sheetId\n    * workspaceId\n * SOURCE_SHEET - open the container where the widget data comes from, no other attribute required.\n * WEB -  launch the URL, must also have url attribute.\n",
            "type": "string",
            "enum": [
              "DISTI_COPY",
              "NONE",
              "SMARTSHEET_ITEM",
              "SOURCE_SHEET",
              "WEB"
            ]
          },
          "folderId": {
            "description": "If interactionType = SMARTSHEET_ITEM this is the folder to open.",
            "type": "number"
          },
          "reportId": {
            "description": "If interactionType = SMARTSHEET_ITEM this is the report to open.",
            "type": "number"
          },
          "sheetId": {
            "description": "If interactionType = SMARTSHEET_ITEM this is the sheet to open.",
            "type": "number"
          },
          "sightId": {
            "description": "If interactionType = SMARTSHEET_ITEM this is the dashboard to open.",
            "type": "number"
          },
          "url": {
            "description": "If interactionType = WEB this is the URL to launch.",
            "type": "string"
          },
          "workspaceId": {
            "description": "If interactionType = SMARTSHEET_ITEM this is the workspace to open.",
            "type": "number"
          }
        }
      },
      "Workspace": {
        "description": "Can contain dashboards, folders, reports, sheets, and templates.",
        "type": "object",
        "x-tags": [
          "workspaces"
        ],
        "properties": {
          "id": {
            "description": "Workspace Id.",
            "type": "number"
          },
          "name": {
            "description": "Workspace name.",
            "type": "string"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "permalink": {
            "description": "URL that represents a direct link to the workspace in Smartsheet.",
            "type": "string"
          },
          "folders": {
            "description": "Folders contained in the workspace.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            }
          },
          "reports": {
            "description": "Reports contained in the workspace.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridListing"
            }
          },
          "sheets": {
            "description": "Sheets contained in the workspace.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridListing"
            }
          },
          "sights": {
            "description": "Dashboards contained in the workspace.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardListing"
            }
          }
        }
      },
      "Timestamp_date-time": {
        "type": "string",
        "format": "date-time"
      },
      "Timestamp_number": {
        "type": "number"
      },
      "GenericResult": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Message that indicates the outcome of the request. (One of SUCCESS or PARTIAL_SUCCESS.)",
            "type": "string",
            "enum": [
              "PARTIAL_SUCCESS",
              "SUCCESS"
            ],
            "example": "SUCCESS"
          },
          "resultCode": {
            "description": "* '0' Success\n* '3' Partial Success of Bulk Operation",
            "type": "number",
            "enum": [
              0,
              3
            ]
          }
        }
      },
      "GridListing": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Asset Id.",
            "type": "number"
          },
          "name": {
            "description": "Asset name.",
            "type": "string"
          },
          "permalink": {
            "description": "URL that represents a direct link to the asset in Smartsheet.",
            "type": "string"
          }
        }
      },
      "DashboardListing": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Asset Id.",
            "type": "number"
          },
          "name": {
            "description": "Asset name.",
            "type": "string"
          },
          "permalink": {
            "description": "URL that represents a direct link to the asset in Smartsheet.",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "ItemResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericResult"
          }
        ],
        "properties": {
          "failedItems": {
            "description": "Array of BulkItemFailure objects which represents the items that failed to be added or updated. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information. Applicable only for bulk operations that support partial success.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkItemFailure"
            },
            "nullable": true
          }
        }
      },
      "ContainerDestinationForCopy": {
        "type": "object",
        "title": "Container destination for copy",
        "properties": {
          "destinationId": {
            "description": "The ID of the destination container.\n",
            "type": "number"
          },
          "destinationType": {
            "description": "Type of destination container.\n\nThe `\"home\"` enum is **Deprecated** since March 25, 2025, and will be removed.\n",
            "type": "string",
            "nullable": true,
            "enum": [
              "folder",
              "home",
              "workspace"
            ]
          },
          "newName": {
            "description": "Name of the newly created object (when copying a dashboard, folder, sheet, or workspace).",
            "type": "string"
          }
        },
        "required": [
          "destinationId"
        ]
      },
      "contactOptions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ContactOption"
        },
        "description": "Array of ContactOption objects to specify a pre-defined list of values for the column. Column **type** must be **CONTACT_LIST**."
      },
      "options": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Array of the options available for the column."
      },
      "primary": {
        "type": "boolean",
        "description": "Returned only if the column is the Primary Column (value = **true**)."
      },
      "symbol": {
        "type": "string",
        "description": "When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)."
      },
      "systemColumnType": {
        "type": "string",
        "enum": [
          "AUTO_NUMBER",
          "CREATED_BY",
          "CREATED_DATE",
          "MODIFIED_BY",
          "MODIFIED_DATE"
        ],
        "description": "See [System Columns](/api/smartsheet/openapi/columns)."
      },
      "title": {
        "type": "string",
        "description": "Column title."
      },
      "type": {
        "type": "string",
        "enum": [
          "ABSTRACT_DATETIME",
          "CHECKBOX",
          "CONTACT_LIST",
          "DATE",
          "DATETIME",
          "DURATION",
          "MULTI_CONTACT_LIST",
          "MULTI_PICKLIST",
          "PICKLIST",
          "PREDECESSOR",
          "TEXT_NUMBER"
        ],
        "description": "See [Column Types](/api/smartsheet/openapi/columns)"
      },
      "width": {
        "type": "number",
        "description": "Display width of the column in pixels."
      },
      "ColumnToCreateASheet": {
        "type": "object",
        "x-tags": [
          "sheets"
        ],
        "properties": {
          "autoNumberFormat": {
            "$ref": "#/components/schemas/AutoNumberFormat"
          },
          "contactOptions": {
            "$ref": "#/components/schemas/contactOptions"
          },
          "options": {
            "$ref": "#/components/schemas/options"
          },
          "primary": {
            "$ref": "#/components/schemas/primary"
          },
          "symbol": {
            "$ref": "#/components/schemas/symbol"
          },
          "systemColumnType": {
            "$ref": "#/components/schemas/systemColumnType"
          },
          "title": {
            "$ref": "#/components/schemas/title"
          },
          "type": {
            "$ref": "#/components/schemas/type"
          },
          "width": {
            "$ref": "#/components/schemas/width"
          }
        }
      },
      "name": {
        "description": "Sheet name.",
        "type": "string"
      },
      "SheetToCreate": {
        "type": "object",
        "x-tags": [
          "sheets"
        ],
        "description": "Sheet to create from scratch using the specified columns.",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColumnToCreateASheet"
            }
          },
          "name": {
            "$ref": "#/components/schemas/name"
          }
        }
      },
      "SheetToCreateFromTemplate": {
        "type": "object",
        "description": "Sheet to create from template.",
        "properties": {
          "fromId": {
            "description": "Template Id from which to create the sheet.",
            "type": "number"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          }
        }
      },
      "columns": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Column"
        }
      },
      "id": {
        "description": "Sheet Id.",
        "type": "number"
      },
      "permalink": {
        "description": "URL that represents a direct link to the sheet in Smartsheet.",
        "type": "string"
      },
      "SheetCreated": {
        "type": "object",
        "description": "Sheet created from scratch using the specified columns.",
        "properties": {
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "columns": {
            "$ref": "#/components/schemas/columns"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "permalink": {
            "$ref": "#/components/schemas/permalink"
          }
        }
      },
      "SheetCreatedFromTemplate": {
        "type": "object",
        "description": "Sheet created from template.",
        "properties": {
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "permalink": {
            "$ref": "#/components/schemas/permalink"
          }
        }
      },
      "SheetImported": {
        "type": "object",
        "description": "Sheet imported from CSV / XLSX file.",
        "properties": {
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "type": {
            "description": "Container type. Has 'sheet' value for the imported sheet.",
            "type": "string"
          },
          "permalink": {
            "$ref": "#/components/schemas/permalink"
          }
        }
      },
      "AbstractDatetimeObjectValue": {
        "description": "Object representing a calculated datetime",
        "type": "object",
        "title": "AbstractDatetimeObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME"
            ]
          },
          "value": {
            "description": "Datetime, in the **date-time** format defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 3339, section 5.6</a>",
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "objectType": "ABSTRACT_DATETIME",
          "value": "2025-03-03T16:59:59"
        }
      },
      "CheckboxObjectValue": {
        "description": "Object representing a checkbox",
        "type": "object",
        "title": "CheckboxObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "CHECKBOX"
            ]
          },
          "value": {
            "description": "true if checked; false otherwise",
            "type": "boolean"
          }
        },
        "example": {
          "objectType": "CHECKBOX",
          "value": true
        }
      },
      "ContactObjectValue": {
        "description": "Object containing a Contact",
        "type": "object",
        "title": "ContactObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "CONTACT"
            ]
          },
          "email": {
            "description": "Email address of the Contact",
            "type": "string",
            "format": "email",
            "example": "john.doe@acme.com"
          },
          "name": {
            "description": "Name of the Contact",
            "type": "string",
            "example": "John Doe"
          },
          "imageId": {
            "description": "ID of an image associated with the Contact",
            "type": "string",
            "example": "1234!_qwer!_5667zxcvQWER!_ASDF"
          }
        }
      },
      "DateObjectValue": {
        "description": "Object representing a date",
        "type": "object",
        "title": "DateObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "DATE"
            ]
          },
          "value": {
            "description": "Date in the **full-date** format defined by [(https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 3339, section 5.6]</a>",
            "type": "string",
            "format": "date"
          }
        },
        "example": {
          "objectType": "DATE",
          "value": "2025-01-14"
        }
      },
      "DatetimeObjectValue": {
        "description": "Object representing a datetime",
        "type": "object",
        "title": "DatetimeObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "DATETIME"
            ]
          },
          "value": {
            "description": "Datetime, in the **date-time** format defined by <a href=\"https://tools.ietf.org/html/rfc3339#section-5.6\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 3339, section 5.6</a>",
            "type": "string",
            "format": "date-time"
          }
        },
        "example": {
          "objectType": "DATETIME",
          "value": "2025-03-03T16:59:59"
        }
      },
      "DurationObjectValue": {
        "description": "Object representing a duration in days",
        "type": "object",
        "title": "DurationObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "DURATION"
            ]
          },
          "days": {
            "description": "Number of days",
            "type": "number",
            "format": "float"
          }
        },
        "example": {
          "objectType": "DURATION",
          "days": 29
        }
      },
      "MultiContactObjectValue": {
        "description": "Object containing a list of Contacts",
        "type": "object",
        "title": "MultiContactObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "MULTI_CONTACT"
            ]
          },
          "value": {
            "description": "List of Contacts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactObjectValue"
            }
          }
        }
      },
      "MultiPicklistObjectValue": {
        "description": "Object containing a list of strings to choose from",
        "type": "object",
        "title": "MultiPicklistObjectValue",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "MULTI_PICKLIST"
            ]
          },
          "value": {
            "description": "List of strings to choose from",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "objectType": "MULTI_PICKLIST",
          "values": [
            "foo bar",
            "baz biff"
          ]
        }
      },
      "WorkspaceListing": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Workspace Id.",
            "type": "number"
          },
          "name": {
            "description": "Workspace name.",
            "type": "string"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "permalink": {
            "description": "URL that represents a direct link to the workspace in Smartsheet.",
            "type": "string"
          }
        }
      },
      "SightName": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Dashboard name.",
            "type": "string"
          }
        }
      },
      "SightResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SightName"
          }
        ],
        "properties": {
          "id": {
            "description": "Dashboard Id.",
            "type": "number",
            "readOnly": true
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "permalink": {
            "description": "URL that represents a direct link to the dashboard in Smartsheet.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SightListItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SightResult"
          }
        ],
        "properties": {
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "ChartColumnInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATE_TIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATE_TIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ]
          }
        }
      },
      "DashboardFont": {
        "description": "List of supported fonts in Dashboards",
        "type": "string",
        "enum": [
          "Arial",
          "Courier",
          "Georgia",
          "Gill Sans",
          "Helvetica",
          "Luminari",
          "Monaco",
          "Tahoma",
          "Times New Roman",
          "Verdana"
        ]
      },
      "Axes": {
        "type": "object",
        "properties": {
          "location": {
            "description": "Describes location of the axis.",
            "type": "string",
            "enum": [
              "BOTTOM",
              "LEFT",
              "NONE",
              "RIGHT",
              "TOP"
            ]
          },
          "title": {
            "description": "Axis title.",
            "type": "string"
          },
          "titleInfo": {
            "$ref": "#/components/schemas/ChartColumnInfo"
          },
          "axisTitleFont": {
            "$ref": "#/components/schemas/DashboardFont"
          },
          "axisLabelFormat": {
            "description": "Describes the axis format (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)).",
            "type": "string",
            "example": ",,,,,,,,36,,,,,,,,"
          },
          "axisLabelFont": {
            "$ref": "#/components/schemas/DashboardFont"
          },
          "includeZero": {
            "description": "Includes 0 in the axis.",
            "type": "boolean"
          }
        }
      },
      "Legend": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "enum": [
              "BOTTOM",
              "LEFT",
              "NONE",
              "RIGHT",
              "TOP"
            ]
          },
          "legendFormat": {
            "type": "string",
            "description": "The format descriptor (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the legend has a non-default format applied to it.",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "legendFont": {
            "$ref": "#/components/schemas/DashboardFont"
          }
        }
      },
      "WidgetChartDataLabel": {
        "type": "object",
        "properties": {
          "labelType": {
            "type": "string",
            "enum": [
              "NONE",
              "PERCENT",
              "VALUE"
            ]
          }
        }
      },
      "ChartTooltipStyle": {
        "type": "object",
        "properties": {
          "labelType": {
            "type": "string",
            "enum": [
              "NONE",
              "PERCENT",
              "X_SERIES_Y",
              "X_Y_PERCENT",
              "Y",
              "Y_PERCENT"
            ]
          }
        }
      },
      "SeriesData": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "xFormat": {
            "type": "string",
            "description": "The format descriptor (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the series has a non-default format applied to it.",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "yFormat": {
            "type": "string",
            "description": "The format descriptor (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the series has a non-default format applied to it.",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "color": {
            "type": "string"
          }
        }
      },
      "Series": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "titleInfo": {
            "$ref": "#/components/schemas/ChartColumnInfo"
          },
          "seriesTitleFormat": {
            "type": "string",
            "description": "Series title format (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting))."
          },
          "seriesType": {
            "type": "string",
            "enum": [
              "AREA",
              "BAR",
              "COLUMN",
              "LINE",
              "PIE",
              "SCATTER"
            ]
          },
          "dataLabels": {
            "$ref": "#/components/schemas/WidgetChartDataLabel"
          },
          "tooltips": {
            "$ref": "#/components/schemas/ChartTooltipStyle"
          },
          "lineType": {
            "type": "string",
            "enum": [
              "CURVED",
              "STEPPED",
              "STRAIGHT"
            ]
          },
          "holeSize": {
            "type": "number"
          },
          "isFilled": {
            "type": "boolean"
          },
          "isHalf": {
            "type": "boolean"
          },
          "isStacked": {
            "type": "boolean"
          },
          "xFormat": {
            "type": "string",
            "description": "The format descriptor (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the series has a non-default format applied to it.",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "yFormat": {
            "type": "string",
            "description": "The format descriptor (see [Formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the series has a non-default format applied to it.",
            "example": ",,1,1,,,,,,,,,,,,,"
          },
          "color": {
            "type": "string"
          },
          "axisLocationX": {
            "type": "string",
            "enum": [
              "BOTTOM",
              "LEFT",
              "NONE",
              "RIGHT",
              "TOP"
            ]
          },
          "axisLocationY": {
            "type": "string",
            "enum": [
              "BOTTOM",
              "LEFT",
              "NONE",
              "RIGHT",
              "TOP"
            ]
          },
          "yColumnInfo": {
            "$ref": "#/components/schemas/ChartColumnInfo"
          },
          "xColumnInfo": {
            "$ref": "#/components/schemas/ChartColumnInfo"
          },
          "seriesSelectionOrder": {
            "type": "string",
            "enum": [
              "COLUMNS",
              "ROWS"
            ]
          },
          "seriesData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeriesData"
            }
          },
          "selectionRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectionRange"
            }
          }
        }
      },
      "WidgetChartGridLine": {
        "type": "object",
        "properties": {
          "lineStyle": {
            "type": "string",
            "enum": [
              "SOLID"
            ]
          }
        }
      },
      "GroupMemberAdd": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Group member's email address.",
            "type": "string",
            "format": "email",
            "example": "john.doe@smartsheet.com"
          }
        }
      },
      "GroupMembersAddArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GroupMemberAdd"
        }
      },
      "GroupCreate": {
        "description": "Create group request.",
        "type": "object",
        "properties": {
          "name": {
            "description": "**name** (required)\n\nMust be unique within the organization account.\n",
            "type": "string",
            "example": "API-created group"
          },
          "description": {
            "description": "**description** (optional)\n",
            "type": "string",
            "example": "Group created via API"
          },
          "members": {
            "$ref": "#/components/schemas/GroupMembersAddArray"
          }
        }
      },
      "GroupUpdate": {
        "description": "Updates group properties, including name, description, and owner.",
        "type": "object",
        "properties": {
          "name": {
            "description": "name (Optional)\n\nMust be unique within the organization account.\n",
            "type": "string",
            "example": "Renamed group"
          },
          "description": {
            "description": "Description (optional).",
            "type": "string",
            "example": "Some new description"
          },
          "ownerId": {
            "description": "ownerId (optional)\n\nId of an admin user to whom the group ownership is transferred.\n",
            "type": "number",
            "example": 94094820842
          }
        }
      },
      "Recipient_Individual": {
        "type": "object",
        "description": "Specifies the recipient of an [Email]($ref: 'Email.yaml#/components/schemas/Email'). The recipient may be either an individual or a group. To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute. Either **email** and **groupId** may be set, but not both.\n",
        "properties": {
          "email": {
            "description": "The email address of an individual recipient.",
            "type": "string",
            "format": "email",
            "example": "john.doe@smartsheet.com"
          }
        }
      },
      "Recipient_Group": {
        "type": "object",
        "description": "Specifies the recipient of an [Email]($ref: 'Email.yaml#/components/schemas/Email'). The recipient may be either an individual or a group. To specify an individual, set the **email** attribute; to specify a group, set the **groupId** attribute. Either **email** and **groupId** may be set, but not both.\n",
        "properties": {
          "groupId": {
            "description": "The Id of a group recipient.",
            "type": "number",
            "example": 2258118617917316
          }
        }
      },
      "version": {
        "description": "A number that is incremented every time a sheet is modified.",
        "type": "number"
      },
      "schemas-Sheet": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "permalink": {
            "$ref": "#/components/schemas/permalink"
          },
          "version": {
            "$ref": "#/components/schemas/version"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          }
        }
      },
      "SheetVersion": {
        "type": "object",
        "properties": {
          "version": {
            "description": "A number that represents the current sheet version.",
            "type": "number"
          }
        }
      },
      "UpdateSheet": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Sheet name.",
            "type": "string"
          },
          "projectSettings": {
            "$ref": "#/components/schemas/ProjectSettings"
          },
          "userSettings": {
            "$ref": "#/components/schemas/SheetUserSettings"
          }
        }
      },
      "SuccessResult": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Message that indicates the request was successful.",
            "type": "string",
            "enum": [
              "SUCCESS"
            ],
            "example": "SUCCESS"
          },
          "resultCode": {
            "description": "* '0' Success",
            "type": "number",
            "enum": [
              0
            ]
          }
        }
      },
      "GetColumn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Column Id."
          },
          "index": {
            "type": "number",
            "description": "Column index or position. This number is zero-based."
          },
          "symbol": {
            "type": "string",
            "description": "When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)."
          },
          "title": {
            "type": "string",
            "description": "Column title."
          },
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATETIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ],
            "description": "See [Column Types](/api/smartsheet/openapi/columns)"
          },
          "validation": {
            "type": "boolean",
            "description": "Indicates whether validation has been enabled for the column (value = **true**)."
          }
        }
      },
      "ColumnObjectAttributes": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Column title."
          },
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATETIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ]
          },
          "formula": {
            "type": "string",
            "description": "The formula for a column, if set, for instance **=data@row**."
          },
          "hidden": {
            "type": "boolean",
            "description": "Indicates whether the column is hidden."
          },
          "index": {
            "type": "number",
            "description": "Column index or position. This number is zero-based."
          },
          "autoNumberFormat": {
            "$ref": "#/components/schemas/AutoNumberFormat"
          },
          "contactOptions": {
            "$ref": "#/components/schemas/ContactOption"
          },
          "description": {
            "type": "string",
            "description": "Column description."
          },
          "format": {
            "type": "string",
            "description": "The format descriptor (see [Cell formatting](/api/smartsheet/guides/advanced-topics/cell-formatting)). Only returned if the **include** query string parameter contains **format** and this column has a non-default format applied to it."
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates whether the column is locked. In a response, a value of **true** indicates that the column has been locked by the sheet owner or the admin."
          },
          "lockedForUser": {
            "type": "boolean",
            "description": "Indicates whether the column is locked for the requesting user. This attribute may be present in a response, but cannot be specified in a request."
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Array of the options available for the column."
            }
          },
          "symbol": {
            "type": "string",
            "description": "When applicable for **CHECKBOX** or **PICKLIST** column types. See [Symbol Columns](/api/smartsheet/openapi/columns)."
          },
          "systemColumnType": {
            "type": "string",
            "enum": [
              "AUTO_NUMBER",
              "CREATED_BY",
              "CREATED_DATE",
              "MODIFIED_BY",
              "MODIFIED_DATE"
            ],
            "description": "See [System Columns](/api/smartsheet/openapi/columns)"
          },
          "validation": {
            "type": "boolean",
            "description": "Indicates whether validation has been enabled for the column (value = **true**)"
          },
          "version": {
            "type": "number",
            "description": "Read only. The level of the column type. Each element in the array is set to one of the following values:\n * **0**: TEXT_NUMBER, CONTACT_LIST, or PICKLIST\n * **1**: MULTI_CONTACT_LIST\n * **2**: MULTI_PICKLIST\n\nSee [Versioning and changes](/api/smartsheet/guides/basics/versioning-and-changes).\n"
          },
          "width": {
            "type": "number",
            "description": "Display width of the column in pixels."
          }
        }
      },
      "AddColumns": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Column Id."
          },
          "index": {
            "type": "number",
            "description": "Column index or position. This number is zero-based."
          },
          "title": {
            "type": "string",
            "description": "Column title."
          },
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATETIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ],
            "description": "See [Column Types](/api/smartsheet/openapi/columns)"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of the options available for the column."
          },
          "validation": {
            "type": "boolean",
            "description": "Indicates whether validation has been enabled for the column (value = **true**)."
          },
          "width": {
            "type": "number",
            "description": "Display width of the column in pixels."
          }
        }
      },
      "UpdateColumn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Column Id."
          },
          "index": {
            "type": "number",
            "description": "Column index or position. This number is zero-based."
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of the options available for the column."
          },
          "title": {
            "type": "string",
            "description": "Column title."
          },
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATETIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ],
            "description": "See [Column Types](/api/smartsheet/openapi/columns)"
          },
          "validation": {
            "type": "boolean",
            "description": "Indicates whether validation has been enabled for the column (value = **true**)."
          }
        }
      },
      "CommentCreationRequest": {
        "type": "object",
        "properties": {
          "text": {
            "description": "Comment body.",
            "type": "string"
          }
        }
      },
      "components-schemas-Sheet": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "permalink": {
            "$ref": "#/components/schemas/permalink"
          }
        }
      },
      "CrossSheetReferenceRequestWithColumnIds": {
        "type": "object",
        "description": "CrossSheetReference object to create which will refer to the entire columns in the range from startColumnId to endColumnId.",
        "properties": {
          "sourceSheetId": {
            "description": "Sheet Id of source sheet.",
            "type": "number"
          },
          "name": {
            "description": "Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References.",
            "type": "string"
          },
          "endColumnId": {
            "description": "Defines ending edge of range when specifying one or more columns. Must be used with startColumnId.",
            "type": "number"
          },
          "startColumnId": {
            "description": "Defines beginning edge of range when specifying one or more columns. Must be used with endColumnId.",
            "type": "number"
          }
        }
      },
      "CrossSheetReferenceRequestWithRowIds": {
        "type": "object",
        "description": "CrossSheetReference object to create which will refer to the entire rows in the range from startRowId to endRowId.",
        "properties": {
          "sourceSheetId": {
            "description": "Sheet Id of source sheet.",
            "type": "number"
          },
          "name": {
            "description": "Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References.",
            "type": "string"
          },
          "endRowId": {
            "description": "Defines ending edge of range when specifying one or more rows. Must be used with startRowId.",
            "type": "number"
          },
          "startRowId": {
            "description": "Defines beginning edge of range when specifying one or more rows. Must be used with endRowId.",
            "type": "number"
          }
        }
      },
      "CrossSheetReferenceRequestWithColumnAndRowIds": {
        "type": "object",
        "description": "CrossSheetReference object to create with specified cell range.",
        "properties": {
          "sourceSheetId": {
            "description": "Sheet Id of source sheet.",
            "type": "number"
          },
          "name": {
            "description": "Friendly name of reference. Auto-generated unless specified in Create Cross-sheet References.",
            "type": "string"
          },
          "endColumnId": {
            "description": "Defines ending edge of range when specifying one or more columns. Must be used with startColumnId. To specify an entire column, omit the startRowId and endRowId parameters.",
            "type": "number"
          },
          "endRowId": {
            "description": "Defines ending edge of range when specifying one or more rows. Must be used with startRowId. To specify an entire row, omit the startColumnId and endColumnId parameters.",
            "type": "number"
          },
          "startColumnId": {
            "description": "Defines beginning edge of range when specifying one or more columns. Must be used with endColumnId. To specify an entire column, omit the startRowId and endRowId parameters.",
            "type": "number"
          },
          "startRowId": {
            "description": "Defines beginning edge of range when specifying one or more rows. Must be used with endRowId. To specify an entire row, omit the startColumnId and endColumnId parameters.",
            "type": "number"
          }
        }
      },
      "CommentRequest": {
        "description": "Comment.",
        "type": "object",
        "properties": {
          "text": {
            "description": "Comment text.",
            "type": "string"
          }
        }
      },
      "DiscussionCreationRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/CommentRequest"
          }
        }
      },
      "DiscussionCreationRequestWithAttachment": {
        "type": "object",
        "properties": {
          "discussion": {
            "type": "object",
            "description": "Discussion.",
            "properties": {
              "comment": {
                "$ref": "#/components/schemas/CommentRequest"
              },
              "title": {
                "description": "Title for the attachment. Only used with an attachment.",
                "type": "string"
              }
            }
          },
          "file": {
            "description": "File to attach to the new comment. Only used with an attachment.",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "CommentCreationRequestWithAttachment": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/CommentRequest"
          },
          "file": {
            "description": "File to attach to the new comment. Only used with an attachment.",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "icalEnabled": {
        "description": "If **true**, a webcal is available for the calendar in the sheet.",
        "type": "boolean"
      },
      "readOnlyFullAccessibleBy": {
        "description": "Indicates who can access the 'Read-Only Full' view of the published sheet:\n  * ALL - available to anyone who has the link.\n  * ORG - available only to members of the sheet owner's Smartsheet organization account.\n  * SHARED - available only to users shared to the item.\n\nOnly returned in the response if **readOnlyFullEnabled = true**.\n",
        "type": "string",
        "enum": [
          "ALL",
          "ORG",
          "SHARED"
        ]
      },
      "readOnlyFullDefaultView": {
        "description": "Indicates which view the user has set for a read-only, default view of the published sheet. Must be one of the listed enum values.\n",
        "type": "string",
        "enum": [
          "CALENDAR",
          "CARD",
          "GRID"
        ]
      },
      "readOnlyFullEnabled": {
        "description": "If **true**, a rich version of the sheet is published with the ability to download row attachments and discussions.",
        "type": "boolean"
      },
      "readOnlyFullShowToolbar": {
        "description": "**Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.",
        "type": "boolean",
        "deprecated": true
      },
      "readOnlyLiteEnabled": {
        "description": "If **true**, a lightweight version of the sheet is published without row attachments and discussions.",
        "type": "boolean"
      },
      "readWriteAccessibleBy": {
        "description": "Indicates who can access the 'Edit by Anyone' view of the published sheet:\n  * ALL - available to anyone who has the link.\n  * ORG - available only to members of the sheet owner's Smartsheet organization account.\n  * SHARED - available only to users shared to the item.\n\nOnly returned in the response if **readWriteEnabled = true**.\n",
        "type": "string",
        "enum": [
          "ALL",
          "ORG",
          "SHARED"
        ]
      },
      "readWriteDefaultView": {
        "description": "Indicates which view the user has set for a read-write, default view of the published sheet. Must be one of the listed enum values.\n",
        "type": "string",
        "enum": [
          "CALENDAR",
          "CARD",
          "GRID"
        ]
      },
      "readWriteEnabled": {
        "description": "If **true**,a rich version of the sheet is published with the ability to edit cells and manage attachments and discussions.",
        "type": "boolean"
      },
      "readWriteShowToolbar": {
        "description": "**Deprecated** Indicates whether the left nav toolbar is displayed. The default, or **true**, is to display the toolbar. If **false**, hides the toolbar.",
        "type": "boolean",
        "deprecated": true
      },
      "SheetPublishRequest": {
        "description": "Describes the sheet's publish settings. Used as a request body to set publish status.",
        "type": "object",
        "x-tags": [
          "sheets"
        ],
        "properties": {
          "icalEnabled": {
            "$ref": "#/components/schemas/icalEnabled"
          },
          "readOnlyFullAccessibleBy": {
            "$ref": "#/components/schemas/readOnlyFullAccessibleBy"
          },
          "readOnlyFullDefaultView": {
            "$ref": "#/components/schemas/readOnlyFullDefaultView"
          },
          "readOnlyFullEnabled": {
            "$ref": "#/components/schemas/readOnlyFullEnabled"
          },
          "readOnlyFullShowToolbar": {
            "$ref": "#/components/schemas/readOnlyFullShowToolbar"
          },
          "readOnlyLiteEnabled": {
            "$ref": "#/components/schemas/readOnlyLiteEnabled"
          },
          "readWriteAccessibleBy": {
            "$ref": "#/components/schemas/readWriteAccessibleBy"
          },
          "readWriteDefaultView": {
            "$ref": "#/components/schemas/readWriteDefaultView"
          },
          "readWriteEnabled": {
            "$ref": "#/components/schemas/readWriteEnabled"
          },
          "readWriteShowToolbar": {
            "$ref": "#/components/schemas/readWriteShowToolbar"
          }
        }
      },
      "cellObjectForRows": {
        "type": "object",
        "properties": {
          "columnId": {
            "type": "number",
            "description": "The Id of the column that the cell is located in."
          },
          "columnType": {
            "type": "string",
            "description": "Only returned if the include query string parameter contains **columnType**."
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "A string, number, or a Boolean value -- depending on the cell type and the data in the cell. Cell values larger than 4000 characters are silently truncated. An empty cell returns no value."
          },
          "displayValue": {
            "type": "string",
            "description": "Visual representation of cell contents, as presented to the user in the UI."
          }
        }
      },
      "UpdateRowsObject": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Row Id.",
            "type": "number"
          },
          "rowNumber": {
            "description": "Row number within the sheet.",
            "type": "number",
            "minimum": 1
          },
          "parentRowNumber": {
            "description": "The row number of the parent.",
            "type": "number"
          },
          "parentId": {
            "description": "The Id of the parent.",
            "type": "number"
          },
          "expanded": {
            "description": "Indicates whether the row is expanded or collapsed.",
            "type": "boolean"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "cells": {
            "description": "Cells objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cellObjectForRows"
            }
          },
          "version": {
            "description": "Sheet version number that is incremented every time a sheet is modified.",
            "type": "number"
          }
        }
      },
      "AddRowsObject": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Row Id.",
            "type": "number"
          },
          "sheetId": {
            "description": "Parent sheet Id.",
            "type": "number"
          },
          "rowNumber": {
            "description": "Row number within the sheet.",
            "type": "number",
            "minimum": 1
          },
          "expanded": {
            "description": "Indicates whether the row is expanded or collapsed.",
            "type": "boolean"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "cells": {
            "description": "Cells objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cellObjectForRows"
            }
          },
          "version": {
            "description": "Sheet version number that is incremented every time a sheet is modified.",
            "type": "number"
          }
        }
      },
      "GetRowObject": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Row Id.",
            "type": "number"
          },
          "sheetId": {
            "description": "Parent sheet Id.",
            "type": "number"
          },
          "rowNumber": {
            "description": "Row number within the sheet.",
            "type": "number",
            "minimum": 1
          },
          "expanded": {
            "description": "Indicates whether the row is expanded or collapsed.",
            "type": "boolean"
          },
          "cells": {
            "description": "Cells objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cellObjectForRows"
            }
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          }
        }
      },
      "properties-id": {
        "description": "SummaryField Id.",
        "type": "number"
      },
      "properties-contactOptions": {
        "description": "Array of ContactOption objects to specify a pre-defined list of values for the column. Column type must be CONTACT_LIST.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ContactOption"
        }
      },
      "format": {
        "description": "The format descriptor. Only returned if the include query string parameter contains format and this column has a non-default format applied to it.",
        "type": "string"
      },
      "formula": {
        "description": "The formula for a cell, if set.",
        "type": "string"
      },
      "index": {
        "description": "Field index or position. This number is zero-based.",
        "type": "number"
      },
      "locked": {
        "description": "Indicates whether the field is locked.",
        "type": "boolean"
      },
      "properties-options": {
        "description": "When applicable for PICKLIST column type. Array of the options available for the field.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "properties-symbol": {
        "description": "When applicable for PICKLIST column type.",
        "type": "string"
      },
      "properties-title": {
        "description": "Arbitrary name, must be unique within summary.",
        "type": "string"
      },
      "properties-type": {
        "type": "string",
        "enum": [
          "ABSTRACT_DATETIME",
          "CHECKBOX",
          "CONTACT_LIST",
          "DATE",
          "DATETIME",
          "DURATION",
          "MULTI_CONTACT_LIST",
          "MULTI_PICKLIST",
          "PICKLIST",
          "PREDECESSOR",
          "TEXT_NUMBER"
        ]
      },
      "validation": {
        "description": "Indicates whether summary field values are restricted to the type.",
        "type": "boolean"
      },
      "SummaryFieldUpdateRequest": {
        "type": "object",
        "description": "SummaryField object to update.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/properties-id"
          },
          "contactOptions": {
            "$ref": "#/components/schemas/properties-contactOptions"
          },
          "format": {
            "$ref": "#/components/schemas/format"
          },
          "formula": {
            "$ref": "#/components/schemas/formula"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/Hyperlink"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "index": {
            "$ref": "#/components/schemas/index"
          },
          "locked": {
            "$ref": "#/components/schemas/locked"
          },
          "objectValue": {
            "$ref": "#/components/schemas/ObjectValue"
          },
          "options": {
            "$ref": "#/components/schemas/properties-options"
          },
          "symbol": {
            "$ref": "#/components/schemas/properties-symbol"
          },
          "title": {
            "$ref": "#/components/schemas/properties-title"
          },
          "type": {
            "$ref": "#/components/schemas/properties-type"
          },
          "validation": {
            "$ref": "#/components/schemas/validation"
          }
        }
      },
      "SummaryFieldCreateRequest": {
        "type": "object",
        "description": "SummaryField object to create.",
        "properties": {
          "contactOptions": {
            "$ref": "#/components/schemas/properties-contactOptions"
          },
          "format": {
            "$ref": "#/components/schemas/format"
          },
          "formula": {
            "$ref": "#/components/schemas/formula"
          },
          "hyperlink": {
            "$ref": "#/components/schemas/Hyperlink"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "index": {
            "$ref": "#/components/schemas/index"
          },
          "locked": {
            "$ref": "#/components/schemas/locked"
          },
          "objectValue": {
            "$ref": "#/components/schemas/ObjectValue"
          },
          "options": {
            "$ref": "#/components/schemas/properties-options"
          },
          "symbol": {
            "$ref": "#/components/schemas/properties-symbol"
          },
          "title": {
            "$ref": "#/components/schemas/properties-title"
          },
          "type": {
            "$ref": "#/components/schemas/properties-type"
          },
          "validation": {
            "$ref": "#/components/schemas/validation"
          }
        }
      },
      "SummaryFieldAddImage": {
        "type": "object",
        "properties": {
          "id": {
            "description": "SummaryField Id.",
            "type": "number"
          },
          "index": {
            "description": "Field index or position. This number is zero-based.",
            "type": "number"
          },
          "title": {
            "description": "Arbitrary name, must be unique within summary.",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "ABSTRACT_DATETIME",
              "CHECKBOX",
              "CONTACT_LIST",
              "DATE",
              "DATETIME",
              "DURATION",
              "MULTI_CONTACT_LIST",
              "MULTI_PICKLIST",
              "PICKLIST",
              "PREDECESSOR",
              "TEXT_NUMBER"
            ]
          },
          "locked": {
            "description": "Indicates whether the field is locked.",
            "type": "boolean"
          },
          "lockedForUser": {
            "description": "Indicates whether the field is locked for the requesting user.",
            "type": "boolean"
          },
          "objectValue": {
            "$ref": "#/components/schemas/ObjectValue"
          },
          "formula": {
            "description": "The formula for a cell, if set.",
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "version": {
            "description": "Sheet version number that is incremented every time a sheet is modified.",
            "type": "number"
          }
        }
      },
      "Timestamp_Writeable": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Timestamp_date-time"
          },
          {
            "$ref": "#/components/schemas/Timestamp_number"
          }
        ]
      },
      "ProfileImage": {
        "type": "object",
        "properties": {
          "imageId": {
            "description": "Unique image Id.",
            "type": "string",
            "example": "u!1!nAtdn5RJB_o!k6_e_3h2R3w!wmYXPek-yVD"
          },
          "height": {
            "description": "Image height.",
            "type": "string",
            "example": "1050"
          },
          "width": {
            "description": "Image width.",
            "type": "string",
            "example": "1050"
          }
        }
      },
      "SheetList": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Sheet Id.",
            "type": "number"
          },
          "name": {
            "description": "Sheet name.",
            "type": "string"
          },
          "owner": {
            "description": "Empty string",
            "example": "",
            "type": "string"
          },
          "ownerId": {
            "description": "Set to a static value of \"0\".",
            "example": 0,
            "type": "number"
          }
        }
      },
      "UserUpdate": {
        "description": "Updates User for the following attributes:\n\n* **admin** (required).\n* **licensedSheetCreator** (required).\n* **firstName** (optional).\n* **groupAdmin** (optional).\n* **lastName** (optional).\n* **resourceViewer** (optional).\n",
        "type": "object",
        "properties": {
          "admin": {
            "description": "Indicates whether the user is a system admin (can manage user accounts and organization account).",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "licensedSheetCreator": {
            "description": "Indicates whether the user is a licensed user (can create and own sheets).",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "firstName": {
            "description": "User's first name.",
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "description": "User's last name.",
            "type": "string",
            "example": "Doe"
          },
          "groupAdmin": {
            "description": "Indicates whether the user is a group admin (can create and edit groups).",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "resourceViewer": {
            "description": "Indicates whether the user is a resource viewer (can access resource views).",
            "type": "boolean",
            "default": false,
            "example": true
          }
        }
      },
      "UserProfileImageResponse": {
        "description": "User profile image response.",
        "properties": {
          "email": {
            "description": "User's primary email address.",
            "type": "string",
            "format": "email",
            "example": "jane.doe@smartsheet.com"
          },
          "name": {
            "description": "User's full name (read-only).",
            "type": "string",
            "readOnly": true,
            "example": "Jane Doe"
          },
          "firstName": {
            "description": "User's first name.",
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "description": "User's last name.",
            "type": "string",
            "example": "Doe"
          },
          "profileImage": {
            "$ref": "#/components/schemas/ProfileImage"
          },
          "id": {
            "description": "User Id.",
            "type": "number",
            "readOnly": true,
            "example": 48569348493401200
          }
        }
      },
      "AddAlternateEmail": {
        "type": "object",
        "properties": {
          "email": {
            "description": "User's alternate email address.",
            "type": "string",
            "example": "johnathan.doe@smartsheet.com"
          }
        }
      },
      "Create_Webhook_Request": {
        "type": "object",
        "properties": {
          "callbackUrl": {
            "description": "HTTPS URL where callbacks are sent.",
            "type": "string",
            "example": "https://www.myApp.com/webhooks"
          },
          "events": {
            "description": "Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string value '\\*.\\*' (asterisk period asterisk), which means \"all objects\" and \"all events\".",
            "type": "array",
            "items": {
              "type": "string",
              "example": "*.*"
            }
          },
          "name": {
            "description": "Webhook name.",
            "type": "string",
            "example": "Webhook for Sheet Creation"
          },
          "version": {
            "description": "Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects that are compatible with the version 1 release of webhooks.",
            "type": "number",
            "example": 1,
            "minimum": 1,
            "maximum": 1
          }
        }
      },
      "Update_Webhook_Request": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Create_Webhook_Request"
          },
          {
            "type": "object",
            "properties": {
              "enabled": {
                "description": "Indicates whether the webhook is on (true) or off (false).",
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "FolderNameOnly": {
        "description": "Can contain dashboards, folders, reports, sheets, or templates.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Folder name.",
            "type": "string"
          }
        }
      },
      "FolderSimpleResponse": {
        "description": "Can contain dashboards, folders, reports, sheets, or templates.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Folder name.",
            "type": "string"
          }
        }
      },
      "CallbackEvents": {
        "description": "Array of CallbackEvent objects",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CallbackEvent"
        }
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://app.smartsheet.com/b/authorize",
            "tokenUrl": "https://api.smartsheet.com/2.0/token",
            "scopes": {
              "ADMIN_SHEETS": "Modify sheet structure, including column definition, publish state, etc.",
              "ADMIN_SIGHTS": "Modify dashboards structure.",
              "ADMIN_USERS": "Add and remove users from your Smartsheet organization account; create groups and manage membership.",
              "ADMIN_WEBHOOKS": "Create, delete, and update webhooks; get all webhooks; reset shared secret.",
              "ADMIN_WORKSPACES": "Create and manage workspaces and folders, including sharing.",
              "CREATE_SHEETS": "Create new sheets.",
              "CREATE_SIGHTS": "Create new dashboards.",
              "DELETE_SHEETS": "Delete sheets.",
              "DELETE_SIGHTS": "Delete dashboards.",
              "READ_CONTACTS": "Retrieve contacts.",
              "READ_EVENTS": "Retrieve events.",
              "READ_SHEETS": "Read all sheet data, including attachments, discussions, and cell data.",
              "READ_SIGHTS": "Read all dashboards data.",
              "READ_USERS": "Retrieve users and groups for your Smartsheet organization account.",
              "SHARE_SHEETS": "Share sheets, including sending sheets as attachments.",
              "SHARE_SIGHTS": "Share dashboards.",
              "WRITE_SHEETS": "Insert and modify sheet data, including attachments, discussions, and cell data."
            }
          }
        }
      },
      "APIToken": {
        "scheme": "bearer",
        "type": "http",
        "description": "API Token."
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "API Access Token used to authenticate requests to Smartsheet APIs.\n",
        "schema": {
          "type": "string",
          "example": "Bearer JKlMNOpQ12RStUVwxYZAbcde3F5g6hijklM789"
        }
      },
      "includeAll": {
        "name": "includeAll",
        "in": "query",
        "required": false,
        "description": "If true, include all results, that is, do not paginate. Mutually exclusive with page and pageSize (they are ignored if includeAll=true is specified).",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "modifiedSince": {
        "name": "modifiedSince",
        "in": "query",
        "required": false,
        "description": "When specified with a date and time value, response only includes the objects that are modified on or after the date and time specified. If you need to keep track of frequent changes, it may be more useful to use Get Sheet Version.",
        "schema": {
          "$ref": "#/components/schemas/Timestamp"
        }
      },
      "numericDates": {
        "name": "numericDates",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "description": "You can optionally choose to receive and send dates/times in numeric format, as milliseconds since the UNIX epoch (midnight on January 1, 1970 in UTC time), using the query string parameter numericDates with a value of true. This query parameter works for any API request."
      },
      "page": {
        "name": "page",
        "in": "query",
        "required": false,
        "description": "Which page to return. Defaults to 1 if not specified. If you specify a value greater than the total number of pages, the last page of results is returned.",
        "schema": {
          "type": "number",
          "default": 1
        }
      },
      "pageSize": {
        "name": "pageSize",
        "in": "query",
        "required": false,
        "description": "The maximum number of items to return per page. Unless otherwise stated for a specific endpoint, defaults to 100. If only page is specified, defaults to a page size of 100. For reports, the default is 100 rows. If you need larger sets of data from your report, returns a maximum of 10,000 rows per request.",
        "schema": {
          "type": "number",
          "default": 100
        }
      },
      "contactId": {
        "name": "contactId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "contactId of the contact being accessed."
      },
      "contactInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response:\n  * **profileImage**\n",
        "schema": {
          "type": "string",
          "enum": [
            "profileImage"
          ]
        }
      },
      "Accept-Encoding": {
        "name": "Accept-Encoding",
        "in": "header",
        "description": "Strongly recommended to make sure payload is compressed. Must be set to one of the following values:\n* deflate\n* gzip\n",
        "schema": {
          "type": "string",
          "enum": [
            "deflate",
            "gzip"
          ]
        },
        "required": false
      },
      "ActorId": {
        "name": "x-smar-sc-actor-id",
        "description": "UserId of the user\n",
        "in": "header",
        "schema": {
          "type": "string",
          "example": "100012"
        }
      },
      "favoriteInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response.\n",
        "schema": {
          "type": "string",
          "enum": [
            "directId",
            "name"
          ]
        }
      },
      "Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "description": "Required for POST and PUT requests. Defines the structure for the request body.\n",
        "schema": {
          "type": "string",
          "default": "application/json"
        }
      },
      "favoriteType": {
        "name": "favoriteType",
        "in": "path",
        "schema": {
          "type": "string",
          "enum": [
            "folder",
            "report",
            "sheet",
            "sight",
            "template",
            "workspace"
          ]
        },
        "required": true,
        "description": "The favorite type."
      },
      "favoriteIds": {
        "name": "objectIds",
        "in": "query",
        "required": true,
        "description": "A comma-separated list of Ids of the favorited item.\n",
        "schema": {
          "type": "string"
        }
      },
      "favoriteId": {
        "name": "favoriteId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "Favorite Id, e.g., sheet Id, report Id."
      },
      "folderId": {
        "name": "folderId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "Folder Id where you can create sheets, sights, reports, templates, and other folders."
      },
      "folderWorkspaceInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response:\n  * **source** - adds the Source object indicating which object the folder was created from, if any\n  * **distributionLink**\n  * **ownerInfo** Returns the user with owner permissions, or the user with admin permissions if there is no owner assigned. If no owner or admins are assigned, the Plan Asset Admin is returned. If no Plan Asset Admin is assigned, the System Admin is returned.\n  * **sheetVersion**\n  * **permalinks**\n",
        "schema": {
          "type": "string",
          "enum": [
            "source",
            "distributionLink",
            "ownerInfo",
            "sheetVersion"
          ]
        }
      },
      "sheetCopyInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of elements to copy:\n  * **attachments**\n  * **cellLinks** - includes cross-sheet references\n  * **data** - includes formatting\n  * **discussions** - includes comments\n  * **filters**\n  * **forms**\n  * **ruleRecipients** -- includes notification recipients, must also include rules when using this attribute\n  * **rules** -- includes notifications and workflow rules\n  * **shares** |\nNOTE: Cell history is not copied, regardless of which include parameter values are specified.\n",
        "schema": {
          "type": "string",
          "enum": [
            "attachments",
            "cellLinks",
            "data",
            "discussions",
            "filters",
            "forms",
            "ruleRecipients",
            "rules",
            "shares"
          ]
        }
      },
      "sheetCopyExclude": {
        "name": "exclude",
        "in": "query",
        "required": false,
        "description": "When specified with a value of **sheetHyperlinks**, excludes this category from the response",
        "schema": {
          "type": "string",
          "enum": [
            "sheetHyperlinks"
          ]
        }
      },
      "skipRemap": {
        "name": "skipRemap",
        "in": "query",
        "description": "A comma-separated list of references to NOT re-map for the newly created folder.",
        "schema": {
          "type": "string",
          "enum": [
            "cellLinks",
            "reports",
            "sheetHyperlinks",
            "sights"
          ]
        },
        "required": false
      },
      "include": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "Additional parameter to create a sheet from template.\nA comma-separated list of elements to copy from the template.\n",
        "schema": {
          "type": "string",
          "enum": [
            "attachments",
            "cellLinks",
            "data",
            "discussions",
            "filters",
            "forms",
            "ruleRecipients",
            "rules"
          ]
        }
      },
      "Content-Disposition": {
        "name": "Content-Disposition",
        "in": "header",
        "description": "Should be equal to \"attachment\" to tell the API that a file is in the body of the POST request, followed by a semicolon, followed by **filename=** and the URL-encoded filename in quotes\n",
        "schema": {
          "type": "string",
          "example": "attachment; filename=\"ProgressReport.docx\""
        }
      },
      "parameters-Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "required": true,
        "description": "Required for POST request to import a sheet from CSV/XLSX file.\n* For CSV files, use: Content-Type: text/csv\n* For XLSX files, use: Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\n",
        "schema": {
          "type": "string",
          "enum": [
            "text/csv",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
          ]
        }
      },
      "sheetName": {
        "name": "sheetName",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "Desired name of the sheet."
      },
      "headerRowIndex": {
        "name": "headerRowIndex",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false,
        "description": "A zero-based integer indicating the row number to use for column names. Rows before this are omitted.\nIf not specified, the default values are Column1, Column2, etc.\n"
      },
      "primaryColumnIndex": {
        "name": "primaryColumnIndex",
        "in": "query",
        "schema": {
          "type": "number",
          "default": 0
        },
        "required": false,
        "description": "A zero-based integer indicating the column to designate as primary.\n"
      },
      "groupId": {
        "name": "groupId",
        "description": "Group Id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "userId": {
        "name": "userId",
        "description": "User Id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "Accept": {
        "name": "Accept",
        "in": "header",
        "description": "The Accept request-header field can be used to specify certain media types which are acceptable for the response.",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "accessApiLevel": {
        "name": "accessApiLevel",
        "in": "query",
        "required": false,
        "description": "Allows COMMENTER access for inputs and return values. For backwards-compatibility, VIEWER is the default. For example, to see whether a user has COMMENTER access for a sheet, use accessApiLevel=1.\n",
        "schema": {
          "type": "number",
          "default": 0
        }
      },
      "reportId": {
        "name": "reportId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "reportID of the report being accessed."
      },
      "reportInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response:\n  * **attachments**\n  * **discussions**\n  * **proofs**\n  * **format**\n  * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data\n  * **scope** - adds the report's scope to the response\n  * **source** - adds the Source object indicating which report the report was created from, if any\n  * **sourceSheets**\n",
        "schema": {
          "type": "string",
          "enum": [
            "attachments",
            "discussions",
            "proofs",
            "format",
            "objectValue",
            "scope",
            "source",
            "sourceSheets"
          ]
        }
      },
      "reportExclude": {
        "name": "exclude",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to not include in the response\n",
        "schema": {
          "type": "string",
          "enum": [
            "linkInFromCellDetails",
            "linksOutToCellsDetails"
          ]
        }
      },
      "reportLevel": {
        "name": "level",
        "in": "query",
        "required": false,
        "description": "specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (level=0, default), multi-contact data (level=1), or multi-picklist data (level=3).",
        "schema": {
          "type": "integer",
          "default": 0
        }
      },
      "sharingInclude": {
        "name": "sharingInclude",
        "in": "query",
        "description": "When applicable for the specific object this parameter defines the scope of the share. Possible values are ITEM or WORKSPACE. ITEM is an item-level share (that is, the specific object to which the share applies is shared with the user or group). WORKSPACE is a workspace-level share (that is, the workspace that contains the object to which the share applies is shared with the user or group).",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "ITEM",
            "WORKSPACE"
          ]
        }
      },
      "sendEmail": {
        "name": "sendEmail",
        "in": "query",
        "description": "Either true or false to indicate whether to notify the user by email. Default is false. If true, limit is 1000 emails.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "shareId": {
        "name": "shareId",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "Share Id."
      },
      "query": {
        "name": "query",
        "in": "query",
        "required": true,
        "description": "Text with which to perform the search. Enclose in double-quotes for an exact search.",
        "schema": {
          "type": "string"
        }
      },
      "location": {
        "name": "location",
        "in": "query",
        "required": false,
        "description": "**Deprecated** When specified with a value of **personalWorkspace**, limits the response to only those items in the user's workspaces.\n",
        "schema": {
          "type": "string",
          "default": ""
        },
        "deprecated": true
      },
      "parameters-include": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "When specified with a value of **favoriteFlag**, response indicates which returned items are favorites.  favorite -- dashboards, folders, reports, sheets, templates, and workspaces will have the property favorite: true parentObjectFavorite -- attachments, discussions, summary fields, and rows will have the property parentObjectFavorite: true\n",
        "schema": {
          "type": "string",
          "default": ""
        }
      },
      "scopes": {
        "name": "scopes",
        "in": "query",
        "required": false,
        "description": "If search fails, try using an array for each type of this comma-separated list of search filters.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "attachments",
              "cellData",
              "comments",
              "folderNames",
              "reportNames",
              "sheetNames",
              "sightNames",
              "summaryFields",
              "templateNames",
              "workspaceNames"
            ]
          }
        }
      },
      "sheetId": {
        "name": "sheetId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "Sheet Id of the sheet being accessed."
      },
      "sheetInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response:\n* **sheetVersion** - current version number of each sheet, should not be combined with pagination\n* **source** - the Source object for any sheet that was created from another sheet, if any\n",
        "schema": {
          "type": "string",
          "enum": [
            "sheetVersion",
            "source"
          ]
        }
      },
      "parameters-sheetInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response:\n  * **attachments** - includes the metadata for sheet-level and row-level attachments. To include discussion attachments, both attachments and discussions must be present in the include list.\n  * **columnType** -includes columnType attribute in the row's cells indicating the type of the column the cell resides in.\n  * **crossSheetReferences** - includes the cross-sheet references\n  * **discussions** - includes sheet-level and row-level discussions. To include discussion attachments, both attachments and discussions must be present in the include list.\n  * **filters** - includes filteredOut attribute indicating if the row should be displayed or hidden according to the sheet's filters.\n  * **filterDefinitions** - includes type of filter, operators used, and criteria\n  * **format** -  includes column, row, cell, and summary fields formatting.\n  * **ganttConfig** - includes Gantt chart details.\n  * **objectValue** - when used in combination with a level query parameter, includes the email addresses for multi-contact data.\n  * **ownerInfo** - includes the owner's email address and the owner's user Id.\n  * **rowPermalink** - includes permalink attribute that represents a direct link to the row in the Smartsheet application.\n  * **source** - adds the Source object indicating which report, sheet  Sight (aka dashboard), or template the sheet was created from, if any.\n  * **writerInfo** - includes createdBy and modifiedBy attributes on the row or summary fields, indicating the row or summary field's creator, and last modifier.\n",
        "schema": {
          "type": "string",
          "enum": [
            "attachments",
            "columnType",
            "crossSheetReferences",
            "discussions",
            "filters",
            "filterDefinitions",
            "format",
            "ganttConfig",
            "objectValue",
            "ownerInfo",
            "rowPermalink",
            "source",
            "writerInfo"
          ]
        }
      },
      "sheetExclude": {
        "name": "exclude",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of element types to exclude from the response:\n  * **filteredOutRows** - excludes filtered-out rows from response payload if a sheet filter is applied; includes total number of filtered rows\n  * **linkInFromCellDetails** - excludes the following attributes from the **cell.linkInFromCell** object: `columnId`, `rowId`, `status`\n  * **linksOutToCellsDetails** - excludes the following attributes from the **cell.linksOutToCells** array elements: `columnId`, `rowId`, `status`\n  * **nonexistentCells** - excludes empty cells\n",
        "schema": {
          "type": "string",
          "enum": [
            "filteredOutRows",
            "linkInFromCellDetails",
            "linksOutToCellsDetails",
            "nonexistentCells"
          ]
        }
      },
      "sheetColumnIds": {
        "name": "columnIds",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of column ids. The response contains only the specified columns in the \"columns\" array, and individual rows' \"cells\" array only contains cells in the specified columns.\n",
        "schema": {
          "type": "string"
        }
      },
      "sheetFilterId": {
        "name": "filterId",
        "in": "query",
        "required": false,
        "description": "Overrides the existing include={filters} parameter if both are supplied. Applies the given filter (if accessible by the calling user) and marks the affected rows as \"filteredOut\": true.\n",
        "schema": {
          "type": "string"
        }
      },
      "sheetIfVersionAfter": {
        "name": "ifVersionAfter",
        "in": "query",
        "required": false,
        "description": "If version specified is still the current sheet version, then returns an abbreviated Sheet object with only the sheet version property. Otherwise, if the sheet has been modified, returns the complete Sheet object. Intended to allow clients with a cached copy to make sure they have the latest version.\n",
        "schema": {
          "type": "integer"
        }
      },
      "sheetLevel": {
        "name": "level",
        "in": "query",
        "required": false,
        "description": "Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data.",
        "schema": {
          "type": "integer",
          "default": 0
        }
      },
      "paperSize": {
        "name": "paperSize",
        "in": "query",
        "required": false,
        "description": "applies to PDF format only",
        "schema": {
          "type": "string",
          "enum": [
            "LETTER",
            "LEGAL",
            "WIDE",
            "ARCHD",
            "A4",
            "A3",
            "A2",
            "A1",
            "A0"
          ],
          "default": "LETTER"
        }
      },
      "sheetRowIds": {
        "name": "rowIds",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of row Ids on which to filter the rows included in the result.\n",
        "schema": {
          "type": "string"
        }
      },
      "sheetRowNumbers": {
        "name": "rowNumbers",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of row numbers on which to filter the rows included in the result. Non-existent row numbers are ignored.\n",
        "schema": {
          "type": "string"
        }
      },
      "sheetRowsModifiedSince": {
        "name": "rowsModifiedSince",
        "in": "query",
        "required": false,
        "description": "Filter to return only rows that have been modified since the date/time provided. Date should be in ISO-8601 format.",
        "example": "2020-01-30T13:25:32-07:00",
        "schema": {
          "$ref": "#/components/schemas/Timestamp"
        }
      },
      "attachmentId": {
        "name": "attachmentId",
        "in": "path",
        "required": true,
        "description": "ID of the attachment",
        "schema": {
          "type": "string"
        }
      },
      "automationRuleId": {
        "name": "automationRuleId",
        "in": "path",
        "required": true,
        "description": "The Id of an Automation Rule",
        "schema": {
          "type": "string"
        }
      },
      "columnsLevel": {
        "name": "level",
        "in": "query",
        "required": false,
        "description": "Specifies whether object data types, such as multi-contact data are returned in a backwards-compatible, text format in text/number columns.<br>  - Set `level=0` (default) to use text/number columns for multi-contact data and multi-picklist data.<br>  - Set `level=1` to use multiple-entry contact list columns for multi-contact data; multi-picklist data is returned in text/number columns.<br>  - Set `level=2` to use multiple-entry contact list columns for multi-contact data and use multiple-entry picklist columns for multi-picklist data.",
        "schema": {
          "type": "integer",
          "default": 0
        }
      },
      "columnId": {
        "name": "columnId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "Column Id in the sheet being accessed."
      },
      "commentId": {
        "name": "commentId",
        "in": "path",
        "required": true,
        "description": "ID of the comment",
        "schema": {
          "type": "string"
        }
      },
      "crossSheetReferenceId": {
        "name": "crossSheetReferenceId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "Cross-sheet Reference Id"
      },
      "discussionInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response:\n  * **attachments** - effective only if comments is present, otherwise ignored\n  * **comments** - include all comments in threads\n",
        "schema": {
          "type": "string",
          "enum": [
            "attachments",
            "comments"
          ]
        }
      },
      "discussionId": {
        "name": "discussionId",
        "in": "path",
        "required": true,
        "description": "ID of the discussion",
        "schema": {
          "type": "string"
        }
      },
      "proofId": {
        "name": "proofId",
        "in": "path",
        "required": true,
        "description": "Proof Id of the original proof",
        "schema": {
          "type": "string"
        }
      },
      "proofInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response.\n",
        "schema": {
          "type": "string",
          "enum": [
            "attachments",
            "discussions"
          ]
        }
      },
      "allowPartialSuccess": {
        "name": "allowPartialSuccess",
        "in": "query",
        "description": "When specified with a value of true, enables partial success for this bulk operation. See [Bulk operations > Partial success](/api/smartsheet/guides/advanced-topics/scalability-options) for more information.",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false
      },
      "overrideValidation": {
        "name": "overrideValidation",
        "in": "query",
        "description": "You may use the query string parameter **overrideValidation** with a value of **true** to allow a cell value outside of the validation limits. You must specify **strict** with a value of **false** to bypass value type checking.",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false
      },
      "rowIds": {
        "name": "ids",
        "in": "query",
        "required": true,
        "description": "A comma-separated list of row Ids.\n",
        "schema": {
          "type": "string"
        }
      },
      "ignoreRowsNotFound": {
        "name": "ignoreRowsNotFound",
        "description": "**true** or **false**. If set to **false** and any of the specified row Ids are not found, no rows are deleted, and the \"not found\" [error](/api/smartsheet/openapi/schemas/error) is returned.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "copyRowsInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of row elements to copy in addition to the cell data:\n  * **all** - specify a value of **all** to include everything (attachments, children, and discussions).\n  * **attachments**\n  * **children** -  if specified, any child rows of the rows specified in the request are also copied to the destination sheet, and parent-child relationships amongst rows are preserved within the destination sheet; if not specified, only the rows specified in the request are copied.\n  * **discussions**\n",
        "schema": {
          "type": "string",
          "enum": [
            "all",
            "attachments",
            "children",
            "discussions"
          ]
        }
      },
      "ignoreRowsNotFoundForCopyRows": {
        "name": "ignoreRowsNotFound",
        "description": "**true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are copied).\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "moveRowsInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separate list of row elements to move in addition to the cell data.\n",
        "schema": {
          "type": "string",
          "enum": [
            "attachments",
            "discussions"
          ]
        }
      },
      "ignoreRowsNotFoundForMoveRows": {
        "name": "ignoreRowsNotFound",
        "description": "**true** or **false**: default is **false**. If set to **true**, specifying row Ids that do not exist within the source sheet does not cause an error response. If omitted or set to **false**, specifying row Ids that do not exist within the source sheet causes an error response (and no rows are moved).\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "rowId": {
        "name": "rowId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "Row Id in the sheet being accessed."
      },
      "rowInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of elements to include in the response.\n\nSee [Row Include Flags](/api/smartsheet/openapi/rows).\n\nAlso supports the **columns** include flag, which adds a columns array that specifies all of the columns for the sheet. This enables you to have the full context of the cells in the row.\n\nThe **filters** include flag returns a **filteredOut** attribute indicating if the row should be displayed or hidden according to the sheet's filters.\n",
        "schema": {
          "type": "string",
          "enum": [
            "columns",
            "filters"
          ]
        }
      },
      "Content-Length": {
        "name": "Content-Length",
        "in": "header",
        "description": "Must be set to the size of the file, in bytes. For example to determine file size using in UNIX:\n$ ls -l ProgressReport.docx\n5463 ProgressReport.docx\n",
        "schema": {
          "type": "integer",
          "example": 5463
        }
      },
      "altText": {
        "name": "altText",
        "in": "query",
        "description": "Url-encoded alternate text for the image",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "cellHistoryInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of elements to copy:\n  * **columnType** - includes the columnType attribute for each Cell object\n  * **objectValue** - when used in combination with a level query parameter, includes the email addresses for a multi-contact cell.\n",
        "schema": {
          "type": "string",
          "enum": [
            "columnType",
            "objectValue"
          ]
        }
      },
      "sheetSummaryInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of elements to include in the response.\n* **format**: includes format info for cells, rows, and summary fields\n* **writerInfo**: includes createdBy and modifiedBy attributes for rows and summary fields\n",
        "schema": {
          "type": "string",
          "enum": [
            "format",
            "writerInfo"
          ]
        }
      },
      "sheetSummaryExclude": {
        "name": "exclude",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of elements to not include in the response.\n* **displayValue**: excludes displayValue info for cells, rows, and summary fields\n* **image**: excludes image attributes for cells and summary fields\n* **imageAltText**: excludes alt text for cells and summary fields\n",
        "schema": {
          "type": "string",
          "enum": [
            "displayValue",
            "image",
            "imageAltText"
          ]
        }
      },
      "renameIfConflict": {
        "name": "renameIfConflict",
        "description": "Set to true if you want to override the requirement for unique summary field names. Repeated names will be adjusted by appending \"(1)\" or similar after the field name.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "sheetSummaryFieldIds": {
        "name": "ids",
        "in": "query",
        "required": true,
        "description": "A comma-separated list of Sheet Summary Field Ids.\n",
        "schema": {
          "type": "string"
        }
      },
      "ignoreSummaryFieldsNotFound": {
        "name": "ignoreSummaryFieldsNotFound",
        "description": "If **true**, the operation will succeed even if some fieldIds are not found.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "summaryFieldId": {
        "name": "fieldId",
        "in": "path",
        "schema": {
          "type": "number"
        },
        "required": true,
        "description": "Summary Field Id of the sheet summary field being accessed."
      },
      "sortRows": {
        "name": "include&exclude",
        "in": "query",
        "required": false,
        "description": "(Optional) Any of the relevant parameters or query parameters listed for [Get Sheet](/api/smartsheet/openapi/sheets/getsheet).\n",
        "schema": {
          "type": "string"
        }
      },
      "sightId": {
        "name": "sightId",
        "in": "path",
        "required": true,
        "description": "SightID of the sight being accessed.",
        "schema": {
          "type": "string"
        }
      },
      "sightInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of optional elements to include in the response:\n  * **objectValue** - when used in combination with a **level** query parameter, includes the email addresses for multi-contact data.\n  * **source** - the Source object for any Sight that was created from another Sight, if any\n",
        "schema": {
          "type": "string",
          "enum": [
            "objectValue",
            "source"
          ]
        }
      },
      "sightLevel": {
        "name": "level",
        "in": "query",
        "required": false,
        "description": "Specifies whether new functionality, such as multi-contact data is returned in a backwards-compatible, text format (**level=0**, default), multi-contact data (**level=2**), multi-picklist data (**level=3**), or Metric widget with sheet summary (**level=4**).",
        "schema": {
          "type": "integer",
          "default": 0
        }
      },
      "emailInclude": {
        "name": "email",
        "description": "Comma-separated list of email addresses on which to filter the results.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "lastLoginInclude": {
        "name": "include",
        "description": "If the API request is submitted by a system administrator and when specified with a value of 'lastLogin', response includes a lastLogin attribute for each user that indicates the Last login date/time of the user.\n\n**Note** If the number of users included in the response is > 100, you must paginate your query to see the lastLogin attribute. For large responses, the lastLogin attribute is never included.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "userProfileInclude": {
        "name": "include",
        "description": "When specified with a value of 'groups', response includes an array of groups (groupId, name, and description only) that the user is a member of.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "groups"
          ]
        }
      },
      "alternateEmailId": {
        "name": "alternateEmailId",
        "description": "Alternate Email Id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "webhookId": {
        "name": "webhookId",
        "in": "path",
        "required": true,
        "description": "The Id of a Webhook",
        "schema": {
          "type": "string"
        }
      },
      "workspaceCreateInclude": {
        "name": "include",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of elements to include:\n  * **all**\n  * **attachments**\n  * **brand**\n  * **cellLinks** - includes cross-sheet references\n  * **data** - includes formatting\n  * **discussions** - includes comments\n  * **filters**\n  * **forms**\n  * **ruleRecipients**\n  * **rules**\n  * **shares**\nNOTE: Cell history is not copied, regardless of which include parameter values are specified.\n",
        "schema": {
          "type": "string",
          "enum": [
            "all",
            "attachments",
            "brand",
            "cellLinks",
            "data",
            "discussions",
            "filters",
            "forms",
            "ruleRecipients",
            "rules",
            "shares"
          ]
        }
      },
      "workspaceId": {
        "name": "workspaceId",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "WorkspaceID of the worksheet being accessed."
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request.  See Smartsheet Error Code and Message for details.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "1001Example": {
                "summary": "401 - 1001 - An Access Token is required",
                "value": {
                  "errorCode": 1001,
                  "message": "An Access Token is required",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1002Example": {
                "summary": "401 - 1002  - Your Access Token is invalid",
                "value": {
                  "errorCode": 1003,
                  "message": "Your Access Token is invalid",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1003Example": {
                "summary": "401 - 1003 - Your Access Token has expired",
                "value": {
                  "errorCode": 1003,
                  "message": "Your Access Token has expired",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1005Example": {
                "summary": "401 - 1005 - Single Sign-On is required for this account",
                "value": {
                  "errorCode": 1005,
                  "message": "Single Sign-On is required for this account",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1030Example": {
                "summary": "401 - 1030 - You are unable to assume the user specified",
                "value": {
                  "errorCode": 1030,
                  "message": "You are unable to assume the user specified",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1067Example": {
                "summary": "401 - 1067 - Invalid client_id",
                "value": {
                  "errorCode": 1067,
                  "message": "Invalid client_id",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Not Found.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "1006Example": {
                "summary": "404 - 1006 - Not Found",
                "value": {
                  "errorCode": 1006,
                  "message": "Not Found",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      },
      "405": {
        "description": "Method Not Allowed.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "1010Example": {
                "summary": "404 - 1010 - HTTP Method Not Supported",
                "value": {
                  "errorCode": 1010,
                  "message": "HTTP Method Not Supported",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1122Example": {
                "summary": "404 - 1122 - Requested URL does not support this method: {0}",
                "value": {
                  "errorCode": 1122,
                  "message": "Requested URL does not support this method: {0}.",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      },
      "406": {
        "description": "Not Acceptable.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "1052Example": {
                "summary": "Invalid Accept header. Media type not supported.",
                "value": {
                  "errorCode": 1052,
                  "message": "Invalid Accept header. Media type not supported.",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      },
      "410": {
        "description": "Gone.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "4005Example": {
                "summary": "API Version Retired.",
                "value": {
                  "errorCode": 4005,
                  "message": "API Version Retired.",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      },
      "415": {
        "description": "Gone.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "1124Example": {
                "summary": "Invalid Content-Type header. Media type not supported.",
                "value": {
                  "errorCode": 1124,
                  "message": "Invalid Content-Type header. Media type not supported.",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      },
      "429": {
        "description": "Gone.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "4003Example": {
                "summary": "Rate limit exceeded.",
                "value": {
                  "errorCode": 4003,
                  "message": "Rate limit exceeded.",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error.  See Smartsheet Error Code and Message for details.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "1119Example": {
                "summary": "500 - 1119 - Failed to complete copy",
                "value": {
                  "errorCode": 1119,
                  "message": "Failed to complete copy.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1170Example": {
                "summary": "500 - 1170 - The sheet referenced by this widget is unavailable or deleted.",
                "value": {
                  "errorCode": 1170,
                  "message": "The sheet referenced by this widget is unavailable or deleted.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1171Example": {
                "summary": "500 - 1171 - The report referenced by this widget is unavailable or deleted.",
                "value": {
                  "errorCode": 1171,
                  "message": "The report referenced by this widget is unavailable or deleted.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1172Example": {
                "summary": "500 - 1172 - The referenced cell is unavailable or deleted.",
                "value": {
                  "errorCode": 1172,
                  "message": "The referenced cell is unavailable or deleted.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1278Example": {
                "summary": "500 - 1278 - Proofing service error.",
                "value": {
                  "errorCode": 1278,
                  "message": "Proofing service error.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "1285Example": {
                "summary": "500 - 1285 - Dashboard source profile field missing.",
                "value": {
                  "errorCode": 1285,
                  "message": "Dashboard source profile field missing.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "4000Example": {
                "summary": "500 - 4000 - An unexpected error has occurred. Please contact Support for assistance.",
                "value": {
                  "errorCode": 4000,
                  "message": "An unexpected error has occurred. Please contact Support for assistance.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "4001Example": {
                "summary": "500 - 4001 - Smartsheet.com is currently offline for system maintenance. Please check back again shortly.",
                "value": {
                  "errorCode": 4001,
                  "message": "Smartsheet.com is currently offline for system maintenance. Please check back again shortly.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "4002Example": {
                "summary": "500 - 4002 - Server timeout exceeded. Request has failed.",
                "value": {
                  "errorCode": 4002,
                  "message": "Server timeout exceeded. Request has failed.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "4004Example": {
                "summary": "500 - 4004 - An unexpected error has occurred. Please retry your request. If you encounter this error repeatedly, please contact Support for assistance.",
                "value": {
                  "errorCode": 4004,
                  "message": "An unexpected error has occurred. Please retry your request. If you encounter this error repeatedly, please contact Support for assistance.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "4004Example2": {
                "summary": "500 - 4004 - Request failed because sheetId {0} is currently being updated by another request that uses the same access token. Please retry your request once the previous request has completed.",
                "value": {
                  "errorCode": 4004,
                  "message": "Request failed because sheetId {0} is currently being updated by another request that uses the same access token. Please retry your request once the previous request has completed.",
                  "refId": "exlxshtxlpl8"
                }
              },
              "5151Example": {
                "summary": "500 - 5151 - The action could not be completed because the following people are outside of the approved domain sharing list:[email address]",
                "value": {
                  "errorCode": 5151,
                  "message": "The action could not be completed because the following people are outside of the approved domain sharing list:[email address]",
                  "refId": "exlxshtxlpl8"
                }
              },
              "5502Example": {
                "summary": "500 - 5502 - You must have sheet admin permission to save a notification with recipients other than yourself.",
                "value": {
                  "errorCode": 5502,
                  "message": "You must have sheet admin permission to save a notification with recipients other than yourself.",
                  "refId": "exlxshtxlpl8"
                }
              }
            }
          }
        }
      }
    }
  }
}